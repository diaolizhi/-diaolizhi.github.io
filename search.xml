<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[一个工作习惯]]></title>
      <url>/2020/12/2020/%E4%B8%80%E4%B8%AA%E5%B7%A5%E4%BD%9C%E4%B9%A0%E6%83%AF/</url>
      <content type="html"><![CDATA[<p>突然觉得自己工作处于一种浑浑噩噩的状态。</p>
<a id="more"></a>
<p>虽然一直在做项目，也多多少少有一些进度，但是没有给自己制定计划，没有明确自己在某个时间点应该完成到什么程度。</p>
<p>也不是说这种状态就完全是错的。如果我只考虑当前涉及到的业务，把这一部分实现之后再去考虑其他部分，那这样最终也可以完成任务。</p>
<p>我现在觉得这种状态是错的，是因为我深刻体会到了这么做背后的痛苦。我们是根据业务的需求去开发，可以说业务需求决定了我们如何设计这个项目。比如 A 需求，通过方案一可以很好地实现，但是后面发现 A 需求跟 B 模块有关联，现有的方案无法优雅地实现。所以现在算是什么情况呢？现在是需求没变，只是发现了之前遗漏掉的一些关联，导致项目部分代码需要重构。项目都没有做完，就要把一部分代码重构，而且这部分代码没有问题，只是无法满足需求。这实在是一件可笑且可悲的事情。</p>
<p>项目需要重构很正常，但是还没有做完就要重构，那么一定是哪里出了问题。</p>
<p>我们应该在开发之前梳理业务的流程，在梳理的时候应该能够用自己的话说出来，这里的说主要是为了检查自己能否将这个功能进行抽象。进行抽象的好处是让自己能够以更高的视角看待项目，让业务流程看起来更加清晰，本质上就是化繁为简。同样的功能，可能有很复杂的实现，也可能有很简单的实现（注意我这里说的是“可能”而非“可以”）。</p>
<p>对于一项不熟悉的任务，很难一开始就给出合适的解决方案，甚至开始时都无法判断一个方案是否可行。如果说犯错在所难免，那么我们应该尽早的将错误暴露出来：模拟使用某个方案，深入体会该方案是否足够简单，是否完全满足需求。这件事并不简单，因为凭空想象很难，深入到每一个细节也是需要花很多时间的。但是在脑海中模拟完整的业务流程是很有价值的，因为这样做可以最小化试错成本（除非自己对于业务非常熟悉，有过这部分的经验）。</p>
<p>胡说八道了那么多，标题所指的工作习惯究竟是什么呢？其实就是在做一些没有完全把握的功能时，要学会去抽象这个功能，要完整地梳理完业务中的每一个流程，思考它们之间的关系，提出业务中的不合理性，最终给出合理的解决方案。（让一个开发去做这些事情，实在是过分。此外，更过分的是客户的需求可能会发生改变，意味着很多付出都白费掉了，不过解决方法很简单：加钱）</p>
<p>明确自己的任务，将思考和执行分开：前期光是思考，一行代码都不要写。后期光是执行，按照计划实现就好。当任务明确之后，就可以评估任务完成的时间，让自己有目标，也看得到自己完成了哪些任务，而不至于浑浑噩噩不知道要做什么，也不知道做了什么。</p>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[十一月的第一天]]></title>
      <url>/2020/11/2020/%E5%8D%81%E4%B8%80%E6%9C%88%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>不知不觉已经一年多没有写过博客了，换一个说法：自从出来工作以后，就没有再写过博客了。</p>
<a id="more"></a>
<p>时间过得真快，不知不觉 2020 年都快过去了。公司今年从大学城搬到科韵路，我也从穗石村搬到了岗元新村，一眨眼已经 7 个月了。</p>
<p>今天是周日，我完全有时间也有兴趣写代码，我可以学如何写一个 composer 包、npm 包，也可以继续学习 Go 的协程，也可以研究 Laravel + Vue 的管理后台的权限控制。</p>
<p>不过，我并没有写代码，而是选择了打游戏。</p>
<p>因为我觉得自己需要脱离一下工作的状态，我有一种感觉：我在做自己喜欢的事情，但是是以一种我不喜欢的方式在做。之所以会有这种感觉，可能是这一周的工作太赶了。另一方面，觉得这么赶其实意义没什么意义。</p>
<p>我需要完成的工作还有很多，这些工作实际上都已经延期了，而且我还不确定什么时候可以完成。而这一周，精力都放在另一个我看来没那么重要的项目上面了。赶进度的结果就是留了很多坑要填。</p>
<p>回头看看自己这几个月的工作，我不知道如何形容。如果只用一个词来描述的话，我只想说两个字：垃圾。表面上看起来我是三个项目一起在做，可是实际上是一个都没有做好。</p>
<p>究其原因，一个很大的因素是：在前端花掉了太多的时间。我跟同事说过：我有三分之一的时间在写服务端，有三分之一的时间在写管理后台，还有三分之一的时间在想业务的流程该是什么样子的。一开始以为三个项目都挺简单的，习惯性一边写接口一边写管理端，直至业务的流程变了两三次，也没有想到要兼顾三个项目的进度，没有想到要把一部分的工作交给同事去做。导致了同事有时间，但是没有接口去调。项目延期跟我有直接关系，但我仍然觉得根本原因在于整个项目的把控。如果业务流程一开始足够清晰，不需要在开发阶段就调整两三次，不需要我写到的时候再去想、再去问，能节约一部分时间。如果业务流程足够清晰，原型图足够完成，那么设计师和前端也可以一开始就完成前端界面的设计，而不是等到后面才意识到：这里还少一个界面。</p>
<p>另一个重要因素是我没有规划，这一点在上面也提到了。正确的做法应该是，在正式写代码之前，把要做的事情全部列出来。至少要把某一个部分的细节全部列出来，从数据结构，到数据的新建、数据的修改，数据的查询和筛选，以及数据之间的关联。因为它们之间可能会相互的影响，后者可能会影响前者的设计，如果一开始没有考虑周到，就可能刚开始可能就会做无用功。</p>
<p>以前我都是只关注某一个点，没有全局的规划。导致后面才发现原来的逻辑跑不通，这个时候才去问，如果可以早点思考，就能减少一些这样的情况。另一方面，可以给自己定目标，当时间不足时，可以忽略一些不重要的东西，把精力放在主流程上面，而不是在某一个小点上浪费过多的时间。</p>
<p>不早了，到睡觉的时间了，睡眠是最重要的。</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[奇葩问题：IDEA 中正确运行，命令行运行就出错]]></title>
      <url>/2019/07/articles/bug%20-%20IDEA%20%E4%B8%AD%E6%AD%A3%E7%A1%AE%E8%BF%90%E8%A1%8C%EF%BC%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%90%E8%A1%8C%E5%87%BA%E9%94%99/</url>
      <content type="html"><![CDATA[<p>同一个世界，同一份代码，不同的结果。<br><a id="more"></a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>简单来说，就是一个项目在 IDEA 中可以正常运行，打成 jar 包之后，通过 <code>java -jar</code> 在命令行运行就出错。</p>
<p>具体来说：</p>
<p>这是一个 Spring Boot 项目，在 service 层发出一个 HTTP 请求。</p>
<p>在 IDEA 运行的时候，能得到正确的 json 数据，在命令行中就只得到“未知错误”的提示。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-07-29_17-28-18.png" alt></p>
<h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><h2 id="HTTP-request"><a href="#HTTP-request" class="headerlink" title="HTTP request"></a>HTTP request</h2><p>既然是 HTTP 的 response 不同，首先想到的是比较一下两处的 request 有何不同。</p>
<p><em>查看 okhttp 中请求主体的方法：</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">bodyToString</span><span class="params">(<span class="keyword">final</span> Request request)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Request copy = request.newBuilder().build();</span><br><span class="line">        <span class="keyword">final</span> Buffer buffer = <span class="keyword">new</span> Buffer();</span><br><span class="line">        copy.body().writeTo(buffer);</span><br><span class="line">        <span class="keyword">return</span> buffer.readUtf8();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"did not work"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而，两种方式发出的 HTTP request 好像都很正常，除去一些会变化的字符串外，请求主体一模一样。（这里<strong>会变化的字符串</strong>指的是时间戳、MD5 加密得到的字符串等，它们每次运行都是不一样的值）</p>
<p>此时应该将字符串写死，再对比两者的不同。</p>
<p>但是因为改起来太麻烦，加上以前的经验，我选择对请求主体中的字符进行 URL 编码，事实证明这是一个愚蠢的行为，它导致了在 IDEA 中也得不到想要的结果。</p>
<p>第一次尝试宣告失败。</p>
<h2 id="为-okhttp-设置代理"><a href="#为-okhttp-设置代理" class="headerlink" title="为 okhttp 设置代理"></a>为 okhttp 设置代理</h2><p>使用下面的方式创建 OkHttpClient 就能在 Fidder 中捕获到 okhttp 发送和接收的数据了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String hostname = <span class="string">"localhost"</span><span class="comment">/*127.0.0.1*/</span>;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">8888</span>;</span><br><span class="line">System.out.println(<span class="string">"设置代理"</span>);</span><br><span class="line">Proxy proxy = <span class="keyword">new</span> Proxy(Proxy.Type.HTTP,</span><br><span class="line"><span class="keyword">new</span> InetSocketAddress(hostname, port));</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.client = <span class="keyword">new</span> OkHttpClient().newBuilder().proxy(proxy).build();</span><br></pre></td></tr></table></figure>
<p>这里的思路是：不单单对比请求主体，而是通过 Fidder 更细致地比较两次 HTTP 请求的区别。</p>
<p>确实可以捕获到程序发出的 HTTP 请求，但是跟刚才一样，除去一些会变化的值，两者几乎是一样的。</p>
<p>第二次尝试也没有发现有用的信息。</p>
<h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>还是回到最初的疑惑：明明是一样的代码，而且是同一台电脑上，为什么得到不一样的结果？</p>
<p>同样的代码，难道会计算出不一样的 Hash Value ？</p>
<p><strong>是的。</strong></p>
<p>可能是直觉，也可能是实在没有思路了，所以猜测是 sign 字段（通过 MD5 算法生成）的问题。</p>
<p>很快验证出的确是 sign 字段有问题，但是怎么解决呢？</p>
<p>因为不知道在命令行运行时怎么 debug，所以一切都变得很麻烦。</p>
<p>经过慢慢的试验，一步步打印出来，最后发现进行摘要的字符串其实是一样的，但是得到的结果却不一样。</p>
<p>很明显是摘要算法有问题。</p>
<p>这个方法是我在网上复制的，难道它在命令行中执行会得到不一样的结果？</p>
<p>我又在网上搜了其他的 MD5 代码，但是还是一样出错。（如果此时运行对了，可能我永远都不会知道问题真正的原因了）。</p>
<p>最终用我的工地英语在谷歌搜索：<code>java cmd md5 digest difference</code>，然后看到<a href="https://stackoverflow.com/questions/6928641/will-java-messagedigest-generated-different-md5-hash-on-different-jdk-version" target="_blank" rel="noopener">这篇回答</a>，才知道因为 MD5 算法中，要将字符串转换成 byte[]，而 IDEA 和命令行的编码不同，导致得到的 byte[] 不同，进而导致 sign 不同。</p>
<p><em>在计算 Hash Value 的时候指定编码。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] array = md.digest(str.getBytes(<span class="string">"UTF-8"</span>));</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然解决这个问题只需要改一行代码，但是整个过程却花了我很多时间，做了太多太多无谓的尝试。</p>
<p>不过还好，还是解决了。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/psb.webp" alt></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> bug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对 Java 中流的理解]]></title>
      <url>/2019/07/articles/%E5%AF%B9%20Java%20%E4%B8%AD%E6%B5%81%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>通过表达整理自己的思路，但不一定正确。<br><a id="more"></a></p>
<p>以前学习 Java 中文件和流的时候，理解不深，当时又觉得很少用 Java 操作文件，所以就没有好好看，导致对于“文件”和“流”这两个概念都分不清。</p>
<p>印象中只记得有好多个类，记不得有多少个，更分不清各自有什么用，结果现在看不懂别人的代码了，所以再学习一下，争取能看懂。</p>
<h1 id="文件和流"><a href="#文件和流" class="headerlink" title="文件和流"></a>文件和流</h1><p>Java 提供了文件相关的类，和流相关的类，以前感觉都差不多。实际上前者主要是操作文件（比如删除、复制等），而不是进入文件中读取文件的数据。而后者是读写文件中的内容。</p>
<p>假设有一个 a.txt 文件，与文件相关的类，可以将它删除、改名。而与流相关的类，可以读取 a.txt 里面的内容，或者修改 a.txt 里面的内容。</p>
<p>上面是 Java 中类的区别，那么“文件”和“流”这两个名词各自是什么意思呢？</p>
<p>文件就是电脑里存在的文件：文本文件、图片文件、视频文件等等。</p>
<p>至于流，真的不好理解，网上有些说对数据的读、写是流，有的说文件就是流，以前认为流是内存和数据之间的通道。整半天没搞懂，迫于找不到通俗易懂的解释，所以根据网上的理解，自己瞎猜。</p>
<p>从实际应用的角度看，程序可能需要从外部读取数据，比如从硬盘中读取数据、从网络中获取数据。这些操作类似，不如将它们抽象化，用一个类表示，这也刚好符合面向对象的思想。</p>
<p>看到这里，我想说的是，不要单独去理解什么是流。（忘掉流吧，我偷电瓶养你）</p>
<p>直接从 InputStream 开始理解，它是一个抽象类，既然是类就应该可以用来表示某一类事物（就像 Person 类可以表示人一样）。所以 InputStream 就可以看成是<strong>所有可以读取到数据的东西</strong>。不过是硬盘，还是键盘，只要我可以从你那里读取到数据，你就是 InputStream（输入流）。</p>
<p>OutputStream 也是同样的道理，我往硬盘写数据的时候，硬盘就是 OutputStream（输出流）。</p>
<p>理解的前提是忘掉“流”，“流”只不过是类名里的最后一个字，如果设计者喜欢，叫做 OutputBlock 又有何不可呢？其次是牢记在 Java 中类是为了表示一类事物，InputStream 和 OutputStream 也不例外。</p>
<h1 id="常见的类及其描述"><a href="#常见的类及其描述" class="headerlink" title="常见的类及其描述"></a>常见的类及其描述</h1><h2 id="Some-important-Byte-stream-classes"><a href="#Some-important-Byte-stream-classes" class="headerlink" title="Some important Byte stream classes."></a>Some important Byte stream classes.</h2><table>
<thead>
<tr>
<th>Stream class</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>BufferedInputStream</strong></td>
<td>Used for Buffered Input Stream.</td>
</tr>
<tr>
<td><strong>BufferedOutputStream</strong></td>
<td>Used for Buffered Output Stream.</td>
</tr>
<tr>
<td><strong>DataInputStream</strong></td>
<td>Contains method for reading java standard datatype</td>
</tr>
<tr>
<td><strong>DataOutputStream</strong></td>
<td>An output stream that contain method for writing java standard data type</td>
</tr>
<tr>
<td><strong>FileInputStream</strong></td>
<td>Input stream that reads from a file</td>
</tr>
<tr>
<td><strong>FileOutputStream</strong></td>
<td>Output stream that write to a file.</td>
</tr>
<tr>
<td><strong>InputStream</strong></td>
<td>Abstract class that describe stream input.</td>
</tr>
<tr>
<td><strong>OutputStream</strong></td>
<td>Abstract class that describe stream output.</td>
</tr>
<tr>
<td><strong>PrintStream</strong></td>
<td>Output Stream that contain <code>print()</code> and <code>println()</code> method</td>
</tr>
</tbody>
</table>
<h2 id="Some-important-Charcter-stream-classes"><a href="#Some-important-Charcter-stream-classes" class="headerlink" title="Some important Charcter stream classes."></a>Some important Charcter stream classes.</h2><table>
<thead>
<tr>
<th>Stream class</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>BufferedReader</strong></td>
<td>Handles buffered input stream.</td>
</tr>
<tr>
<td><strong>BufferedWriter</strong></td>
<td>Handles buffered output stream.</td>
</tr>
<tr>
<td><strong>FileReader</strong></td>
<td>Input stream that reads from file.</td>
</tr>
<tr>
<td><strong>FileWriter</strong></td>
<td>Output stream that writes to file.</td>
</tr>
<tr>
<td><strong>InputStreamReader</strong></td>
<td>Input stream that translate byte to character</td>
</tr>
<tr>
<td><strong>OutputStreamReader</strong></td>
<td>Output stream that translate character to byte.</td>
</tr>
<tr>
<td><strong>PrintWriter</strong></td>
<td>Output Stream that contain <code>print()</code> and <code>println()</code> method.</td>
</tr>
<tr>
<td><strong>Reader</strong></td>
<td>Abstract class that define character stream input</td>
</tr>
<tr>
<td><strong>Writer</strong></td>
<td>Abstract class that define character stream output</td>
</tr>
</tbody>
</table>
<p>具体的类就不研究怎么用了，估计使用得最多的就是 Bufferedxxx 了。</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>下面这段代码的意思是：</p>
<ol>
<li>获取到字节输入流</li>
<li>将字节输入流转换成字符输入流</li>
<li>再转换成缓冲字符输入流</li>
<li>然后在逐行读取内容</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream =  request.getInputStream();</span><br><span class="line"></span><br><span class="line"><span class="comment">//BufferedReader是包装设计模式，性能更高</span></span><br><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream,<span class="string">"UTF-8"</span>));</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">String line ;</span><br><span class="line"><span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    sb.append(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个 BufferedReader 之前还要先创建一个 InputStreamReader，这看起来很麻烦，为什么不直接创建缓冲字符输入流呢？</p>
<p>首先，因为要从不同的设备中读取数据，所以需要设计多个类，而每个类都可能需要用到缓冲这个功能，如果再为每个类设计一个具有缓冲功能的类，那么类的数目将会翻一倍。</p>
<p>所以 BufferedReader 被设计为：接收一个字符输入流，并具有缓冲的功能，虽然使用上麻烦了一点，但是还是可以接受的，不然更多的类需要去记。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 安装 nginx]]></title>
      <url>/2019/05/articles/Linux%20%E5%AE%89%E8%A3%85%20nginx/</url>
      <content type="html"><![CDATA[<p>记录在 Linux 安装 nginx 的过程。</p>
<a id="more"></a>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">下载地址</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.16.0.tar.gz</span><br></pre></td></tr></table></figure>
<h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf nginx-xxx.tar.gz</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>
<h1 id="可能需要安装的库"><a href="#可能需要安装的库" class="headerlink" title="可能需要安装的库"></a>可能需要安装的库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpd-devel pcre perl pcre-devel zlib zlib-devel GeoIP GeoIP-devel</span><br></pre></td></tr></table></figure>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Bootstrap4 Dropdown 组件扩展 hover 事件]]></title>
      <url>/2019/05/articles/Bootstrap%20Dropdown%20%E4%BF%AE%E6%94%B9%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/19051201.gif" alt></p>
<a id="more"></a>
<p>效果如图所示，很简单的一个功能，但是因为我在这上面花了很多时间，所以我决定把它记录下来。</p>
<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://getbootstrap.com/docs/4.0/components/dropdowns/" target="_blank" rel="noopener">Dropdowns · Bootstrap </a></p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>Bootstrap 提供的下拉菜单默认是通过鼠标点击触发，下面是一个简单的完整示例。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/2019051201.gif" alt></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Default dropright button --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group dropright"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                Dropright</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="扩展-hover-事件"><a href="#扩展-hover-事件" class="headerlink" title="扩展 hover 事件"></a>扩展 hover 事件</h1><p>有时候希望鼠标放上去就展开菜单，而不需要鼠标点击，只需要一点简单的代码就可以实现：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .dropdown-menu &#123;</span></span><br><span class="line"><span class="undefined">        margin:0 !important;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .dropright:hover &gt; .dropdown-menu &#123;</span></span><br><span class="line"><span class="undefined">        display:block;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/19051202.gif" alt></p>
<p>为什么加上这几句就行了呢？因为 <code>dropdown-menu</code> 类的原来的样式是 <code>display:none;</code>，所以设置 <code>display:block;</code> 之后 <code>dropdown-menu</code> 就会显示出来了。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-05-12_12-07-15.png" alt></p>
<h1 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h1><p>当鼠标放上去时没有问题，但是如果鼠标点击之后就会<strong>出现问题</strong>。首先是位置，下拉菜单的位置改变了，其次是鼠标移走之后下拉菜单也不会自动关闭。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/19051203.gif" alt></p>
<h1 id="问题一的解决方法"><a href="#问题一的解决方法" class="headerlink" title="问题一的解决方法"></a>问题一的解决方法</h1><p>删掉 <code>button</code> 标签的  <code>data-toggle=&quot;dropdown&quot;</code>，这个方法看起来一点也不优雅，但是目前只能想到这个。</p>
<h1 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h1><p>本来下拉菜单是在右侧显示的，但是现在却是在下面显示。</p>
<h1 id="问题二的解决方法"><a href="#问题二的解决方法" class="headerlink" title="问题二的解决方法"></a>问题二的解决方法</h1><p>在 <code>&lt;style&gt;</code> 标签中添加：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dropright</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dropdown-menu</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一开始我就搜到了解决办法，但是由于我太蠢了，看都不看直接复制，导致一直得不到想要的效果（根本原因是：别人的 HTML 代码跟官方示例不一样，所以直接复制过来自然没效果）。</p>
<p>后来找到了另一种方法，然后那个方法也有很大的缺陷：鼠标移走时下拉菜单不会关闭。尽管最后也解决了这个问题，但是效果并不好，而且有时还有 bug。</p>
<p>直到昨晚一点多终于搞明白了，一方面觉得自己真是蠢，抄代码都能抄歪来，另一方面没人分享自己的喜悦，所以有了这篇文章。</p>
<p>欢迎批评指点，如果对你有帮助那就更好了。</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.dropright</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.dropright</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 100%;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Default dropright button --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group dropright"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary dropdown-toggle"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                Dropright</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group dropright"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary dropdown-toggle"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                Dropright</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group dropright"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary dropdown-toggle"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                Dropright</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.2.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 聚合与继承]]></title>
      <url>/2019/02/articles/Maven%20%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<p>聚合是为了方便的构建多个项目，继承是为了简化 POM 的重复配置。</p>
<a id="more"></a>
<h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>一个实际的项目可能由多个“模块”组成，每个模块都是一个 Maven 项目。</p>
<p>这样就可能产生一个需求：同时构建多个 Maven 项目。此时如果进入到每个 Maven 项目的目录中，执行 mvn 命令进行构建就有点麻烦了。所以就有了“聚合”这个概念，聚合实际的作用就是同时构建多个 Maven 项目。</p>
<h1 id="聚合的步骤"><a href="#聚合的步骤" class="headerlink" title="聚合的步骤"></a>聚合的步骤</h1><p>要聚合模块其实很简单，就是创建一个 Maven 项目，然后在这个项目的 pom.xml 文件中声明要聚合的模块。</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>举例，moduleB和 moduleC 是普通的模块，moduleA 是聚合模块，目录结构如下：</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-02-12_11-59-31.png" alt></p>
<p>需要注意的是：</p>
<ul>
<li>聚合模块下没有 src 目录，只有一个 pom.xml 文件。毕竟它只是起聚合模块的作用，不需要实际代码。</li>
<li>目录结构不一定是这样的，下面的 pom.xml 还可以配置聚合模块所在的目录。</li>
</ul>
<h2 id="moduleA-的-pom-xml"><a href="#moduleA-的-pom-xml" class="headerlink" title="moduleA 的 pom.xml"></a>moduleA 的 pom.xml</h2><p>注意点 ：</p>
<ul>
<li>packaging 元素必须为 pom</li>
<li>建议填写 name 标签的内容，因为执行 mvn 命令时将会输出该标签下的内容。（如果没有写，将输出 artifactId）</li>
<li>modules 下的每个 module 标签对应一个模块。<strong>注意 module 标签中的是模块的相对路径，也就是对这个 pom.xml 的相对路径。</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test.modules<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>moduleC<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>module A<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>../moduleA<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>../moduleB<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在 moduleA 目录下执行 Maven 命令即可。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-02-12_12-26-23.png" alt></p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>这里的继承指的是 pom.xml 的继承，因为多个 Maven 项目可能存在多个相同的配置，使用继承就可以减少一些配置。</p>
<p>怎么做呢？</p>
<p>简单来说就是创建一个 Maven 项目，它的 pom.xml 作为父POM，然后在其他项目中通过坐标引入这个父项目，这样子POM将会继承父POM的一些配置。</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>聚合与继承不一样，但是不冲突，刚才的 moduleA 是聚合模块，同时 moduleA 的 pom.xml 也可以作为父POM。</p>
<p>使用了继承之后的 moduleB 的 pom.xml：</p>
<p>注意点：</p>
<ul>
<li>使用 parent 标签继承 moduleA</li>
<li>使用坐标定位 moduleA</li>
<li>relativePath 对应 moduleA 的相对目录<ul>
<li>默认值是 <code>../pom.xml</code></li>
<li>如果在这里的目录找不到，将会在本地仓库查找</li>
<li>最好写上 relativePath</li>
</ul>
</li>
<li>在 moduleB 的 pom.xml 中不用写 <code>groupId</code> 和 <code>artifactId</code>，因为会从 moduleA 的 pom.xml 中继承。<ul>
<li>如果和父POM不一样，也可以写上去。</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>moduleB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test.modules<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>moduleA<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../moduleA<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="可以继承的-POM-元素"><a href="#可以继承的-POM-元素" class="headerlink" title="可以继承的 POM 元素"></a>可以继承的 POM 元素</h1><ul>
<li>groupId 项目组 ID</li>
<li>version 项目版本</li>
<li>description 项目的描述信息</li>
<li>organization 项目的组织信息</li>
<li>inceptionYear 项目的创始年份</li>
<li>url 项目的 URL 地址</li>
<li>developers 项目的开发者信息</li>
<li>contributors 项目的贡献者信息</li>
<li>distributionManagement 项目的部署配置</li>
<li>issueManagement 项目的缺陷跟踪系统信息</li>
<li>ciManagement 项目的持续集成系统信息</li>
<li>scm 项目的版本控制系统信息</li>
<li>mailingLists 项目的邮件列表信息</li>
<li>properties 自定义的 Maven 属性</li>
<li>dependencies 项目的依赖配置</li>
<li>dependencyManagement 项目的依赖管理配置</li>
<li>repositories 项目的仓库配置</li>
<li>build 项目源码目录配置、输出目录配置、插件配置、插件管理配置等</li>
<li>reporting 项目的报告输出目录配置、报告插件配置</li>
</ul>
<h1 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h1><p>上面说到 dependencies 是可以继承的，也就是说父POM中添加的依赖，子项目中也会引入。</p>
<p>这样一来有一些好处，不过也有一些不好的地方：如果某个子项目继承了这个父POM，但是这个子项目并不需要那么多的依赖，这样岂不是产生了不必要的引用？</p>
<p>dependencyManagement  的作用就体现出来了，在父POM中使用 dependencyManagement ：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 随意添加的一个依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.aether<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aether-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在的效果是：</p>
<ul>
<li>如果子项目中没有添加这个依赖，那么即使继承了父POM，子项目也不会引入这个依赖。</li>
</ul>
<p>看起来没什么卵用，因为在子项目中还是要手动的添加依赖，但实际上还是有用的。因为在子项目中添加依赖时，可以省略 <code>version</code>，在父POM中做统一的版本管理，需要修改版本时只需要修改父POM中的 <code>version</code>。</p>
<h1 id="使用-import"><a href="#使用-import" class="headerlink" title="使用 import"></a>使用 import</h1><p>import 也是依赖范围的一种，只不过在 dependencyManagement  中才有用。</p>
<p>实际作用是：把上面的 moduleA 中的 dependencyManagement  合并到当前的 POM 的 dependencyManagement  元素中。（当然也可以使用复制、继承的方式实现）</p>
<p>注意点：</p>
<ul>
<li>type 是 pom</li>
<li>scope 是 import</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test.modules<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>moduleA<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h1><p>插件管理与依赖管理类似，使用 pluginManagement 之后同样是按需引入。</p>
<p>插件的隐含信息：</p>
<ul>
<li>版本。核心插件已经配置了版本</li>
<li>内置绑定。插件已经绑定了生命周期的阶段</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同样建议在父POM中统一管理插件的版本。</p>
<h1 id="超级POM"><a href="#超级POM" class="headerlink" title="超级POM"></a>超级POM</h1><p>超级POM类似于 Java 的 Object 类，是所有类的基类。</p>
<p>Maven 项目中的 pom.xml 还可以自定义源码目录，但是不建议这么做，最好是按照约定来开发。</p>
<p>现在只需要知道有超级POM的存在，并且所有 pom.xml 都继承自它，所以有很多配置不用我们自己书写，就可以直接使用。</p>
<h1 id="反应堆"><a href="#反应堆" class="headerlink" title="反应堆"></a>反应堆</h1><p>反应堆这个翻译有点难以理解，大概可以理解成：多个存在聚合关系的项目在构建时，Maven 需要解读构建的顺序，解读得到的结构顺序称为反应堆。</p>
<p>比如 moduleA 是聚合模块，moduleB、moduleC 是普通模块，同时这两个模块继承自 moduleD。</p>
<p>假设 moduleA 中模块的声明顺序是：</p>
<p>moduleB -&gt; moduleC -&gt; moduleD</p>
<p>在构建过程的，Maven 得到的反应堆是 moduleD -&gt; moduleB -&gt; moduleC。</p>
<p>这是因为从上往下构建，发现某个模块依赖于另一个模块，那么 Maven 将会先构建被依赖的模块，也就是这里的 moduleD。</p>
<p>另外，moduleC 也依赖于 moduleD，但是由于 moduleD 已经被构建，所以直接构建 moduleC。</p>
<h1 id="裁剪反应堆"><a href="#裁剪反应堆" class="headerlink" title="裁剪反应堆"></a>裁剪反应堆</h1><p>对于一个聚合项目，有时可能只需要构建一部分的模块，而不是完整的反应堆。</p>
<p>Maven 的命令行选项：</p>
<ul>
<li>-am，–also-make 同时构建所列模块的依赖模块</li>
<li>-amd，-also-make-dependents 同时构建依赖于所列模块的模块（谁依赖我，就构建谁）</li>
<li>-pl， –projects \&lt;arg> 只构建指定的模块，模块间用逗号隔开</li>
<li>-rf，-resume-from 从指定模块开始往下构建反应堆</li>
</ul>
<p>这些选项还可以组合使用，由于理解不深，不举例了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>多模块开发必须使用聚合。</p>
<p>使用继承可以简化项目的依赖和插件配置。</p>
]]></content>
      
        <categories>
            
            <category> Maven </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 生命周期与插件]]></title>
      <url>/2019/02/articles/Maven%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8E%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>生命周期是对项目进行的一系列操作，插件用来完成这些操作。</p>
<a id="more"></a>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>构建一个项目包括：清理文件 -&gt; 编译 -&gt; 测试 -&gt; 部署。</p>
<p>因为每一个项目都要进行类似的操作，所以 Maven 抽象出了<strong>生命周期</strong>。</p>
<p>光是存在生命周期并没有什么意义，而且生命周期<strong>只是定义了</strong>一系列操作，所以在实际的使用中，需要对项目进行某个具体的操作时，将由某个插件来完成这项任务。</p>
<p>抽象<strong>生命周期</strong>的好处是：制定了规范，只要遵守规范 Maven 就可以自动帮我们完成很多事情。</p>
<p><strong>抽象</strong>生命周期的好处是：便于拓展。</p>
<h1 id="三套生命周期"><a href="#三套生命周期" class="headerlink" title="三套生命周期"></a>三套生命周期</h1><p>三套生命周期包括：clean、default、site，每个生命周期又包括多个阶段。</p>
<p>后一个阶段需要前一个阶段先完成。比如执行第 3 个阶段，Maven 会先执行前面第 1、2 个阶段。</p>
<h2 id="clean-生命周期"><a href="#clean-生命周期" class="headerlink" title="clean 生命周期"></a>clean 生命周期</h2><p>clean 生命周期的目的是清理项目，它包括三个阶段：</p>
<ul>
<li>pre-clean 执行一些清理前需要完成的工作</li>
<li>clean 清理上一次构建生成的文件</li>
<li>post-clean 执行一些清理后需要完成的工作</li>
</ul>
<h2 id="default-生命周期"><a href="#default-生命周期" class="headerlink" title="default 生命周期"></a>default 生命周期</h2><p>default 生命周期是真正构建时需要执行的，比如编译就是在这个生命周期里面的。</p>
<p>话说回来，为什么要有三个生命周期呢？我自己的理解是：构建项目时需要执行的任务在 default 生命周期里，但是清理文件这一工作并不是每一次都要执行的，或者是说，清理文件这件事是和编译、打包项目相独立的。所以，他们分为了两个生命周期。site 生命周期同理。逻辑上独立生命周期可以方便理解，实际中使用中，独立生命周期也有好处，比如不是当这一次不需要清理文件时，就不需要加 <code>clean</code> 命令。</p>
<p>default 生命周期所包括的阶段：</p>
<ul>
<li>validate</li>
<li>initialize</li>
<li>generate-sources</li>
<li>process-sources 处理项目主资源文件。一般来说，是对 src/main/resources 目录的内容进行变量替换等工作后，复制到项目输出的主 classpath 目录中。</li>
<li>generate-resources</li>
<li>process-resources</li>
<li>compile 编译项目的主源码。一般来说，是编译 src/main/java 目录下的 Java 文件至项目输出的主 classpath 目录中。</li>
<li>process-classes</li>
<li>generate-test-sources</li>
<li>process-test-sources</li>
<li>generate-test-resources</li>
<li>process-test-resources</li>
<li>test-compile 编译项目的测试代码。一般来说，是编译 src/test/java 目录下的 Java 文件至项目输出的测试 classpath 目录中</li>
<li>process-test-classes</li>
<li>test 使用单元测试框架运行测试，测试代码不会被打包或部署。</li>
<li>prepare-package</li>
<li>package 接受编译好的代码，打包成可发布的格式，如 JAR</li>
<li>pre-integration-test</li>
<li>integration-test</li>
<li>post-integration-test</li>
<li>verify</li>
<li>install 将包安装到 Maven 本地仓库，供本地其他 Maven 项目使用。</li>
<li>deploy 将最终的包复制到远程仓库，供其他开发人员和 Maven 使用。</li>
</ul>
<p><a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" target="_blank" rel="noopener">官方解释</a></p>
<h2 id="site-生命周期"><a href="#site-生命周期" class="headerlink" title="site 生命周期"></a>site 生命周期</h2><p>site 生命周期的目的是建立和发布项目站点，Maven 能够基于 POM 所包含的信息，自动生成一个友好的站点，方便团队交流和发布项目信息。</p>
<p>site 生命周期所包含的阶段：</p>
<ul>
<li>pre-site 执行一些在生成项目站点之前需要完成的工作</li>
<li>site 生成项目站点文档</li>
<li>post-site 执行一些在生成项目站点之后需要完成的工作</li>
<li>site-deploy 将生成的项目站点发布到服务器生</li>
</ul>
<h1 id="命令行与生命周期"><a href="#命令行与生命周期" class="headerlink" title="命令行与生命周期"></a>命令行与生命周期</h1><ul>
<li>命令 <code>mvn clean</code> 调用 clean 生命周期的 clean 阶段。实际执行的是 clean 生命周期的 pre-clean 和 clean 阶段。也就是说，调用某个阶段，之前的阶段都会被调用。</li>
<li>命令 <code>mvn clean install</code> 实际执行的是 clean 生命周期的 pre-clean、clean 阶段，以及 default 生命周期的从 validate 至 install 的所有阶段。</li>
</ul>
<h1 id="插件目标"><a href="#插件目标" class="headerlink" title="插件目标"></a>插件目标</h1><p>前面说了，生命周期只是定义了规范，具体执行某一项操作是通过插件来完成的。</p>
<p>有些操作会比较相似，这样也就有一些代码可以复用。</p>
<p>现在的问题是：如果每一项任务都对应一个插件，代码就不好复用，所以这样不可取。</p>
<p>所以，一个插件有多个目标，一个目标用来执行生命周期中的一个任务。</p>
<h1 id="插件绑定"><a href="#插件绑定" class="headerlink" title="插件绑定"></a>插件绑定</h1><p>Maven 抽象出了生命周期，假设现在也有了插件，但是它们两者似乎并没有任何关系。</p>
<p>所以就需要插件绑定，将二者联系起来。</p>
<h2 id="内置绑定"><a href="#内置绑定" class="headerlink" title="内置绑定"></a>内置绑定</h2><p>Maven 为一些<strong>生命周期阶段</strong>绑定了插件的目标。</p>
<p>比如 default 生命周期的 compile 阶段跟 maven-compiler-plugin 插件的 compile 目标绑定了。</p>
<h2 id="自定义绑定"><a href="#自定义绑定" class="headerlink" title="自定义绑定"></a>自定义绑定</h2><p>有时候我们需要执行某项任务，但是并没有内置绑定插件目标来实现它。</p>
<p>此时就需要自定义绑定插件来完成。</p>
<p>这里需要注意的是 <code>executions</code> 元素，它下面的每一个 <code>execution</code> 子元素用来配置一个任务。</p>
<p>其中 <code>phrase</code> 指的是生命周期的某一个阶段，<code>goal</code> 指的是插件的某一个目标。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>id<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>java<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果没有 <code>phase</code> 标签，也不过出错。这是因为很多插件的目标在编写时已经定义了默认的绑定阶段，所以这里可以不写。</p>
<h2 id="查看插件信息"><a href="#查看插件信息" class="headerlink" title="查看插件信息"></a>查看插件信息</h2><p>使用下面这条命令：</p>
<p>（如果省略了版本信息，Maven 将自动获取最新版本来进行表述）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn help:describe -Dplugin=org.apache.maven.plugins:maven-source-plugin:2.1.1 -Ddetail</span><br></pre></td></tr></table></figure>
<p>查看默认绑定阶段：<code>Bound to phase:</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  Implementation: org.apache.maven.plugin.source.TestSourceJarNoForkMojo</span><br><span class="line">  Language: java</span><br><span class="line">  Bound to phase: package</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="使用前缀"><a href="#使用前缀" class="headerlink" title="使用前缀"></a>使用前缀</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn help:describe -Dplugin=compiler</span><br></pre></td></tr></table></figure>
<h3 id="指定插件目标"><a href="#指定插件目标" class="headerlink" title="指定插件目标"></a>指定插件目标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn help:describe -Dplugin=compiler -Dgoal=compile</span><br></pre></td></tr></table></figure>
<h3 id="输出更详细的信息"><a href="#输出更详细的信息" class="headerlink" title="输出更详细的信息"></a>输出更详细的信息</h3><p>加了 <code>-Ddetail</code>，将插件目标读取的属性列出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn help:describe -Dplugin=compiler -Dgoal=compile -Ddetail</span><br></pre></td></tr></table></figure>
<h1 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h1><h2 id="命令行插件配置"><a href="#命令行插件配置" class="headerlink" title="命令行插件配置"></a>命令行插件配置</h2><p>用户可以在 Maven 命令中使用 -D 参数，并伴随一个参数建=参数值的形式，来配置插件目标的参数。</p>
<p>例如：maven-surefire-plugin 提供了一个 maven.test.skip 参数，当其值为 true 时，将会跳过测试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>
<p>参数 -D 是 Java 自带的，其功能是通过命令行设置一个 Java 系统属性，Maven 会在需要时读取该属性的值，实现插件参数的配置。</p>
<h2 id="pom-中插件全局配置"><a href="#pom-中插件全局配置" class="headerlink" title="pom 中插件全局配置"></a>pom 中插件全局配置</h2><p>例如，为 maven-compiler-plugin 插件配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="pom-中插件任务配置"><a href="#pom-中插件任务配置" class="headerlink" title="pom 中插件任务配置"></a>pom 中插件任务配置</h2><p>例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  [...]</span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span> <span class="comment">&lt;!-- a lifecycle phase --&gt;</span> <span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tasks</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">echo</span>&gt;</span>xxxxxx<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tasks</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  [...]</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="从命令行调用插件"><a href="#从命令行调用插件" class="headerlink" title="从命令行调用插件"></a>从命令行调用插件</h1><p>之前执行的命令，比如：<code>mvn install</code> 是执行生命周期中的某一个阶段。</p>
<p>但是 Maven 也支持直接执行执行插件的某个目标，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:tree</span><br></pre></td></tr></table></figure>
<h1 id="插件解析机制"><a href="#插件解析机制" class="headerlink" title="插件解析机制"></a>插件解析机制</h1><p>刚说了从命令行调用插件的某个目标，但是话说回来，Maven 定义一个插件，应该也是使用坐标的，为什么 Maven 可以识别上面的 <code>dependency</code> 呢？</p>
<p>下面慢慢说。</p>
<h2 id="插件仓库"><a href="#插件仓库" class="headerlink" title="插件仓库"></a>插件仓库</h2><p>如果在本地找不到插件的话，将会到远程仓库查找。</p>
<p>这跟查找依赖的方式很像，但是查找依赖的远程仓库跟查找插件的远程仓库是不一样的，它们的配置方式也是不一样的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>apache.snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.apache.org/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- The releases element here is due to an issue in Maven 2.0 that will be</span></span><br><span class="line"><span class="comment">           fixed in future releases. This should be able to be disabled altogether. --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>daily<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>daily<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>apache.snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Plugin Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.apache.org/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="插件的默认-groupId"><a href="#插件的默认-groupId" class="headerlink" title="插件的默认 groupId"></a>插件的默认 groupId</h2><p>如果是官方插件（即如果其 groupId 是 org.apache.maven.plugins）就可以省略 groupId 配置，但是不推荐省略，免得别人不理解看不出来。</p>
<h2 id="解析插件版本"><a href="#解析插件版本" class="headerlink" title="解析插件版本"></a>解析插件版本</h2><ul>
<li>对于核心插件，Maven 的超级 POM 中设置了版本。因此，即使用户不加任何配置，它们的版本就确定了。</li>
<li>对于非核心插件，又没有指定版本，Maven 将会检查所有仓库中的可用版本，然后做出选择。</li>
</ul>
<p>建议指定一个明确的版本。</p>
<h2 id="解析插件前缀"><a href="#解析插件前缀" class="headerlink" title="解析插件前缀"></a>解析插件前缀</h2><p><code>~\.m2\repository\org\apache\maven\plugins\maven-metadata.xml</code> 和 <code>~\.m2\repository\org\codehaus\mojo\maven-metadata.xml</code> 存储了插件和前缀的对应关系。</p>
<p>随便举个例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Appfuse Maven Plugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefix</span>&gt;</span>appfuse<span class="tag">&lt;/<span class="name">prefix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>appfuse-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原来生命周期不仅仅是 <code>clean</code>、<code>install</code> …，而且生命周期分为三套。</p>
<p>原来插件是生命周期的具体实现，原来插件目标是与生命周期的某个阶段相绑定的。</p>
]]></content>
      
        <categories>
            
            <category> Maven </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 仓库]]></title>
      <url>/2019/02/articles/Maven%20%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>了解 Maven 中的仓库。</p>
<a id="more"></a>
<h1 id="使用-Maven-添加依赖"><a href="#使用-Maven-添加依赖" class="headerlink" title="使用 Maven 添加依赖"></a>使用 Maven 添加依赖</h1><p>一般来说，要在 Java 中使用别人的写好的代码，通常是下载别人提供的 jar 包，然后引入当前的项目来使用。</p>
<p>这么做的问题是：</p>
<ul>
<li>需要手动下载 jar 包</li>
<li>可能这个 jar 包又依赖于其他的 jar 包</li>
<li>…</li>
</ul>
<p>而在 Maven 中一切都变得很简单，创建一个 Maven 项目之后，假设我们需要使用 okhttp，只需要在谷歌搜索 okhttp，复制下面这段代码到我们的 pom.xml 中即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然了，实际上还是需要下载 jar 包的，毕竟“存在”才可以“使用”，不过这些工作不需要我们来完成。</p>
<p>在 pom.xml 添加 okhttp 的依赖之后，Maven 会替我们解决依赖的问题，并下载需要的 jar 包。</p>
<h1 id="Maven-背后的工作"><a href="#Maven-背后的工作" class="headerlink" title="Maven 背后的工作"></a>Maven 背后的工作</h1><p>我们只是告诉 Maven 需要 okhttp 这个依赖，然后呢？Maven 会去哪里下载这个依赖呢？</p>
<p>实际上 Maven 中有一个默认的地址，它默认就会去那里寻找 jar 包。</p>
<p>不过，暂时不关心如何查找，先关心在我们电脑中发生的事情。</p>
<p>Maven 下载 jar 包之后，统一保存到 <code>~/.m2/repository</code> 目录下，这个目录称为本地仓库。</p>
<h1 id="仓库的概念"><a href="#仓库的概念" class="headerlink" title="仓库的概念"></a>仓库的概念</h1><p>我认为仓库其实就是一个文件夹而已。仓库中存在文件，实际上就是文件夹中存放了一大堆 jar 包（也存在其他文件，<strong>我总是说 jar 包是因为我对其他类型文件用得比较少，认识不深</strong>）。</p>
<h1 id="仓库的规范（布局）"><a href="#仓库的规范（布局）" class="headerlink" title="仓库的规范（布局）"></a>仓库的规范（布局）</h1><p>为了更好的管理这些 jar 包，仓库有一套规范。否则，假设所有 jar 包都存在一个文件夹中，当 jar 包文件特别多时，查找就需要花很多的时间。（规范的作用还有很多，我还体会不到）</p>
<p>那么这套规范（或者是说布局）是什么？</p>
<p>简单说来，就是对于每一个 Maven 项目所构建的文件，就好比一个 jar 包，都在仓库中有一个明确且独立的位置。换句话说，根据一个 Maven 项目的坐标，就可以确定这个项目所生成的 jar 包的位置。</p>
<p>比如：</p>
<p>项目坐标：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.diaolizhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tieba-tool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实际的文件路径：</p>
<p><code>C:\Users\xxx\.m2\repository\com\diaolizhi\tieba-tool\1.3-SNAPSHOT</code></p>
<p>由此可知，<strong>大致</strong>的对应关系是：</p>
<p><code>groupId/artifactId/version/artifactId-version.packaging</code></p>
<p><strong>实际上，仓库的规范（布局）不仅仅是根据上面的 groupId、artifactId 和 version，这里只是举个例子。</strong></p>
<h1 id="仓库的分类"><a href="#仓库的分类" class="headerlink" title="仓库的分类"></a>仓库的分类</h1><ul>
<li>仓库<ul>
<li>本地仓库</li>
<li>远程仓库<ul>
<li>中央仓库</li>
<li>私服</li>
<li>其他公共库</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h1><p>就是默认的 <code>~/.m2/repository</code> 那么目录而已。</p>
<h2 id="修改本地仓库的位置"><a href="#修改本地仓库的位置" class="headerlink" title="修改本地仓库的位置"></a>修改本地仓库的位置</h2><p>编辑 <code>~/.m2/setting.xml</code> 文件。（先从 Maven 的安装目录将该文件复制过来）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\java\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h1><p>可以看成一台服务器，上面存放了非常多的 Maven 项目。</p>
<p>当本地仓库找不到某个依赖时，就会到中央仓库去寻找。</p>
<h1 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h1><p>架设在局域网的仓库服务。</p>
<p>特点：</p>
<ul>
<li>当 Maven 需要下载时，会向私服发送请求</li>
<li>如果私服不存在该文件，就向外部的远程仓库请求，并且缓存到私服上，以供下一次使用</li>
<li>从本地上传文件到私服上供局域网内用户使用</li>
</ul>
<h1 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h1><p><a href="https://maven.apache.org/guides/mini/guide-multiple-repositories.html" target="_blank" rel="noopener">官方文档 - Setting up Multiple Repositories</a></p>
<p>修改 pom.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>your custom repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://jarsm2.dyndns.dk<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>daily<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>ignore<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>your custom repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://jarsm2.dyndns.dk<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>id 用来声明一个远程仓库<ul>
<li>如果 id 设置为 central 将会覆盖中央仓库的配置</li>
</ul>
</li>
<li>name 是远程仓库的名字，用来给人看的</li>
<li>url 表示远程仓库的地址</li>
<li>releases 对应发行版本，snapshots 对应快照版本<ul>
<li>enabled 表示是否对发行版本/快照版本进行下载<ul>
<li>根据上面的配置：从远程仓库下载发行版本，但是不会下载快照版本</li>
</ul>
</li>
<li>updatePolicy 配置从远程仓库检查更新的频率<ul>
<li>daily 每天检查一次</li>
<li>never 从不</li>
<li>always 每次构建时更新</li>
<li>interval: X 每个 X 分钟检查更新一次（X 为任意整数）</li>
</ul>
</li>
<li>checksumPolicy 配置 Maven 检查校验和文件的策略<ul>
<li>默认值 warn 校验失败输出警告信息</li>
<li>fail 校验失败就让构建失败</li>
<li>ignore 完全忽略校验和错误</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="远程仓库的认证"><a href="#远程仓库的认证" class="headerlink" title="远程仓库的认证"></a>远程仓库的认证</h1><p><a href="https://maven.apache.org/guides/mini/guide-encryption.html" target="_blank" rel="noopener">参考文档</a></p>
<p>修改 settings.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-proj<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>repo-user<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>repo-pwd<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>远程仓库是在 pom.xml 中配置的，而认证是在 settings.xml 中配置的。</p>
<p>这么做也是很好理解的，如果账号密码写在 Maven 项目中，那么这个项目发给别人的时候就可能造成账号的泄漏，所以写在本地的 settings.xml 是相对安全的。</p>
<p>另外需要注意，这里的 <code>id</code> 和 pom.xml 中配置的远程仓库的 <code>id</code> 需要对应起来。</p>
<h1 id="部署至远程仓库"><a href="#部署至远程仓库" class="headerlink" title="部署至远程仓库"></a>部署至远程仓库</h1><p><a href="https://maven.apache.org/pom.html#Distribution_Management" target="_blank" rel="noopener">参考文档</a></p>
<p>在 settings.xml 中添加：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>corp1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Corporate Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://repo/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>propSnap<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Propellors Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>sftp://propellers.net/maven<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>distributionManagement</code> 包括两个子元素： <code>repository</code>、<code>snapshotRepository</code>，分别对应发布版本的仓库和快照版本的仓库。</p>
<p><strong>上面的配置是在 settings.xml 中的，当执行 <code>mvn clean deploy</code> 时，会判断当前项目是发布版本还是快照版本，部署到对应的远程仓库中。</strong></p>
<h1 id="快照版本"><a href="#快照版本" class="headerlink" title="快照版本"></a>快照版本</h1><p>一个人写项目的时候体现不出快照版本的好处，当两个人合作的时候就体现出来了。</p>
<p>小明开发项目 A，小红开发项目 B。项目 B 依赖于项目 A，并且项目 A 正在开发。</p>
<p>怎么保证小红时刻可以获取到最新的项目 A 呢？</p>
<ul>
<li>每次下载源码进行编译。这显然不合理，不仅浪费时间，而且编译出错也不好解决。</li>
<li>项目 A 部署时修改版本号。这可以，但是有些麻烦，每次上传需要修改版本号，下载也需要修改版本号。</li>
<li>使用快照。上传和下载时都使用： x.y-SNAPSHOT。这样做的神奇之处在于，上传到远程仓库时，名字不是 x.y-SNAPSHOT 而是 x.y-时间戳。另一方面，需要下载最新版本的项目 A 时，Maven 会检查远程仓库是否有更新，如果有就下载。<ul>
<li>什么时候会下载最新版本的项目 A 呢？<ul>
<li>根据上面提到的 updatePolicy，默认每天更新一次</li>
<li>或者使用 <code>mvn clean install-U</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="解析依赖的机制"><a href="#解析依赖的机制" class="headerlink" title="解析依赖的机制"></a>解析依赖的机制</h1><p>当我们在 pom.xml 中添加依赖的时候，Maven 是如何判断从哪里得到这个依赖的呢？</p>
<ul>
<li>如果依赖的范围是 system，直接从本地文件系统解析该文件，找到就结束</li>
<li>根据依赖计算仓库路径，尝试在本地仓库查找该文件，找到就结束</li>
<li>上面两种方式都找不到时，如果依赖的版本号是确定的，比如 1.2、2.1-beta-1，将遍历所有远程仓库，发现后就下载，然后结束</li>
<li>如果版本号指定的是 RELEASE 或者 LATEST 或者 SNAPSHOT，Maven 会根据更新策略，访问远程仓库的元数据：<code>groupId/artifactId/maven-metadata.xml</code>，将其与本地仓库的元数据合并后，计算出真实的版本号，然后在从本地仓库或者远程仓库中查找。</li>
</ul>
<p>注意点：</p>
<ul>
<li>快照版本在远程仓库中带时间戳，但是从远程仓库下载之后时间戳又变成了 SNAPSHOT。</li>
<li>RELEASE 表示最新的发布版本，LATEST 表示最新版本（包括快照版本）</li>
<li>不要使用 RELEASE 和  LATEST </li>
</ul>
<h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><p>修改 settings.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>UK<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>UK Central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>mirrorOf</code> 表示这个是哪个仓库的镜像，这里的 <code>central</code> 指的就是中央仓库。</p>
<p>因为私服可以访问外部仓库，所以直接指定私服作为镜像也是可以的，反正找不到的时候它会向外部寻找。</p>
<p><code>mirrorOf</code> 中间可以是：</p>
<ul>
<li><code>*</code> 匹配所有远程仓库</li>
<li><code>external: *</code> 匹配所有不在本机上的远程仓库</li>
<li><code>repo1, repo2</code> 匹配仓库 repo1 和 repo2</li>
<li><code>*, !repo1</code> 匹配所有远程仓库，repo1 除外</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>仓库用来存放 Maven 生成的文件，且仓库的目录有自己的规范。</li>
<li>仓库可以大致分为本地仓库和远程仓库。</li>
<li>快照是在开发时使用的。</li>
<li>使用镜像可以加快 Maven 的下载速度。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Maven </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 相关目录]]></title>
      <url>/2019/02/articles/Maven%E7%AC%94%E8%AE%B0%20-%20Maven%20%E7%9B%B8%E5%85%B3%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>对 Maven 的理解及其相关目录。</p>
<a id="more"></a>
<h1 id="Maven-是什么"><a href="#Maven-是什么" class="headerlink" title="Maven 是什么"></a>Maven 是什么</h1><p>Maven 是一个构建工具、依赖管理工具。</p>
<h1 id="什么是构建"><a href="#什么是构建" class="headerlink" title="什么是构建"></a>什么是构建</h1><p>从源代码开始，编译 -&gt; 测试 -&gt; 打包 -&gt; 部署 -&gt; 运行。</p>
<h1 id="什么是依赖管理"><a href="#什么是依赖管理" class="headerlink" title="什么是依赖管理"></a>什么是依赖管理</h1><p>Maven 使用坐标定位一个依赖包，而且每一个依赖都指定了自己的依赖，不需要我们手动的下载、导入 jar 包，也不需要我们人工的解决包的依赖、以及兼容问题。</p>
<h1 id="M2-HOME"><a href="#M2-HOME" class="headerlink" title="M2_HOME"></a>M2_HOME</h1><p>在电脑上 M2_HOME 环境变量指向的是 Maven 的安装目录。</p>
<p>下面介绍该目录下的几个目录：</p>
<h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>该目录包含了 mvn 运行的脚本。</p>
<p>当我们在命令行执行 mvn 时，运行的就是这里的 mvn 文件。</p>
<h2 id="boot"><a href="#boot" class="headerlink" title="boot"></a>boot</h2><p>该目录包含一个类加载器框架。</p>
<p>对于一般的 Maven 用户不必关心它。</p>
<h2 id="conf"><a href="#conf" class="headerlink" title="conf"></a>conf</h2><p>该目录包含一个非常重要的 settings.xml 文件。</p>
<p>直接修改该文件将会在全局范围内改变 Maven 的设置，所以推荐将该文件复制到 <code>~/.m2/</code> 目录中再修改，这样做只对一个用户生效。</p>
<h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><p>该目录包含 Maven 运行时需要的 Jar 包，可以说这个目录才是真正的 Maven。</p>
<h1 id="m2"><a href="#m2" class="headerlink" title="~./m2"></a>~./m2</h1><p>默认情况下，<code>~/.m2</code> 目录下只有一个  repository 目录，这个 repository 包含通过 Maven 下载的 Jar 包。</p>
<p>另外，推荐将 <code>M2_HOME/conf/settings.xml</code> 复制到这个目录下。</p>
]]></content>
      
        <categories>
            
            <category> Maven </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Maven 项目]]></title>
      <url>/2019/02/articles/Maven%E7%AC%94%E8%AE%B0%20-%20%E5%88%9B%E5%BB%BA%20Maven%20%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>温故知新。</p>
<a id="more"></a>
<h1 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom 文件"></a>pom 文件</h1><p>该文件的作用：</p>
<ul>
<li>在茫茫 Java 类库中声明自己的身份</li>
<li>并且声明需要依赖的类库</li>
<li>说明项目将怎么样进行构建（比如说明入口文件）</li>
<li>…</li>
</ul>
<h1 id="简单的-pom-xml-示例"><a href="#简单的-pom-xml-示例" class="headerlink" title="简单的 pom.xml 示例"></a>简单的 pom.xml 示例</h1><ul>
<li>xml 版本、编码方式声明</li>
<li>project 是根元素</li>
<li>对于 Maven2 和 Maven3 来说 <code>modelVersion</code> 只能是 4.0.0</li>
<li>groupId 域名倒序加项目名</li>
<li>artifactId 模块名</li>
<li>version 版本</li>
<li>name 项目的描述</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.diaolizhi.second<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myHelloWorld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>myHelloWorld<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Maven-项目规定"><a href="#Maven-项目规定" class="headerlink" title="Maven 项目规定"></a>Maven 项目规定</h1><ul>
<li>项目代码放在 <code>/src/main/java/com.xxx.groupId.artifactId</code> 目录下 </li>
<li>测试代码放在 <code>/src/test/java/com.xxx.groupId.artifactId</code> 目录下</li>
</ul>
<h1 id="Maven-输出"><a href="#Maven-输出" class="headerlink" title="Maven 输出"></a>Maven 输出</h1><ul>
<li>输出内容在 <code>/target/</code> 目录下，包括生成的 jar 包</li>
<li><code>classes</code> 目录下是编译生成的 class 文件</li>
</ul>
<h1 id="指定入口类"><a href="#指定入口类" class="headerlink" title="指定入口类"></a>指定入口类</h1><ul>
<li>借助 maven-shade-plugin</li>
</ul>
<h1 id="mvn-clean"><a href="#mvn-clean" class="headerlink" title="mvn clean"></a>mvn clean</h1><ul>
<li>删除 target 目录</li>
</ul>
<h1 id="mvn-compile"><a href="#mvn-compile" class="headerlink" title="mvn compile"></a>mvn compile</h1><ul>
<li>编译项目主代码</li>
</ul>
<h1 id="mvn-test"><a href="#mvn-test" class="headerlink" title="mvn test"></a>mvn test</h1><ul>
<li>执行测试用例</li>
</ul>
<h1 id="mvn-package"><a href="#mvn-package" class="headerlink" title="mvn package"></a>mvn package</h1><ul>
<li>打包</li>
</ul>
<h1 id="mvn-install"><a href="#mvn-install" class="headerlink" title="mvn install"></a>mvn install</h1><ul>
<li>打包并添加到本地仓库</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Maven </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell 脚本自动部署 Spring Boot 项目]]></title>
      <url>/2019/01/articles/Shell%20%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%20Spring%20Boot%20%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>同步代码 -&gt; 打包 -&gt; 终止进程 -&gt; 运行项目<br><a id="more"></a></p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>腾讯云 Linux 主机自带 Git，无需再安装。</p>
<p>但是需要执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p>并将 ~/.ssh/id_rsa.pub 里的内容复制到 GitHub，这样才可以 git clone 私有项目。</p>
<h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>maven 用来打包 Spring Boot 项目，下载方式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf apache-xxxx</span><br></pre></td></tr></table></figure>
<p>添加到 $PATH 变量：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=&quot;$PATH&quot;:/usr/xxxxx</span><br></pre></td></tr></table></figure>
<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>maven 需要 jdk 而不是 jre，否则执行 maven install 时会报错，如果装了 jdk 可以跳过这一步。</p>
<p>安装命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure>
<p>安装之后使用 find 命令找到安装目录，并将其 bin 目录添加到 $PATH 变量中。</p>
<h1 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h1><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><ul>
<li>如何终止正在运行的进程</li>
<li>如何获取到最新生成的 jar 包的文件名</li>
</ul>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul>
<li>定义 PRONAME （代表的是项目名）变量，然后通过 pkill 命令根据项目名终止进程。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill -f "java -jar $PRONAME"</span><br></pre></td></tr></table></figure>
<ul>
<li>通过 ls 和 tail 命令找到最新生成的 jar 包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -tr $PRONAME*.jar | tail -n 1</span><br></pre></td></tr></table></figure>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>需要指定项目的<strong>绝对路径</strong>，因为不确定在哪个目录下执行此脚本，所以就可能导致无法切换到正确的目录，那就会出错。</p>
<p>另外，如果：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROPATH='~/xxxxx/xxxxx/xxxx.sh'</span><br></pre></td></tr></table></figure>
<p>也是无法正确的切换目录的，要把 ~ 替换成 /root</p>
<h2 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 项目名</span></span><br><span class="line">PRONAME="demo"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 项目所在路径</span></span><br><span class="line">PROPATH='/root/xxxxx/xxxxx/xxxx.sh'</span><br><span class="line"></span><br><span class="line">nohup git pull origin master &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">cd $PROPATH</span><br><span class="line"></span><br><span class="line">nohup mvn install -DskipTests &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">cd target</span><br><span class="line"></span><br><span class="line">FILENAME=`ls -tr $PRONAME*.jar | tail -n 1`</span><br><span class="line"></span><br><span class="line">pkill -f "java -jar $PRONAME"</span><br><span class="line"></span><br><span class="line">nohup java -jar $FILENAME &gt;/dev/null 2&gt;log.txt &amp;</span><br></pre></td></tr></table></figure>
<h1 id="Java-执行-Shell-脚本"><a href="#Java-执行-Shell-脚本" class="headerlink" title="Java 执行 Shell 脚本"></a>Java 执行 Shell 脚本</h1><p>既然可以通过 Java 执行 Shell 脚本，那么就可以创建一个 Get 接口，当它被调用时就执行上面这个脚本。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReloadSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reloadSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProcessBuilder processBuilder = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line"></span><br><span class="line">        processBuilder.command(<span class="string">"bash"</span>, <span class="string">"-c"</span>, <span class="string">"bash ~/xxxxx/xxxxx/xxxx.sh"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Process process = processBuilder.start();</span><br><span class="line"></span><br><span class="line">            StringBuilder output = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                output.append(line + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> exitVal = process.waitFor();</span><br><span class="line">            <span class="keyword">if</span> (exitVal == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(output);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>本地开发，提交到 GitHub</li>
<li>访问指定接口，执行 Shell 脚本自动完成下面的工作：<ol>
<li>使用 git pull 同步代码</li>
<li>使用 mvn install 打包</li>
<li>终止进程</li>
<li>使用 java -jar 运行项目</li>
</ol>
</li>
</ol>
<p>有更好的部署工具，但是现在已经可以满足我的需求了，所以没有动力去学习了。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub 开放私有仓库]]></title>
      <url>/2019/01/articles/GitHub%20%E5%BC%80%E6%94%BE%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>喜大普奔，纪念一下。</p>
<a id="more"></a>
<p>是时候把自己的垃圾代码设为私有了。</p>
<p>水一张图片。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/diaolizhi.jpeg" alt></p>
]]></content>
      
        <categories>
            
            <category> GitHub </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 2.x 免费升级 HTTPS]]></title>
      <url>/2019/01/articles/Spring%20Boot%20%E5%85%8D%E8%B4%B9%E5%8D%87%E7%BA%A7%20HTTPS/</url>
      <content type="html"><![CDATA[<p>有个🔒的感觉就是 8 一样嗷。</p>
<a id="more"></a>
<p>本文只说操作步骤，别的不讲，因为不会。</p>
<h1 id="必要的前提"><a href="#必要的前提" class="headerlink" title="必要的前提"></a>必要的前提</h1><ul>
<li>拥有一个域名</li>
<li>拥有一个 Linux 服务器</li>
</ul>
<h1 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h1><p>我是通过 <a href="https://www.youtube.com/watch?v=fL6A9I1-U6M" target="_blank" rel="noopener">Youtube 视频</a> 了解到如何快速免费的申请一个 HTTPS 证书的，推荐大家可以看一哈。</p>
<p>申请证书的网站是：<a href="https://freessl.cn/" target="_blank" rel="noopener">FreeSSL</a></p>
<h2 id="进入首页"><a href="#进入首页" class="headerlink" title="进入首页"></a>进入首页</h2><p>需要注意的是：<strong>证书的类型</strong>以及<strong>证书的有效期</strong>，根据个人需要选择。</p>
<p>我选择的是第二个，因为我需要用到多个二级域名。</p>
<p>如果只有一个网站，建议选择第一个，因为有效期比较长。</p>
<p><strong>如果证书到期了，就需要到这个网站再申请一次。</strong></p>
<p>接下来输入自己的域名，我输入的是：*.ddllzz.xyz</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-01-02_15-59-34.png" alt></p>
<h2 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h2><p>直接输入邮箱然后点击创建即可。</p>
<p><strong>但是为了安全起见，推荐自己生成 CSR，工具自己去网上搜。</strong></p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-01-02_16-18-43.png" alt> </p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>完成上面一步之后可以看到：</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-01-02_16-27-12.png" alt></p>
<p>此时需要根据上面的提示为自己的域名添加 DNS 解析：</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-01-02_16-29-44.png" alt></p>
<p>等待一会点击上面图中的“配置完成，检测一下”。</p>
<p>看到下图说明 OK 了。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-01-02_16-31-19.png" alt></p>
<p>再然后点击上图的“点击验证”，得到证书信息：</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-01-02_17-44-33.png" alt></p>
<p>点击下载证书，记得保管好。</p>
<h1 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h1><p>刚才下载了证书（下载的是一个压缩包），压缩包里的文件是：full_chain.pem 和 private.key，而我们在 Spring Boot 中需要的是 pkcs12 类型的文件，所以需要用 openssl 进行转换。</p>
<p><strong>推荐在 Linux 下完成转换，因为我在 Windows 下生成的 private.key 一直是 0kb，同样的操作在 Linux 下就没问题。</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -in full_chain.pem -inkey private.key -out keystore.p12（这个是生成的文件名） -name tomacat -CAfile full_chain.pem -caname root</span><br></pre></td></tr></table></figure>
<p>现在得到了 keystore.p12，就可以在 Spring Boot 项目中使用它了。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>将刚刚得到的 kyestore.p12 文件复制到 Spring Boot 项目中的 resources 目录下，然后在 application.properties 文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.port=8443</span><br><span class="line">server.ssl.trust-store-type=PKCS12</span><br><span class="line">server.ssl.key-store=classpath:kyestore.p12</span><br><span class="line">server.ssl.key-store-password=这里是进行转换时输入的密码</span><br><span class="line">server.ssl.key-alias=tomcat</span><br></pre></td></tr></table></figure>
<h1 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h1><p>在本地测试时，如果通过 <a href="https://127.0.0.1:8443" target="_blank" rel="noopener">https://127.0.0.1:8443</a> 访问，会提示不安全：</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-01-02_17-52-02.png" alt> </p>
<p>因为刚才的证书是属于 ddllzz.xyz 这个域名的，但是现在并非通过这个域名访问，所以会提示不安全。</p>
<p>现在修改本机 hosts 文件，添加一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 ddllzz.xyz</span><br></pre></td></tr></table></figure>
<p>再次通过 <a href="https://ddllzz.xyz:8443" target="_blank" rel="noopener">https://ddllzz.xyz:8443</a> 访问就行了:</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2019-01-02_17-55-45.png" alt></p>
<h1 id="80-端口重定向到-HTTPS"><a href="#80-端口重定向到-HTTPS" class="headerlink" title="80 端口重定向到 HTTPS"></a>80 端口重定向到 HTTPS</h1><p>在 Spring Boot 中使用下面这段代码，就可以实现：</p>
<blockquote>
<p>当访问 ddllzz.xyz 时跳转到 <a href="https://ddllzz.xyz:8443。" target="_blank" rel="noopener">https://ddllzz.xyz:8443。</a></p>
</blockquote>
<p>它存在的意义是：别人可能并不知道你 HTTPS 设置的端口，如果没有这个重定向就无法通过 HTTPS 的方式访问了。</p>
<p>当然了，设置其他端口重定向到 HTTPS 也是可以的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletWebServerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TomcatServletWebServerFactory tomcat = <span class="keyword">new</span> TomcatServletWebServerFactory() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">            securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">            SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">            collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">            securityConstraint.addCollection(collection);</span><br><span class="line">            context.addConstraint(securityConstraint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    tomcat.addAdditionalTomcatConnectors(redirectConnector());</span><br><span class="line">    <span class="keyword">return</span> tomcat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Connector <span class="title">redirectConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(</span><br><span class="line">        TomcatServletWebServerFactory.DEFAULT_PROTOCOL);</span><br><span class="line">    connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">    connector.setPort(<span class="number">80</span>);</span><br><span class="line">    connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">    connector.setRedirectPort(<span class="number">8443</span>);</span><br><span class="line">    <span class="keyword">return</span> connector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://juejin.im/post/5b44b4fef265da0f767530f7" target="_blank" rel="noopener">一文教你将 SpringBoot 网站升级为 HTTPS</a></p>
<p><a href="https://www.heydari.be/spring-boot-application-secured-by-a-lets-encrypt-certificate/" target="_blank" rel="noopener">Spring Boot Application Secured by Let’s Encrypt Certificate</a></p>
<p><a href="openssl pkcs12 -export -in crt1 -inkey private.key -out keystore.p12 -name tomcat -CAfile CAcrt -caname root">Spring Boot Secured By Let’s Encrypt</a></p>
<p><a href="https://github.com/spring-projects/spring-boot/issues/9836" target="_blank" rel="noopener">redirect http to https in Spring boot 2.0.0 M2</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>终于写完了，写了好几个小时。</p>
<p>比上午第一次弄还要久，不过总算是搞定了，下次再弄应该就不会那么费劲了。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[通过表单上传 Blob 对象]]></title>
      <url>/2018/12/articles/%E9%80%9A%E8%BF%87%E8%A1%A8%E5%8D%95%E4%B8%8A%E4%BC%A0%20Blob%20%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>获取到 Blob 对象之后，如何通过表单提交？</p>
<a id="more"></a>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>在 Javascript 中获取到了 Blob 对象，希望将 Blob 对象传递给后端。</p>
<h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><p>在 HTML 中有一个 form 表单，form 中有一个可以上传文件的 input 输入框。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"recordInput"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是这个输入框只能点击 -&gt; 选择文件，那么如何将 Blob 与输入框联系起来呢？</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>可以直接看这个回答：</p>
<p><a href="https://stackoverflow.com/questions/50157450/send-blob-object-with-post-form" target="_blank" rel="noopener">Send Blob object with POST Form</a></p>
<p>首先需要这个方法，它将 File 对象转换成一个 FileList 对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFileList</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    a = [].slice.call(<span class="built_in">Array</span>.isArray(a) ? a : <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c, b = c = a.length, d = !<span class="number">0</span>; b-- &amp;&amp; d;) d = a[b] <span class="keyword">instanceof</span> File;</span><br><span class="line">    <span class="keyword">if</span> (!d) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'expected argument to FileList is File or array of File objects'</span>);</span><br><span class="line">    <span class="keyword">for</span> (b = (<span class="keyword">new</span> ClipboardEvent(<span class="string">''</span>)).clipboardData || <span class="keyword">new</span> DataTransfer; c--;) b.items.add(a[c]);</span><br><span class="line">    <span class="keyword">return</span> b.files;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>之所以要转换，是因为 input 元素中有一个属性：files，它的类型就是 FileList，必须要转换才可以进行赋值。<em>（注意：并没有 file 这个属性。）</em></p>
<p>第二步，设置 input 的 files 属性（使用 jQuery 查找元素）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> recInput = $(<span class="string">"#recordInput"</span>)[<span class="number">0</span>];</span><br><span class="line">recInput.files = createFileList(<span class="keyword">new</span> File([blob], <span class="string">"my-record.mp3"</span>, &#123;<span class="attr">type</span>: <span class="string">"audio/mp3"</span>&#125;));</span><br></pre></td></tr></table></figure>
<p>这样一来，不用点击选择文件，input 框就已经选中文件了。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-12-17_22-25-20.png" alt></p>
<p>后端简略代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String path = <span class="string">"D:\\del\\"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">upload</span><span class="params">(@RequestParam(name = <span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">        System.out.println(file);</span><br><span class="line"></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(path + <span class="string">"aa.mp3"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(file1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> file.getOriginalFilename();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>Blob、File、FileList  各自是一种类型，而且 File 是 Blob 的子类。</li>
<li>查找元素时即使通过 ID 查找，也要使用下标 [0] 选择元素</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos nginx 配置 https]]></title>
      <url>/2018/12/articles/Centos%20nginx%20%E9%85%8D%E7%BD%AE%20https/</url>
      <content type="html"><![CDATA[<p>在腾讯云主机上给 nginx 配置 https。</p>
<a id="more"></a>
<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul>
<li>安装了 nginx（在<a href="http://nginx.org/download/" target="_blank" rel="noopener">这里</a>下载 nginx-1.9.9.tar.gz），解压，通过 make 命令安装。</li>
<li>准备好证书，这里是腾讯云备案送一年的证书。</li>
<li>为了上传文件方便，下载<a href="https://winscp.net/eng/download.php" target="_blank" rel="noopener">winscp</a>。</li>
</ul>
<h1 id="修改-nginx-配置"><a href="#修改-nginx-配置" class="headerlink" title="修改 nginx 配置"></a>修改 nginx 配置</h1><p>进入到 /usr/local/nginx/conf 目录下，修改 nginx.conf，添加一个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name diaolizhi.com; #填写绑定证书的域名</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate 1_diaolizhi.com_bundle.crt;</span><br><span class="line">        ssl_certificate_key 2_diaolizhi.com.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/record; #站点目录</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：站点目录的 html 前面没有斜杠。</strong></p>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [emerg] the "ssl" parameter requires ngx_http_ssl_module...</span><br></pre></td></tr></table></figure>
<p>提示没有 ssl 这个模块，参考博客：<a href="https://www.cnblogs.com/ghjbk/p/6744131.html" target="_blank" rel="noopener">博客园</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在 Linux 安装 nginx 之后，可以配置不同的端口，每个端口可以对应 html 目录下的不同的文件夹。</p>
<p>只要添加一个 server，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8000;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location /&#123;</span><br><span class="line">            root   html/record;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体用到再百度吧。</p>
]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 集成 Shiro 实现权限控制]]></title>
      <url>/2018/12/articles/Spring%20Boot%20%E9%9B%86%E6%88%90%20Shiro%20%E5%AE%9E%E7%8E%B0%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>拥有指定的权限才可以进行相应的操作。</p>
<a id="more"></a>
<p>有一些操作是所有人都可以执行的，比如：访问首页、访问登录界面。而有一些就需要管理员权限，比如：删除用户。</p>
<p>为了实现这种功能，Shiro 提供了<strong>角色</strong>和<strong>权限</strong>两个概念。</p>
<p>推荐一篇博客：<a href="https://mrbird.cc/Spring-Boot-Shiro%20Authorization.html" target="_blank" rel="noopener">Spring Boot Shiro权限控制</a></p>
<p>我的理解是：一个用户对应一个或多个角色，一个角色又对应一个或多个权限。这样一来，用户就对应了多个明确的角色或者权限。然后设置接口所需要的角色或权限，实现权限控制。</p>
<p>在 Web 应用中，角色、权限都存放在数据库中，当然了还有用户表，以及<em>用户-角色表</em>、<em>角色-权限表</em>，总共有五个数据表。</p>
<p>当 Shiro 需要验证权限的时候，就需要从数据库中查找数据。</p>
<p>那么需要查找的是什么呢？</p>
<p>先看看 Shiro 需要的是什么。Realm 除了认证功能之外，还有授权的功能，对应的就是 doGetAuthorizationInfo 方法。在这个方法中返回的是一个 AuthorizationInfo 对象，而这个对象有两个方法：setRoles 和 setStringPermissions。</p>
<p>也就是说，Shiro 需要用户所对应的多个角色，以及多个权限。那么在数据访问层要做的就是查找一个用户所对应的角色和权限。</p>
<p>大概了解授权的流程之后，下面就具体说该怎么做。</p>
<h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><p>建议阅读上面推荐的文章，讲得比较详细。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE <span class="comment">/*!32312 IF NOT EXISTS*/</span>`shiro-login` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span><br><span class="line"></span><br><span class="line">USE `shiro-login`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_permission` */</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `t_permission`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_permission` (</span><br><span class="line">  `id` <span class="keyword">int</span>(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `url` varchar(<span class="number">50</span>) NOT NULL,</span><br><span class="line">  `name` varchar(<span class="number">100</span>) NOT NULL,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="number">4</span> DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_role` */</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `t_role`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_role` (</span><br><span class="line">  `id` <span class="keyword">int</span>(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(<span class="number">20</span>) NOT NULL,</span><br><span class="line">  `memo` varchar(<span class="number">50</span>) NOT NULL,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="number">3</span> DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_role_permission` */</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `t_role_permission`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_role_permission` (</span><br><span class="line">  `rid` <span class="keyword">int</span>(<span class="number">11</span>) NOT NULL,</span><br><span class="line">  `pid` <span class="keyword">int</span>(<span class="number">11</span>) NOT NULL,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`rid`,`pid`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_user` */</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `t_user`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_user` (</span><br><span class="line">  `id` <span class="keyword">int</span>(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(<span class="number">20</span>) NOT NULL,</span><br><span class="line">  `password` varchar(<span class="number">100</span>) NOT NULL,</span><br><span class="line">  `salt` varchar(<span class="number">20</span>) NOT NULL,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span>,</span></span><br><span class="line"><span class="function">  UNIQUE KEY `username` <span class="params">(`username`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB AUTO_INCREMENT=<span class="number">10</span> DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_user_role` */</span></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `t_user_role`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_user_role` (</span><br><span class="line">  `uid` <span class="keyword">int</span>(<span class="number">11</span>) NOT NULL,</span><br><span class="line">  `rid` <span class="keyword">int</span>(<span class="number">11</span>) NOT NULL,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`uid`,`rid`)</span></span></span><br><span class="line"><span class="function">) ENGINE</span>=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>
<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>数据仅供参考，根据自己的设计插入数据。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="comment">/*!32312 IF NOT EXISTS*/</span><span class="string">`shiro-login`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`shiro-login`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `t_permission` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`t_permission`</span>(<span class="string">`id`</span>,<span class="string">`url`</span>,<span class="string">`name`</span>) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">'/user'</span>,<span class="string">'user:add'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'/user'</span>,<span class="string">'user:delete'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'/user'</span>,<span class="string">'user:see'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `t_role` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`t_role`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`memo`</span>) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">'admin'</span>,<span class="string">'超级管理员'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'test'</span>,<span class="string">'测试用户'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `t_role_permission` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`t_role_permission`</span>(<span class="string">`rid`</span>,<span class="string">`pid`</span>) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">1</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `t_user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`t_user`</span>(<span class="string">`id`</span>,<span class="string">`username`</span>,<span class="string">`password`</span>,<span class="string">`salt`</span>) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">'zs'</span>,<span class="string">'6f294b522deba0531722c92b4199c6b95d76b00e231ca2c765aae8c32fd36222'</span>,<span class="string">'zsreg'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'root'</span>,<span class="string">'6a9629cd8b8c68a86c800cdeae59f2b3185bb6ce1c0896a675e91a860c7702ee'</span>,<span class="string">'rootreg'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'admin'</span>,<span class="string">'dddf9fe0979a7db4fbf06a2366c5862e775fd702c56249decb372e876636b9ab'</span>,<span class="string">'adminreg'</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">'aaa'</span>,<span class="string">'02d66435c563cc9130876fc5d7c1496e6b451345741b46d1472de3d6c82a8afa'</span>,<span class="string">'aaareg'</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">'aaaa'</span>,<span class="string">'b344150010d7630f0422fdd9f491a450a8299831e28c78b2f5173ed5b1fd164e'</span>,<span class="string">'aaaareg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `t_user_role` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`t_user_role`</span>(<span class="string">`uid`</span>,<span class="string">`rid`</span>) <span class="keyword">values</span> </span><br><span class="line">(<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>使用 IDEA 自动生成即可。</p>
<h1 id="UserRoleMapper"><a href="#UserRoleMapper" class="headerlink" title="UserRoleMapper"></a>UserRoleMapper</h1><p>根据用户名查找角色集：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRoleMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT t_role.name FROM t_role, t_user, t_user_role WHERE t_user.`id` = t_user_role.`uid` AND t_user.`username` = #&#123;username&#125; AND t_user_role.`rid` = t_role.`id`"</span>)</span><br><span class="line">    <span class="function">List&lt;TRole&gt; <span class="title">findRolesByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="UserPermissionMapper"><a href="#UserPermissionMapper" class="headerlink" title="UserPermissionMapper"></a>UserPermissionMapper</h1><p>根据用户名查找权限集：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserPermissionMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT p.* FROM t_user u LEFT JOIN t_user_role ur ON u.`id` = ur.`uid` LEFT JOIN t_role r ON ur.`rid` = r.`id` LEFT JOIN t_role_permission rp ON r.`id` = rp.`rid` LEFT JOIN t_permission p ON rp.`pid` = p.`id` WHERE u.`username` = #&#123;username&#125; "</span>)</span><br><span class="line">    <span class="function">List&lt;TPermission&gt; <span class="title">findPermissonsByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Realm-添加方法"><a href="#Realm-添加方法" class="headerlink" title="Realm 添加方法"></a>Realm 添加方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserRoleMapper userRoleMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserPermissionMapper userPermissionMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String username = (String) SecurityUtils.getSubject().getPrincipal();</span><br><span class="line"></span><br><span class="line">    List&lt;TRole&gt; roles = userRoleMapper.findRolesByUsername(username);</span><br><span class="line"></span><br><span class="line">    SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">    Set&lt;String&gt; roleSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (TRole t : roles) &#123;</span><br><span class="line">        roleSet.add(t.getName());</span><br><span class="line">        System.out.println(t.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    info.setRoles(roleSet);</span><br><span class="line"></span><br><span class="line">    List&lt;TPermission&gt; ps = userPermissionMapper.findPermissonsByUsername(username);</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; pSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (TPermission p : ps) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//            如果在 mapper 没有查到任何数据，ps 也不为 null，但是 ps.get(0) 的值是 null</span></span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pSet.add(p.getName());</span><br><span class="line">            System.out.println(p.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    info.setStringPermissions(pSet);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="添加权限控制"><a href="#添加权限控制" class="headerlink" title="添加权限控制"></a>添加权限控制</h1><h2 id="方法一：配置文件中"><a href="#方法一：配置文件中" class="headerlink" title="方法一：配置文件中"></a>方法一：配置文件中</h2><p>在 ShiroConfig 类的 shiroFilterChainDefinition 方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultShiroFilterChainDefinition chainDefinition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        authc 是必须通过认证，而不是“记住我”</span></span><br><span class="line">    chainDefinition.addPathDefinition(<span class="string">"/admin/**"</span>, <span class="string">"roles[admin]"</span>);</span><br><span class="line"></span><br><span class="line">    chainDefinition.addPathDefinition(<span class="string">"/me/**"</span>, <span class="string">"roles[admin]"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chainDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法二：使用注解"><a href="#方法二：使用注解" class="headerlink" title="方法二：使用注解"></a>方法二：使用注解</h2><p>在 Controller 的接口上配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示当前Subject已经通过login进行了身份验证；即Subject.isAuthenticated()返回true。</span></span><br><span class="line"><span class="meta">@RequiresAuthentication</span>  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 表示当前Subject已经身份验证或者通过记住我登录的。</span></span><br><span class="line"><span class="meta">@RequiresUser</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前Subject没有身份验证或通过记住我登录过，即是游客身份。</span></span><br><span class="line"><span class="meta">@RequiresGuest</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前Subject需要角色admin和user。  </span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(value=&#123;<span class="string">"admin"</span>, <span class="string">"user"</span>&#125;, logical= Logical.AND)  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前Subject需要权限user:a或user:b。</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span> (value=&#123;<span class="string">"user:a"</span>, <span class="string">"user:b"</span>&#125;, logical= Logical.OR)</span><br></pre></td></tr></table></figure>
<h1 id="定义授权失败跳转页面"><a href="#定义授权失败跳转页面" class="headerlink" title="定义授权失败跳转页面"></a>定义授权失败跳转页面</h1><p>在 properties 文件中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shiro.unauthorizedUrl=/error123</span><br><span class="line">shiro.loginUrl=/toLogin</span><br></pre></td></tr></table></figure>
<h1 id="捕获全局异常"><a href="#捕获全局异常" class="headerlink" title="捕获全局异常"></a>捕获全局异常</h1><h2 id="两种情况"><a href="#两种情况" class="headerlink" title="两种情况"></a>两种情况</h2><ul>
<li>一个接口使用注解指定了所需要的权限，当<strong>没有登录</strong>或者<strong>没有权限</strong>访问这个接口时，它不会跳转到失败页面，也不会跳转到登录页面，而是抛出一个异常。</li>
<li>在配置文件中指定一个接口所需的权限，那么它就会跳转到错误页面或者登录界面。</li>
</ul>
<p>为了解决第一种情况，就需要捕获异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroExceptionHandler</span> </span>&#123; </span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = AuthorizationException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleAuthorizationException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"没有权限访问"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>创建角色和权限</li>
<li>查询角色和权限</li>
<li>重写 doGetAuthorizationInfo</li>
<li>给接口配置权限</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 集成 Shiro 实现 Remember me]]></title>
      <url>/2018/12/articles/Spring%20Boot%20%E9%9B%86%E6%88%90%20Shiro%20%E5%AE%9E%E7%8E%B0%E8%AE%B0%E4%BD%8F%E6%88%91/</url>
      <content type="html"><![CDATA[<p>当重启浏览器之后，不用重新登录。</p>
<a id="more"></a>
<h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><p>在 ShiroConfig 类中添加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        rememberme cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位），通过以下代码可以获取</span></span><br><span class="line">    <span class="comment">//        try &#123;</span></span><br><span class="line">    <span class="comment">//            KeyGenerator keygen = KeyGenerator.getInstance("AES");</span></span><br><span class="line">    <span class="comment">//            SecretKey deskey = keygen.generateKey();</span></span><br><span class="line">    <span class="comment">//            System.out.println(Base64.encodeToString(deskey.getEncoded()));</span></span><br><span class="line">    <span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line">    <span class="comment">//            e.printStackTrace();</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    cookieRememberMeManager.setCipherKey(Base64.decode(<span class="string">"WuB+y2gcHRnY2Lg9+Aqmqg=="</span>));</span><br><span class="line">    <span class="keyword">return</span> cookieRememberMeManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h1><p>登录接口添加一个参数用来接收<em>是否记住我</em>的参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(@RequestParam(name = <span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                    @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">                    @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"rememberMe"</span>)</span> <span class="keyword">boolean</span> rememberMe) </span>&#123;</span><br><span class="line"></span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password, rememberMe);</span><br><span class="line"></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (subject.isAuthenticated()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"已经登录直接返回"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (subject.isRemembered()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"已经被记住，直接返回"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//            token.setRememberMe(false);</span></span><br><span class="line">        subject.login(token);</span><br><span class="line"></span><br><span class="line">        subject.getSession().setTimeout(<span class="number">180000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"登录成功"</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.getMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"登录失败"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>2019年1月9日 22:18:23 更新</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 集成 Shiro 持久化 Session]]></title>
      <url>/2018/12/articles/Spring%20Boot%20%E6%95%B4%E5%90%88%20Shiro%20%E6%8C%81%E4%B9%85%E5%8C%96%20Session/</url>
      <content type="html"><![CDATA[<p>避免每次重启服务器，用户都要重新登录。</p>
<a id="more"></a>
<h1 id="自定义-SessionDAO"><a href="#自定义-SessionDAO" class="headerlink" title="自定义 SessionDAO"></a>自定义 SessionDAO</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySessionDAO</span> <span class="keyword">extends</span> <span class="title">EnterpriseCacheSessionDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SessionMapper sessionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 创建 Session 并存储 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [session] </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: java.io.Serializable </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: diaolizhi</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2018/12/8 </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Serializable <span class="title">doCreate</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Serializable sessionId = generateSessionId(session);</span><br><span class="line">        assignSessionId(session, sessionId);</span><br><span class="line">        sessionMapper.addSession(sessionId, SerializableUtils.serialize(session));</span><br><span class="line">        <span class="keyword">return</span> session.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 读取 Session </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [sessionId] </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: org.apache.shiro.session.Session </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: diaolizhi</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2018/12/8 </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Session <span class="title">doReadSession</span><span class="params">(Serializable sessionId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MySession mySession = sessionMapper.readSession(sessionId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mySession == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Session session = SerializableUtils.deserialize(mySession.getSession());</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 更新 Session，比如它的最后访问时间。Session 信息有变化时自动调用。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [session] </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: diaolizhi</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2018/12/8 </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doUpdate</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(session <span class="keyword">instanceof</span> ValidatingSession &amp;&amp; !((ValidatingSession)session).isValid()) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//如果会话过期/停止 没必要再更新了</span></span><br><span class="line">        &#125;</span><br><span class="line">        sessionMapper.updateSession(session.getId(), SerializableUtils.serialize(session));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 删除 Session。当调用 subject.logout() 时自动调用 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [session] </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>: void </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: diaolizhi</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 2018/12/8 </span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        sessionMapper.deleteSession(session.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="创建-Session-实体类"><a href="#创建-Session-实体类" class="headerlink" title="创建 Session 实体类"></a>创建 Session 实体类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String session;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSession</span><span class="params">(String session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="序列化工具类"><a href="#序列化工具类" class="headerlink" title="序列化工具类"></a>序列化工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializableUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">serialize</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">            oos.writeObject(session);</span><br><span class="line">            <span class="keyword">return</span> Base64.encodeToString(bos.toByteArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"serialize session error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">deserialize</span><span class="params">(String sessionStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(Base64.decode(sessionStr));</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">            <span class="keyword">return</span> (Session)ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"deserialize session error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阿里巴巴数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/shiro-login?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.username =用户名</span><br><span class="line">spring.datasource.password =密码</span><br><span class="line">#如果不使用默认的数据源（com.zaxxer.hikari.HikariDataSource）</span><br><span class="line">spring.datasource.type =com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure>
<h1 id="Session-Mapper"><a href="#Session-Mapper" class="headerlink" title="Session Mapper"></a>Session Mapper</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SessionMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO session (id, session) VALUES (#&#123;id&#125;, #&#123;session&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addSession</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Serializable id, @<span class="title">Param</span><span class="params">(<span class="string">"session"</span>)</span> String session)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM session WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">MySession <span class="title">readSession</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"UPDATE session SET session = #&#123;session&#125; WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateSession</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Serializable id, @<span class="title">Param</span><span class="params">(<span class="string">"session"</span>)</span> String session)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"DELETE FROM session WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteSession</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Shiro-添加配置"><a href="#Shiro-添加配置" class="headerlink" title="Shiro 添加配置"></a>Shiro 添加配置</h1><p>在 Shiro 配置类中添加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SessionDAO <span class="title">sessionDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MySessionDAO();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"sessionManager"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SessionManager <span class="title">defaultWebSessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时清除无效的session</span></span><br><span class="line">    sessionManager.setSessionValidationSchedulerEnabled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//删除无效的session</span></span><br><span class="line">    sessionManager.setDeleteInvalidSessions(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    sessionManager.setSessionDAO(sessionDAO());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sessionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`session`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`session`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`session`</span> <span class="built_in">varchar</span>(<span class="number">2000</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>给 Session 设置属性，然后重启应用，测试属性是否存在。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/setA"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">setA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    Session session = subject.getSession();</span><br><span class="line">    session.setAttribute(<span class="string">"label"</span>, <span class="string">"aa"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"设置成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getA"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SecurityUtils.getSubject().getSession().getAttribute(<span class="string">"label"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：Shiro 不会自动为浏览器创建 Session。</strong></p>
<p>只有调用<code>Session session = subject.getSession();</code>之后才会创建 Session。</p>
<p>如果 Session 已经存在，那么调用这句就不会再次创建，而是直接获取。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>核心就是自定义 SessionDAO，然后配置。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 集成 Shiro 实现简单的登录]]></title>
      <url>/2018/12/articles/Spring%20Boot%20%E9%9B%86%E6%88%90%20Shiro%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%99%BB%E5%BD%95%20/</url>
      <content type="html"><![CDATA[<p>如何上手 Shiro ？</p>
<a id="more"></a>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在 Spring Boot 2.x 中集成 Shiro 做一个登录功能大体上可以分为三步：</p>
<ol>
<li>配置 Shiro</li>
<li>自定义 Realm</li>
<li>创建登录接口</li>
</ol>
<h1 id="了解登录流程"><a href="#了解登录流程" class="headerlink" title="了解登录流程"></a>了解登录流程</h1><p>我刚开始只知道 Shiro 是一个安全框架，但是完全搞不懂怎么用它实现一个<strong>登录</strong>的功能，更别提集成到 Spring Boot 中了。</p>
<p>经过了几天的摸索，终于了解了<strong>登录</strong>的流程，不过对 Shiro 的工作原理并不深入，而且我没有实际的开发经验，所以这篇文章只能算作我自己的一篇笔记，它很可能对你没有帮助。</p>
<p>概述中提到，第一步是配置 Shiro，在说它之前，想象一下，用户要登录一个网站，最开始要做的是什么？肯定是输入用户名和密码吧。所以作为后端，对于登录这个功能最开始要做的就是接收用户名和密码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(@RequestParam String username, @RequestParam String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是 Spring Boot 中的一个接口，接收传过来的用户名和密码。（这里为了简单使用了 GetMapping）</p>
<p>收集了用户名和密码，然后就应该验证它们是否正确，具体怎么验证不用我们操心，因为我们只需要把 Shiro 需要的东西交给它，它会替我们判断这一次登录是成功还是失败。</p>
<p>那么 Shiro 需要什么东西呢？第一，它需要这一次输入的用户名和密码。第二，它需要这个用户名所对应的真正的密码。</p>
<p>就这两样东西，这么看来 Shiro 还真是挺容易用的，但是刚开始我真的是不知道从哪里下手。</p>
<h1 id="配置-Shiro"><a href="#配置-Shiro" class="headerlink" title="配置 Shiro"></a>配置 Shiro</h1><p><a href="https://shiro.apache.org/spring-boot.html" target="_blank" rel="noopener">将Apache Shiro集成到Spring-Boot应用程序中</a></p>
<p>谷歌搜索 Spring Boot Shiro 就会出现上面这个链接，根据里面的步骤可以将 Shiro 添加到 Spirng Boot 中。（不过这个教程没有具体说某个功能怎么实现，如果有的话，我这篇笔记就没有存在的意义了。）</p>
<p>下面说一下具体的步骤：</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0-RC2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置-Shiro-1"><a href="#配置-Shiro-1" class="headerlink" title="配置 Shiro"></a>配置 Shiro</h2><p>在自己的项目中添加一个 config 包，在其中创建一个 Shiro 的配置类，目的是提供一些 Shiro 需要的对象。</p>
<p>第一个 shiroFilterChainDefinition 方法中可以配置哪些接口需要登录才可以访问，哪些接口需要特定的权限才可以访问。因为暂时不考虑这么多，所以里面只返回一个对象。</p>
<p>第二个就很重要了，上面说了 Shiro 在登录的时候需要两样东西，一个是输入的用户名和密码，另一个是这个用户名所对应的真正的密码。前者接收用户的输入就行了，而后者就需要从数据库中获取了。在 Shiro 中，Realm 对象就扮演这么一个角色：在登录的时候它查数据库，并把查到的数据交给 Shiro，Shiro 会有特定的模块去验证这一次登录。至于登录结果：<strong>登录成功就没事，要是失败就抛出异常。</strong> 注意这里的 myShiroRealm 是 Realm 接口的实现类，接下来马上就说到它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterChainDefinition <span class="title">shiroFilterChainDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultShiroFilterChainDefinition chainDefinition = <span class="keyword">new</span> DefaultShiroFilterChainDefinition();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chainDefinition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Realm <span class="title">myShiroRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyShiroRealm realm = <span class="keyword">new</span> MyShiroRealm();</span><br><span class="line">        <span class="keyword">return</span> realm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义-Realm"><a href="#自定义-Realm" class="headerlink" title="自定义 Realm"></a>自定义 Realm</h1><p>第一眼看到这个类可能有些懵逼，这个方法是干嘛的？它的形参是个什么鬼？返回值又是啥玩意？这个类的父类又是谁？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title">SimpleAccountRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入 userService 用于查询用户数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String username = token.getPrincipal().toString();</span><br><span class="line"></span><br><span class="line">        String password = userService.getPasswordByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (password != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                    username,</span><br><span class="line"><span class="comment">//                    这里的密码是数据库中的密码</span></span><br><span class="line">                    password,</span><br><span class="line"><span class="comment">//                    返回Realm名</span></span><br><span class="line">                    getName());</span><br><span class="line">            <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先说这个父类：在 Shiro 中 Realm 是一个接口，而 SimpleAccountRealm 是它的实现类。具体关系：</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-12-05_19-46-47.png" alt></p>
<p>实话说这些类是干嘛的，我也不知道，但是知道 Realm 的作用，以及 SimpleAccountRealm 是它的实现类就行了。</p>
<p>至于这个 doGetAuthenticationInfo 方法，它在登录的时候要用到。</p>
<p>在这个方法中：</p>
<ul>
<li>接收这次登录时输入的用户名和密码</li>
<li>根据用户名查询真正的密码</li>
<li>将用户名和真正的密码一起返回给 Shiro</li>
</ul>
<p>它的职责还是很明确的，根据功能不难看出：它的形参就是登录时的凭证，里面包含了用户名和密码等信息。返回值就是提供给 Shiro 验证此次登录的对象，这个对象包含了真正的用户信息。</p>
<p>形参可以看作是<strong>认证凭证</strong>，返回值可以看作是<strong>身份认证信息</strong>，它们具体是谁的实现类在这里的就 8 说了。</p>
<h2 id="模拟查询数据库"><a href="#模拟查询数据库" class="headerlink" title="模拟查询数据库"></a>模拟查询数据库</h2><p>如果真要查数据库，就得引入更多的依赖，这里就模拟一下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPasswordByUsername</span><span class="params">(String username)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (username)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"root"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"root"</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"admin"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"admin123"</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="创建登录接口"><a href="#创建登录接口" class="headerlink" title="创建登录接口"></a>创建登录接口</h1><p>登录接口就是接收用户输入的用户名和密码，然后让 Shiro 去验证是否正确。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(@RequestParam String username, @RequestParam String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"登录成功"</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"登录失败"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 接口的参数就不说了，就是传递过来的用户名和密码。</p>
<p>通过用户名和密码创建一个 UsernamePasswordToken，这个类是上面自定义 Realm 类中提过的<strong>认证凭证</strong>的实现类，不信自己去查。这个 token 将用户输入的信息封装起来，之后就会传递给 Realm 对象。</p>
<p>至于这个 Subject 类，官方文档说可以把它看作是与系统交互一个对象，可以是人也可能不是。具体怎么说我忘了，但是现在直接把它看成是一个用户，因为我想不出其他情况。</p>
<p>对于后端，对于某一次登录，先获取到这次登录的用户是谁，然后调用它的 login 方法去登录。</p>
<p>接下去不用判断登录的结果，因为登录失败会抛出异常，捕获异常然后处理就完事了。异常具体有很多种，比如用户名不存在、密码错误等。这里为了简（tou）单（lan）就不一一列出了。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h2><p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-12-05_20-32-07.png" alt></p>
<h2 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h2><p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-12-05_20-33-26.png" alt></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写了一个多小时，想方设法说得通俗易懂。</p>
<p>不管怎么样，文档和资料难啃还是要看，不然对一些基本的类都不了解。</p>
<p>既然你看到这里，就希望对你有帮助。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 集成 Shiro 并使用 SHA-256 加密密码]]></title>
      <url>/2018/12/articles/Spring%20Boot%20%E9%9B%86%E6%88%90%20Shiro%20%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<p>用户密码的加密以及验证。</p>
<a id="more"></a>
<p>我们不能将用户的密码以明文存储，否则如果自己的数据库被入侵，用户在其他网站的帐号也可能被盗。</p>
<p>我对各种加密算法并不了解，就不说什么了，直接开始。</p>
<h1 id="注册时生成密文"><a href="#注册时生成密文" class="headerlink" title="注册时生成密文"></a>注册时生成密文</h1><p>Shiro 提供了一个 SimpleHash 类可以很方便的对字符串进行加密，只需一行代码就可以对密码进行加密。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String hashPassword = <span class="keyword">new</span> SimpleHash(<span class="string">"SHA-256"</span>, password, username+<span class="string">"reg"</span>, <span class="number">1024</span>).toString();</span><br></pre></td></tr></table></figure>
<p>它的第一个参数是加密的算法，第二个是要加密的内容，第三个是盐（这个参数随便你定），第四个是期望的次数。</p>
<p>得到加密之后的密码，就可以将整个 User 对象存储到数据库中，以后登录的时候再通过 Realm 查询。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入用于存储 user 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"reg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">reg</span><span class="params">(@RequestParam(name = <span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                  @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line"></span><br><span class="line">    String hashPassword = <span class="keyword">new</span> SimpleHash(<span class="string">"SHA-256"</span>, password, username+<span class="string">"reg"</span>, <span class="number">1024</span>).toString();</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setPassword(hashPassword);</span><br><span class="line">    user.setSalt(username + <span class="string">"reg"</span>);</span><br><span class="line"></span><br><span class="line">    userService.addUser(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"注册成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h1><p>上一篇文章说了如何实现登录，但是当时没有对密码进行加密。</p>
<p>加密之后的 Realm 又该怎么写了呢？</p>
<p>Shiro 给人一种感觉：基本的东西我都准备好了，你要啥就自己加。</p>
<p>所以只需要在自定义 Realm 里重写它的 setCredentialsMatcher 接口，在里面指定算法类型、期望的次数就行了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCredentialsMatcher</span><span class="params">(CredentialsMatcher credentialsMatcher)</span> </span>&#123;</span><br><span class="line">    HashedCredentialsMatcher matcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">    matcher.setHashAlgorithmName(<span class="string">"SHA-256"</span>);</span><br><span class="line">    matcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">super</span>.setCredentialsMatcher(matcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里跟注册时基本一致，不过好像没有指定盐？</p>
<p>加密使用了盐，验证的时候也少不了它，只不过它不是写在这里的，毕竟每个用户的盐可能是不一致的（盐根据你自己的想法去设置）。</p>
<p>可还记得 doGetAuthenticationInfo 方法返回了一个<strong>身份认证信息对象</strong>供 Shiro 验证，使用盐之后，在创建这个对象的时候把盐传进去就行了。</p>
<p><strong>注意：因为现在需要的不仅仅是密码，还需要盐。所以模拟查询数据库的时候不能仅仅返回一个字符串了，而是应该返回一个对象，然后从对象中取出密码、盐。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入用于存储 user 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    String username = token.getPrincipal().toString();</span><br><span class="line"></span><br><span class="line">    User user = userService.getUserByUsername(username);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        String password = user.getPassword();</span><br><span class="line"></span><br><span class="line">        AuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">            username,</span><br><span class="line">            password,</span><br><span class="line">            <span class="comment">//传入盐</span></span><br><span class="line">            ByteSource.Util.bytes(user.getSalt()),</span><br><span class="line">            getName());</span><br><span class="line">        <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="模拟存取-User-对象"><a href="#模拟存取-User-对象" class="headerlink" title="模拟存取 User 对象"></a>模拟存取 User 对象</h1><p>一切为了简单。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, User&gt; users = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getUsername(), user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="没有注册时登录"><a href="#没有注册时登录" class="headerlink" title="没有注册时登录"></a>没有注册时登录</h2><p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-12-06_19-36-54%20%E6%B2%A1%E6%9C%89%E6%B3%A8%E5%86%8C.png" alt></p>
<h2 id="注册成功"><a href="#注册成功" class="headerlink" title="注册成功"></a>注册成功</h2><p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-12-06_19-37-10%20%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F.png" alt></p>
<h2 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h2><p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-12-06_19-37-24%20%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F.png" alt></p>
<h2 id="密码错误"><a href="#密码错误" class="headerlink" title="密码错误"></a>密码错误</h2><p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-12-06_19-37-37%20%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF.png" alt></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>希望对你有帮助。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot MyBatis 多个参数的坑]]></title>
      <url>/2018/11/articles/Spring%20Boot%20MyBatis%20%E6%9F%A5%E8%AF%A2%E6%9F%90%E4%B8%80%E5%A4%A9%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>我真傻，真的。<br><a id="more"></a></p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>数据库中有一个字段（time）记录这条数据产生的时间，现在需要一个接口，返回某一天产生的所有数据。</p>
<h1 id="参数个数的坑"><a href="#参数个数的坑" class="headerlink" title="参数个数的坑"></a>参数个数的坑</h1><h2 id="接收两个参数并使用"><a href="#接收两个参数并使用" class="headerlink" title="接收两个参数并使用"></a>接收两个参数并使用</h2><p>在数据访问层，<strong>可以接收两个参数，但是不能用，一旦用了就出错</strong>：</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-11-30_13-50-30.png" alt></p>
<h2 id="接收两个参数但是不用"><a href="#接收两个参数但是不用" class="headerlink" title="接收两个参数但是不用"></a>接收两个参数但是不用</h2><p>接收参数，并且 SQL 语句没有错误，是<strong>可以查询到数据的</strong>。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-11-30_13-58-57.png" alt></p>
<p>两种情况不同之处：前者使用了传递过来的参数，后者直接把字符串写上去。</p>
<p>所以我一直以为是我<strong>传递过来的参数有问题</strong>，也想过是不是<strong>参数类型的问题？</strong></p>
<p>改了很久….</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM find WHERE time BETWEEN #&#123;time1&#125; AND #&#123;time2&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;FindLog&gt; <span class="title">findDay</span><span class="params">(@Param(<span class="string">"time1"</span>)</span> String time1, @<span class="title">Param</span><span class="params">(<span class="string">"time2"</span>)</span> String time2)</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-11-30_14-16-01.png" alt></p>
<p>简单来说，就是在形参前面加了一个注解：@Param。。。</p>
<h1 id="是否需要加引号的坑"><a href="#是否需要加引号的坑" class="headerlink" title="是否需要加引号的坑"></a>是否需要加引号的坑</h1><ul>
<li>直接在 SQL 语句中写日期：<strong>需要</strong>用单引号包起来</li>
<li>如果在 SQL 中 #{time}，那么 time 引用的字符串就<strong>不需要</strong>加单引号</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li>利用 IDEA 创建实体类时：使用 java.util.Date 类型，方便设置日期</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.setTime(<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库 time 字段的类型为：datetime。如果是 date 就不会精确到几点几分几秒。</li>
<li>修改数据库的时区，免得跟本地时间不同</li>
</ul>
<h1 id="使用的接口"><a href="#使用的接口" class="headerlink" title="使用的接口"></a>使用的接口</h1><ul>
<li>接收的 num 为 0 表示今天，为 1 就表示前一天。</li>
<li>通过 SimpleDateFormat 格式化时间成：<em>2018-11-30</em> 这样的格式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"find_day"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">showDay</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> DAY_IN_MS = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date(System.currentTimeMillis() - (num * DAY_IN_MS));</span><br><span class="line"></span><br><span class="line">    SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    String time = format.format(date);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        拼接字符串</span></span><br><span class="line">    String time1 = time + <span class="string">" 00:00:00"</span>;</span><br><span class="line">    String time2 = time + <span class="string">" 23:59:59"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> service.findDay(time1, time2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>拼接字符串是用于 SQL 查询，查询某一天的语句：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> find <span class="keyword">WHERE</span> <span class="keyword">TIME</span> <span class="keyword">BETWEEN</span> <span class="string">"2018-11-30 00:00:00"</span> <span class="keyword">AND</span> <span class="string">"2018-11-30 23:59:59"</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>因为一个注解浪费了一个多小时的时间。</p>
<p>另外查询方法也很不优雅。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[PageHelper 的基本使用]]></title>
      <url>/2018/11/articles/PageHelper%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>使用 PageHelper 实现查询分页功能。</p>
<a id="more"></a>
<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页插件依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h1><p>在 config 包下创建 PageHelperConfig</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageHelperConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageHelper <span class="title">pageHelper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PageHelper pageHelper = <span class="keyword">new</span> PageHelper();</span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        p.setProperty(<span class="string">"offsetAsPageNum"</span>,<span class="string">"true"</span>);</span><br><span class="line">        p.setProperty(<span class="string">"rowBoundsWithCount"</span>,<span class="string">"true"</span>);</span><br><span class="line">        p.setProperty(<span class="string">"reasonable"</span>,<span class="string">"true"</span>);</span><br><span class="line">        pageHelper.setProperties(p);</span><br><span class="line">        <span class="keyword">return</span> pageHelper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="在接口中测试"><a href="#在接口中测试" class="headerlink" title="在接口中测试"></a>在接口中测试</h1><p>这个方法接收了两个参数：请求的页码、每一页显示的数量。</p>
<p>然后调用 <code>PageHelper.startPage(pageNo, size);</code> ，结果返回的就不是全部数据，而是第 3、4 条了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"page"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">findAll</span><span class="params">(@RequestParam(value = <span class="string">"page_no"</span>, defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> pageNo,</span></span><br><span class="line"><span class="function">                      @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"size"</span>, defaultValue = <span class="string">"2"</span>)</span> <span class="keyword">int</span> size) </span>&#123;</span><br><span class="line">    PageHelper.startPage(pageNo, size);</span><br><span class="line">    <span class="keyword">return</span> videoService.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"videoId"</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">"videoName"</span>: <span class="string">"1asdfasdfasdsdf"</span>,</span><br><span class="line">        <span class="attr">"videoAuthor"</span>: <span class="string">"dsfasdaf"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"videoId"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"videoName"</span>: <span class="string">"微信支付"</span>,</span><br><span class="line">        <span class="attr">"videoAuthor"</span>: <span class="string">"赵六"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>上面根据参数返回了指定的信息，但是这些信息还不够。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"page"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">findAll</span><span class="params">(@RequestParam(value = <span class="string">"page_no"</span>, defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> pageNo,</span></span><br><span class="line"><span class="function">                      @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"size"</span>, defaultValue = <span class="string">"2"</span>)</span> <span class="keyword">int</span> size) </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(pageNo, size);</span><br><span class="line">    List&lt;Video&gt; list = videoService.findAll();</span><br><span class="line">    PageInfo&lt;Video&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">    <span class="keyword">return</span> pageInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再添加几句之后，就可以返回更多要用的信息了。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pageNum"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"pageSize"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"orderBy"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"startRow"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"endRow"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"pages"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"list"</span>: [//省略这部分</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"firstPage"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"prePage"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"nextPage"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"lastPage"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"isFirstPage"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"isLastPage"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"hasPreviousPage"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"hasNextPage"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"navigatePages"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"navigatepageNums"</span>: [</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        <span class="number">4</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些就包括了当前页码、显示的条数，是否有下一页等等。</p>
<p>如果只想要一部分信息，还可以进一步封装：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"page"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">findAll</span><span class="params">(@RequestParam(value = <span class="string">"page_no"</span>, defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> pageNo,</span></span><br><span class="line"><span class="function">                      @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"size"</span>, defaultValue = <span class="string">"2"</span>)</span> <span class="keyword">int</span> size) </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(pageNo, size);</span><br><span class="line">    List&lt;Video&gt; list = videoService.findAll();</span><br><span class="line">    PageInfo&lt;Video&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"page_num"</span>, pageInfo.getPageNum());</span><br><span class="line">    map.put(<span class="string">"has_next"</span>, pageInfo.isHasNextPage());</span><br><span class="line">    map.put(<span class="string">"data"</span>, pageInfo.getList());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回的结果就更简洁：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"videoId"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"videoName"</span>: <span class="string">"1asdfasdfasdsdf"</span>,</span><br><span class="line">            <span class="attr">"videoAuthor"</span>: <span class="string">"dsfasdaf"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"videoId"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"videoName"</span>: <span class="string">"微信支付"</span>,</span><br><span class="line">            <span class="attr">"videoAuthor"</span>: <span class="string">"赵六"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"has_next"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"page_num"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>暑假就用了 PageHelper 进行分页，但是对于原理一无所知，虽然现在也差不多。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 动态 SQL 语句]]></title>
      <url>/2018/11/articles/Spring%20Boot%20%E5%8A%A8%E6%80%81%20SQL%20%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<p>根据实际需要生成 SQL 语句。</p>
<a id="more"></a>
<p>更新视频信息时，每次需要更新的字段可能不一致，这一次可能是视频名称，下一次可能是视频的作者。</p>
<p>对应的，就需要写很多判断、多个 SQL 语句。</p>
<p>幸好 Spring Boot 中可以动态生成 SQL 语句来满足各种情况。</p>
<h1 id="创建-VideoSqlProvider"><a href="#创建-VideoSqlProvider" class="headerlink" title="创建 VideoSqlProvider"></a>创建 VideoSqlProvider</h1><ul>
<li>先创建一个 provider 包</li>
<li>然后创建 VideoSqlProvider 类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoSqlProvider</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateVideo</span><span class="params">(<span class="keyword">final</span> Video video)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;&#123;</span><br><span class="line">            UPDATE(<span class="string">"Video"</span>);</span><br><span class="line">            <span class="keyword">if</span>(video.getVideoAuthor() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                SET(<span class="string">"video_author = #&#123;videoAuthor&#125;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(video.getVideoName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                SET(<span class="string">"video_name = #&#123;videoName&#125;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            WHERE(<span class="string">"video_id = #&#123;videoId&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它指明了要更新那个表，并且根据 Java 对象的属性是否为 null 生成 SQL 语句，最后设置更新的条件。</p>
<h1 id="在数据访问层使用"><a href="#在数据访问层使用" class="headerlink" title="在数据访问层使用"></a>在数据访问层使用</h1><p>通过使用 @UpdateProvider 注解指明使用哪个 Provider，以及使用哪个方法动态生成 SQL 语句。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Update("UPDATE Video SET video_author = #&#123;videoAuthor&#125; WHERE video_id = #&#123;videoId&#125;")</span></span><br><span class="line"><span class="meta">@UpdateProvider</span>(type = VideoSqlProvider.class, method = <span class="string">"updateVideo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateVideo</span><span class="params">(Video video)</span></span>;</span><br></pre></td></tr></table></figure>
<p>除了 @UpdateProvider 之外，还有：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteProvider</span>()</span><br><span class="line"><span class="meta">@InsertProvider</span>()</span><br><span class="line"><span class="meta">@SelectProvider</span>()</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>略。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 接口规范]]></title>
      <url>/2018/11/articles/Spring%20Boot%20%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>对接口进一步完善。</p>
<a id="more"></a>
<h1 id="根据权限区分接口"><a href="#根据权限区分接口" class="headerlink" title="根据权限区分接口"></a>根据权限区分接口</h1><p>一般的查询接口可以对普通用户开放，但是对于像删除这些操作只能由管理员执行。</p>
<p>所以在 controller 包中添加一个 admin 包，在 admin 包下新建一个 VideoAdminController 用于存放只对管理员开放的接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.diaolizhi.mybatisdemo.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.diaolizhi.mybatisdemo.domain.Video;</span><br><span class="line"><span class="keyword">import</span> com.diaolizhi.mybatisdemo.service.VideoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/admin/api/v1/video"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoAdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoService videoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String videoAuthor, <span class="keyword">int</span> videoId)</span> </span>&#123;</span><br><span class="line">        Video video = <span class="keyword">new</span> Video();</span><br><span class="line">        video.setVideoAuthor(videoAuthor);</span><br><span class="line">        video.setVideoId(videoId);</span><br><span class="line">        <span class="keyword">return</span> videoService.updateVideo(video);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addVideo</span><span class="params">(String videoName, String videoAuthor)</span> </span>&#123;</span><br><span class="line">        Video video = <span class="keyword">new</span> Video();</span><br><span class="line">        video.setVideoName(videoName);</span><br><span class="line">        video.setVideoAuthor(videoAuthor);</span><br><span class="line">        <span class="keyword">return</span> videoService.addVideo(video);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> videoService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>除了将敏感操作移动到这个 controller 之外，还需要注意 @RequestMapping(“/admin/api/v1/video”)，这一句和原来相比多了一个 admin。</li>
</ul>
<h1 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h1><h2 id="字段映射"><a href="#字段映射" class="headerlink" title="字段映射"></a>字段映射</h2><p>HTTP 中请求的字段名最好以下划线的方式命名，又由于 Java 中常使用驼峰命名法，所以这里使用 @RequestParam 注解完成映射。</p>
<p><em>value 对应的是 HTTP 请求携带的字段名。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addVideo</span><span class="params">(@RequestParam(value = <span class="string">"video_author"</span>)</span> String videoAuthor,</span></span><br><span class="line"><span class="function">                    @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"video_name"</span>)</span> String videoName) </span>&#123;</span><br><span class="line">    Video video = <span class="keyword">new</span> Video();</span><br><span class="line">    video.setVideoName(videoName);</span><br><span class="line">    video.setVideoAuthor(videoAuthor);</span><br><span class="line">    <span class="keyword">return</span> videoService.addVideo(video);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h2><p>如果观察一下，会发现有些 HTTP 请求中会携带一个 page_no 字段，这表示请求服务器第几页的内容。如果没有携带这个参数，就默认返回第一页。</p>
<p>@RequestParam 也提供了这种<em>默认值</em>的功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"page"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">findAll</span><span class="params">(@RequestParam(value = <span class="string">"page_no"</span>, defaultValue = <span class="string">"1"</span>)</span> <span class="keyword">int</span> pageNo) </span>&#123;</span><br><span class="line">    System.out.println(pageNo);</span><br><span class="line">    <span class="keyword">return</span> videoService.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果没有 page_no 参数默认是 1，由于还没有添加分页功能，所以只是输出 pageNo 的值。</p>
<h1 id="接受一个对象"><a href="#接受一个对象" class="headerlink" title="接受一个对象"></a>接受一个对象</h1><p>假设要在数据库中添加一个视频，而视频又有很多个字段，一个一个地写就很麻烦了。</p>
<p>所以可以接受一个 Video 对象，然后请求的时候直接发送 json 数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(@RequestBody Video video)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> videoService.updateVideo(video);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里需要使用 @RequestBody 注解</li>
<li>发送请求的方法：</li>
</ul>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-11-18_11-59-41.png" alt></p>
<p>发送 Json 数据不必将 Java 对象的每个属性都写上去，让这些属性值为 null 就行。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>遵守必要的规范，不然以后更不方便。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 整合 Mybatis 和阿里巴巴数据源]]></title>
      <url>/2018/11/articles/Spring%20Boot%20%E4%BD%BF%E7%94%A8%20Mybatis/</url>
      <content type="html"><![CDATA[<p>如何在 Spring Boot 中使用 Mybatis 查询数据。<br><a id="more"></a></p>
<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><p>一个很方便的方式是在创建项目的时候就添加 Mybatis 和 Mysql-connector 依赖。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/%E5%88%9B%E5%BB%BA%20Spring%20Boot%20%E9%A1%B9%E7%9B%AE%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96.png" alt></p>
<p>但是现在阿里巴巴数据源的依赖还没有添加，<a href="https://mvnrepository.com/artifact/com.alibaba/druid" target="_blank" rel="noopener">druid 的项目地址</a>。</p>
<p>当前用的最多的版本是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>千万别忽略了 Mysql 驱动的依赖。</strong></p>
<h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><p>在 application.properties 中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#=================================== 数据库相关 ============================================</span><br><span class="line">#可以自动识别</span><br><span class="line">#spring.datasource.driver-class-name =com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/movie?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.username =root</span><br><span class="line">spring.datasource.password =password</span><br><span class="line">#如果不使用默认的数据源 （com.zaxxer.hikari.HikariDataSource）</span><br><span class="line">spring.datasource.type =com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure>
<h1 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h1><p>在启动类添加一行注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.diaolizhi.mybatisdemo.mapper"</span>)</span><br></pre></td></tr></table></figure>
<p>注解中的包名对应自己项目中 mapper 包的路径。</p>
<h1 id="创建-Mapper-类进行测试"><a href="#创建-Mapper-类进行测试" class="headerlink" title="创建 Mapper 类进行测试"></a>创建 Mapper 类进行测试</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>创建数据库</li>
<li>创建数据表</li>
<li>添加数据</li>
<li>在 IDEA 连接数据库，并生成实体类</li>
</ul>
<h2 id="创建-TestMapper-接口"><a href="#创建-TestMapper-接口" class="headerlink" title="创建 TestMapper 接口"></a>创建 TestMapper 接口</h2><ul>
<li>注意这是一个接口而不是类</li>
<li>注意数据库字段与实体类的字段是否一致</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.diaolizhi.mybatisdemo.domain.Video;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM Video"</span>)</span><br><span class="line">    <span class="comment">//加下面这个注解是因为：数据库字段和实体类变量名不一致</span></span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"video_id"</span>,property = <span class="string">"videoId"</span>),  <span class="comment">//javaType = java.util.Date.class</span></span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"video_name"</span>,property = <span class="string">"videoName"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"video_author"</span>,property = <span class="string">"videoAuthor"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;Video&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建测试接口"><a href="#创建测试接口" class="headerlink" title="创建测试接口"></a>创建测试接口</h2><p>在 IDEA 中注入 TestMapper 会有错误提示，虽然不影响使用，但看不顺眼的时候可以在设置中关闭提示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test_db"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>温故而知自己有多蠢。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 增删改查]]></title>
      <url>/2018/11/articles/Spring%20Boot%20%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      <content type="html"><![CDATA[<p>使用注解的方式在 Spring Boot 中进行增删改查。</p>
<a id="more"></a>
<p>进行 CRUD 的前提是连接数据库，而连接数据库、执行 SQL 语句都需要 Mybatis 完成，所以必须先引入 Mybatis 的相关依赖，并进行配置。</p>
<p>在上一篇文章中，已经完成 Mybatis 的相关配置，也写了一个查询接口进行测试，现在完成其他操作。</p>
<h1 id="数据库字段下划线和-Java-实体类映射"><a href="#数据库字段下划线和-Java-实体类映射" class="headerlink" title="数据库字段下划线和 Java 实体类映射"></a>数据库字段下划线和 Java 实体类映射</h1><p>在开始之前，现在 application.properties 中添加配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#mybatis 下划线转驼峰配置，两者任选其一</span><br><span class="line">#mybatis.configuration.mapUnderscoreToCamelCase=true</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br></pre></td></tr></table></figure>
<p>这是一个技巧。因为数据库中的字段习惯上是使用下划线的，而 Java 中使用驼峰命名法，如果不加这个配置，就需要像上一篇文章那样进行转换：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"video_id"</span>,property = <span class="string">"videoId"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"video_name"</span>,property = <span class="string">"videoName"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"video_author"</span>,property = <span class="string">"videoAuthor"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>加了之后上面这一堆东西就不用写了。</p>
<h1 id="控制台打印-SQL-语句"><a href="#控制台打印-SQL-语句" class="headerlink" title="控制台打印 SQL 语句"></a>控制台打印 SQL 语句</h1><p>在 application.properties 中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#控制台打印 SQL 语句</span><br><span class="line">mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>
<p>这是另一个技巧，方便调试。</p>
<h1 id="改"><a href="#改" class="headerlink" title="改"></a>改</h1><h2 id="在-Mapper-接口中创建方法"><a href="#在-Mapper-接口中创建方法" class="headerlink" title="在 Mapper 接口中创建方法"></a>在 Mapper 接口中创建方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update</span>(<span class="string">"UPDATE Video SET video_author = #&#123;videoAuthor&#125; WHERE video_id = #&#123;videoId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateVideo</span><span class="params">(Video video)</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意：这里是根据 videoId 修改 videoAuthor，但是接收的参数不是这两个参数，而是一个 Video 对象。</strong></p>
<p>这样写形参看起来比较短，另外刚才写的是一个 String 和一个 int 类型的形参，还出现了错误。</p>
<h2 id="创建-service-包"><a href="#创建-service-包" class="headerlink" title="创建 service 包"></a>创建 service 包</h2><ul>
<li>这个包属于业务层，在这个包下创建一个 VideoService 接口</li>
<li>然后创建一个 impl 包</li>
<li>在 impl 包下创建 VideoServiceImpl 类实现 VideoService 接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VideoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateVideo</span><span class="params">(Video video)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoServiceImpl</span> <span class="keyword">implements</span> <span class="title">VideoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoMapper videoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateVideo</span><span class="params">(Video video)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> videoMapper.updateVideo(video);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>在 VideoServiceImpl 类中注入 VideoMapper 而不是在 VideoService 接口中</li>
<li>@Service 注解只需要加在实现类中</li>
</ul>
<h2 id="编写-Controller"><a href="#编写-Controller" class="headerlink" title="编写 Controller"></a>编写 Controller</h2><ul>
<li>注入的是 VideoService 而不是它的实现类</li>
<li>接收到参数之后，不是直接交给业务层，而是创建一个对象传递过去</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/v1/video"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoService videoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String videoAuthor, <span class="keyword">int</span> videoId)</span> </span>&#123;</span><br><span class="line">        Video video = <span class="keyword">new</span> Video();</span><br><span class="line">        video.setVideoAuthor(videoAuthor);</span><br><span class="line">        video.setVideoId(videoId);</span><br><span class="line">        <span class="keyword">return</span> videoService.updateVideo(video);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用-postman-测试"><a href="#使用-postman-测试" class="headerlink" title="使用 postman 测试"></a>使用 postman 测试</h2><p>注意使用的是 PUT 方法，返回的是受影响的条数。</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/Snipaste_2018-11-17_16-58-02.png" alt></p>
<h1 id="增"><a href="#增" class="headerlink" title="增"></a>增</h1><p>先总结一下，新增一个 CRUD 操作的步骤：</p>
<ul>
<li>在 Mapper 类中添加方法（使用注解访问数据库）</li>
<li>在业务层添加方法，调用 Mapper 对象的方法</li>
<li>在控制层编写接口，将参数传递给业务层</li>
</ul>
<p>但是对于<strong>增</strong>操作而言，有一些不同。</p>
<p>其他操作返回<em>受影响的条数</em>即可，但是增加数据的话，可能需要获取到这条数据插入数据库时的自增主键，比如插入一条订单，需要获取到它的订单号。</p>
<p>下面看代码：</p>
<h2 id="数据访问层"><a href="#数据访问层" class="headerlink" title="数据访问层"></a>数据访问层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert</span>(<span class="string">"INSERT INTO Video (video_name, video_author) VALUES (#&#123;videoName&#125;, #&#123;videoAuthor&#125;)"</span>)</span><br><span class="line"><span class="meta">@Options</span>(useGeneratedKeys=<span class="keyword">true</span>, keyProperty=<span class="string">"videoId"</span>, keyColumn=<span class="string">"video_id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addVideo</span><span class="params">(Video video)</span></span>;</span><br></pre></td></tr></table></figure>
<p>使用 @Options 注解就可以获取到自增 id，<strong>注意 keyProperty 才是实体类的字段名，千万不要搞反了</strong>。</p>
<h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addVideo</span><span class="params">(Video video)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rows = videoMapper.addVideo(video);</span><br><span class="line">    <span class="keyword">int</span> id = video.getVideoId();</span><br><span class="line">    System.out.println(<span class="string">"新添加的视频的 id:"</span> + video.getVideoId());</span><br><span class="line">    <span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 getVideoId() 方法就可以取得自增 id，在业务层和控制层都可以获取到，因为这是同一个对象。</p>
<h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"insert"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addVideo</span><span class="params">(String videoName, String videoAuthor)</span> </span>&#123;</span><br><span class="line">    Video video = <span class="keyword">new</span> Video();</span><br><span class="line">    video.setVideoName(videoName);</span><br><span class="line">    video.setVideoAuthor(videoAuthor);</span><br><span class="line">    <span class="keyword">return</span> videoService.addVideo(video);;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="删"><a href="#删" class="headerlink" title="删"></a>删</h1><h2 id="数据访问层-1"><a href="#数据访问层-1" class="headerlink" title="数据访问层"></a>数据访问层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete</span>(<span class="string">"DELETE FROM Video WHERE video_id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="业务层-1"><a href="#业务层-1" class="headerlink" title="业务层"></a>业务层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> videoMapper.delete(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="控制层-1"><a href="#控制层-1" class="headerlink" title="控制层"></a>控制层</h2><p>注意需要使用 DELETE 方法提交</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> videoService.delete(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1><h2 id="数据访问层-2"><a href="#数据访问层-2" class="headerlink" title="数据访问层"></a>数据访问层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM Video"</span>)</span><br><span class="line"><span class="function">List&lt;Video&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="业务层-2"><a href="#业务层-2" class="headerlink" title="业务层"></a>业务层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Video&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> videoMapper.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="控制层-2"><a href="#控制层-2" class="headerlink" title="控制层"></a>控制层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"page"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> videoService.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="需要注意的细节"><a href="#需要注意的细节" class="headerlink" title="需要注意的细节"></a>需要注意的细节</h1><p>在终端执行 SQL 语句时，有时候需要使用单引号：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Video <span class="keyword">SET</span> video_author = <span class="string">'李四'</span> <span class="keyword">WHERE</span> video_id = <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>但是在数据访问层，使用注解时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update</span>(<span class="string">"UPDATE Video SET video_author = #&#123;videoAuthor&#125; WHERE video_id = #&#123;videoId&#125;"</span>)</span><br></pre></td></tr></table></figure>
<p>是不需要单引号的，如果加了就会出错，一定要注意。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这些东西在暑假已经学过，而且也用过一遍了，现在还是不能不看视频写出来，而且还是会犯错。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 配置文件映射]]></title>
      <url>/2018/11/articles/Spring%20Boot%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84/</url>
      <content type="html"><![CDATA[<p>如何读取配置文件中的信息。</p>
<a id="more"></a>
<h1 id="直接引用"><a href="#直接引用" class="headerlink" title="直接引用"></a>直接引用</h1><ul>
<li>在 application.properties 中添加配置信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.name = ZhangSan</span><br></pre></td></tr></table></figure>
<ul>
<li>在某个类（比如 TestController）中引用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引用配置文件需要添加下面这一句注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:my.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用配置信息</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="建立配置类"><a href="#建立配置类" class="headerlink" title="建立配置类"></a>建立配置类</h1><ul>
<li>添加配置信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.name = ZhangSan</span><br><span class="line">test.age = 18</span><br></pre></td></tr></table></figure>
<ul>
<li>新建配置类<ul>
<li>添加 @Configuration 注解</li>
<li>添加 @PropertySource 注解</li>
<li>使用 @Value 注解引用配置信息</li>
<li>生成 get、set 方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 <span class="doctag">@Component</span> 和 <span class="doctag">@Configuration</span> 都会进行扫描，但是后者意义更准确</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:my.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test.age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:my.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入配置类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestConfig testConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test2"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        使用配置信息</span></span><br><span class="line">        <span class="keyword">return</span> testConfig.getName() + testConfig.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在开发时，一定要避免硬编码，一个显而易见的好处是：要修改某个配置时，不用到处修改代码，只是需要修改配置文件。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 可定义可重入锁]]></title>
      <url>/2018/11/articles/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</url>
      <content type="html"><![CDATA[<p>实现 Lock 接口并重写 lock() 和 unlock() 方法。<br><a id="more"></a></p>
<p>Java 提供了多种锁，对修改数据的操作加锁，确保多线程下的线程安全。</p>
<p>下面一步步自定义一个<strong>可重入锁</strong>。所谓可重入，就是同一个线程可以多次进入被加锁的代码块。因为出现线程不安全的一个条件是：在多线程下运行。所以一个被锁代码块，面对同一个线程时，应该是可以重复进入的。</p>
<p>就像下面这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: studythread2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义可重用锁测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: diaolizhi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-11-14 21:35</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TwiceLock</span> </span>&#123;</span><br><span class="line">        MyLock myLock = <span class="keyword">new</span> MyLock();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            myLock.lock();</span><br><span class="line">            System.out.println(<span class="string">"进入方法 A."</span>);</span><br><span class="line">            methodB();</span><br><span class="line">            myLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            myLock.lock();</span><br><span class="line">            System.out.println(<span class="string">"进入方法 B."</span>);</span><br><span class="line">            myLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TwiceLock().methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法 A 和方法 B 中使用同一个锁，如果不具备可重入性，那么调用方法 B 时线程肯定会一直被阻塞。</p>
<h1 id="不具备可重入性的锁"><a href="#不具备可重入性的锁" class="headerlink" title="不具备可重入性的锁"></a>不具备可重入性的锁</h1><p>现在这个自定义锁只有一个标志：标志这个锁是否处于锁定状态。</p>
<blockquote>
<p>Java 中自带的锁远没有这么简单，甚至它们都没有用到 synchronized 关键字。</p>
</blockquote>
<p>这个锁的思路是：调用 lock() 方法的时候，先判断是否已经被锁，如果在其他线程中被锁了，那么当前线程就老老实实地进入阻塞。</p>
<p>当其他线程释放锁并调用 notify() 唤醒当前线程时，当前线程获得锁，并将 isLocked 标志置为 true。</p>
<p>这样的实现是不具备可重入性的，当运行测试代码时，会一直处于阻塞状态，所以还需要优化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: studythread2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义可重用锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: diaolizhi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-11-14 21:34</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLocked = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isLocked) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        isLocked = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notify();</span><br><span class="line">        isLocked = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略四个覆盖的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="可重入的锁"><a href="#可重入的锁" class="headerlink" title="可重入的锁"></a>可重入的锁</h1><p>可重入的一个关键是：同一个线程。所以自定义锁里面就有一个字段记录自己是被哪个线程锁定的。</p>
<p>另外，本来释放锁时就将标志 isLocked 置为 false，但是现在就不行了：方法 B 调用 unlock() 方法释放锁，但方法 A 中可能还需要对共享资源进行操作，此时仍然不能让其他线程进入，所以对于 unlock() 方法也需要修改，而 reenterCount 就是用来判断能不能释放锁。</p>
<p>跟上面不同之处是：</p>
<ul>
<li>如果没有被任何线程锁定，那么记录当前线程，标志位置为 true，reenterCount++。</li>
<li>如果进来的是同一个线程，那么就不能将它阻塞，而是将 reenterCount++。</li>
<li>如果没有被锁，调用 unlock() 没有意义，什么也不用做。</li>
<li>正常情况下，reenterCount–，如果 reenterCount 为 0，才真正的释放锁。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: studythread2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义可重用锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: diaolizhi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-11-14 21:34</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLocked = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Thread lockThread = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> reenterCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isLocked &amp;&amp; lockThread != Thread.currentThread()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lockThread = Thread.currentThread();</span><br><span class="line">        isLocked = <span class="keyword">true</span>;</span><br><span class="line">        reenterCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isLocked == <span class="keyword">true</span> &amp;&amp; Thread.currentThread() == lockThread) &#123;</span><br><span class="line">            reenterCount--;</span><br><span class="line">            <span class="keyword">if</span> (reenterCount == <span class="number">0</span>) &#123;</span><br><span class="line">                isLocked = <span class="keyword">false</span>;</span><br><span class="line">                lockThread = <span class="keyword">null</span>;</span><br><span class="line">            	notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//省略四个类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>自定义这个锁没什么实际意义，不过可以体会一下“可重入性”是怎么一回事。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JUnit5 的基本使用]]></title>
      <url>/2018/11/articles/JUnit5-2/</url>
      <content type="html"><![CDATA[<p>介绍 JUnit5 中常用的注解、断言以及前置条件。</p>
<a id="more"></a>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><table>
<thead>
<tr>
<th>常用注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Test</td>
<td>被注解的方法是一个测试方法。</td>
</tr>
<tr>
<td>@BeforeAll</td>
<td>被注解的（静态）方法将在当前类中的所有 @Test 方法前执行一次。</td>
</tr>
<tr>
<td>@BeforeEach</td>
<td>被注解的方法将在当前类中的每个 @Test 方法前执行。</td>
</tr>
<tr>
<td>@AfterEach</td>
<td>被注解的方法将在当前类中的每个 @Test 方法后执行。</td>
</tr>
<tr>
<td>@AfterAll</td>
<td>被注解的（静态）方法将在当前类中的所有 @Test 方法后执行一次。</td>
</tr>
<tr>
<td>@Disabled</td>
<td>被注解的方法不会执行（将被跳过），但会报告为已执行。</td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong>被<code>@Test</code>、<code>@BeforeAll</code>、<code>@AfterAll</code>、<code>@BeforeEach</code> 或 <code>@AfterEach</code> 注解标注的方法不可以有返回值。 </p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: JunitTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Test3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: diaolizhi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-11-10 10:57</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"测试 1 + 2 是否等于 3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">1</span> + <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"测试 3 / 0"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDivision</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> a = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----测试开始"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeEach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--将执行新的测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----测试结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterEach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--结束一个测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Disabled</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"跳过测试但显示执行成功"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> a = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/JUnit5-example.png" alt></p>
<p>通过上面的注解：</p>
<ul>
<li><p>可以在测试开始时、结束时运行一个指定的方法</p>
</li>
<li><p>可以在每个测试方法运行前后执行指定方法</p>
</li>
<li>可以使用 <code>@DisplayName</code>注解一个方法，这样在测试报告中就显示更有意义的信息，而不是方法名。</li>
<li>可以使用 <code>@Disabled</code>注解一个方法，在测试时跳过这个方法，并在报告中显示执行成功。</li>
</ul>
<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p>断言是用来测试一个条件是否满足，如果满足就往下执行，如果不满足就报告测试不通过。</p>
<h2 id="JUnit-Jupiter-中的断言"><a href="#JUnit-Jupiter-中的断言" class="headerlink" title="JUnit Jupiter 中的断言"></a>JUnit Jupiter 中的断言</h2><table>
<thead>
<tr>
<th>断言方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>assertEquals(expected, actual)</td>
<td>如果 <em>expected</em> 不等于 <em>actual</em>，则断言失败。</td>
</tr>
<tr>
<td>assertFalse(booleanExpression)</td>
<td>如果 <em>booleanExpression</em> 不是 <code>false</code>，则断言失败。</td>
</tr>
<tr>
<td>assertNull(actual)</td>
<td>如果 <em>actual</em> 不是 <code>null</code>，则断言失败。</td>
</tr>
<tr>
<td>assertNotNull(actua</td>
<td>如果 <em>actual</em> 是 <code>null</code>，则断言失败。</td>
</tr>
<tr>
<td>assertTrue(booleanExpression)</td>
<td>如果 <em>booleanExpression</em> 不是 <code>true</code>，则断言失败。</td>
</tr>
</tbody>
</table>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: JunitTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Test4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: diaolizhi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-11-10 11:22</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testAssert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        assertFalse(<span class="number">1</span> != <span class="number">1</span>);</span><br><span class="line">        assertNull(<span class="keyword">null</span>);</span><br><span class="line">        assertNotNull(<span class="keyword">new</span> Integer(<span class="number">0</span>));</span><br><span class="line">        assertNotNull(<span class="number">1</span> == <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="message-参数"><a href="#message-参数" class="headerlink" title="message 参数"></a>message 参数</h2><p>断言方法都有一个缺省的 message 参数，用于在断言失败时显示。</p>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"测试 1 和 2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显示结果：</p>
<p><img src="https://md-img-1252869657.cos.ap-shanghai.myqcloud.com/hexo/assertiMessage.png" alt></p>
<h2 id="assertAll-方法"><a href="#assertAll-方法" class="headerlink" title="assertAll 方法"></a>assertAll 方法</h2><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertAll(</span><br><span class="line">        <span class="string">"进行多次断言"</span>,</span><br><span class="line">        () -&gt; assertEquals(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        () -&gt; assertTrue(<span class="number">1</span> == <span class="number">1</span>),</span><br><span class="line">        () -&gt; assertFalse(<span class="keyword">true</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 assertAll 可以进行多次断言，并且即使某个断言失败，仍然会往下执行。</p>
<p>assertAll 的第一个参数类似于上面说的 message 参数，在断言失败时会显示。</p>
<h2 id="assertThrows-方法"><a href="#assertThrows-方法" class="headerlink" title="assertThrows 方法"></a>assertThrows 方法</h2><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertThrows(ArithmeticException.class, () -&gt; &#123;<span class="keyword">float</span> a = <span class="number">3</span> / <span class="number">0</span>;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用于测试是否抛出指定的异常，如果抛出，测试通过。</p>
<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><p>当满足前置条件时才执行真正的测试代码，前置条件是 org.junit.jupiter.api.Assumptions 中的静态方法。</p>
<h2 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testOnlyFriday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime time = LocalDateTime.now();</span><br><span class="line">    assumeTrue(time.getDayOfWeek().getValue() == <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">float</span> a = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个示例表示的是：如果今天是星期五，就往下进行测试。</p>
<p>看起来使用断言也可以完成同样的工作，但实际上断言和前置条件是不同的，从测试结果就可以看出来。</p>
<p>如果使用的是断言：断言不满足，测试结束，报告测试不通过。</p>
<p>如果使用的是前置条件：前置条件不满足，测试结束，报告测试被忽略（ignored）。</p>
<h2 id="assumingThat-方法"><a href="#assumingThat-方法" class="headerlink" title="assumingThat 方法"></a>assumingThat 方法</h2><p>假设有这样一个需求：如果不满足前置条件就不执行某个测试，但是剩下的测试还是要执行。那么就要使用 assumingThat 方法了。</p>
<h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testOnlyFriday2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime time = LocalDateTime.now();</span><br><span class="line">    assumingThat(time.getDayOfWeek().getValue() == <span class="number">5</span>, () -&gt; &#123;</span><br><span class="line">        <span class="keyword">float</span> a = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果今天不是星期五，那么就不测试 <code>() -&gt; {float a = 3 / 0;}</code>，剩下的代码（从 <code>int b = 1</code>开始）还是照样执行。</p>
<p>另外，在这个示例中，即便今天不是星期五，最后的报告也是测试通过，而不是被忽略。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了几个 JUnit5 中的注解，还有断言以及前置条件。</p>
<p>要了解更多特性和方法只能去看<a href="https://junit.org/junit5/docs/current/user-guide/" target="_blank" rel="noopener">官方文档</a>。</p>
]]></content>
      
        <categories>
            
            <category> JUnit5 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[IDEA 中使用 JUnit5]]></title>
      <url>/2018/11/articles/IDEA%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20JUnit5/</url>
      <content type="html"><![CDATA[<p>JUnit5 的简单使用。</p>
<a id="more"></a>
<p>JUnit5 是 Java 中单元测试框架。</p>
<p><a href="https://junit.org/junit5/docs/current/user-guide/" target="_blank" rel="noopener">JUnit5 用户指南</a></p>
<p><a href="https://sjyuan.cc/junit5/user-guide-cn/" target="_blank" rel="noopener">JUnit5 用户指南 - 中文版</a></p>
<h1 id="添加-Maven-依赖"><a href="#添加-Maven-依赖" class="headerlink" title="添加 Maven 依赖"></a>添加 Maven 依赖</h1><p>学会如何使用一个框架最好的方法应该是看官方文档，然而即便是中文版我还是看得一脸懵逼。</p>
<p>官方文档的第二部分是<strong>安装</strong>，介绍了 JUnit5 中的依赖关系，但是在这里并没有直接指明在使用的时候应该引入哪些依赖。而是给出了多个示例项目：包括 Maven 和 Gradle 等方式创建的项目，通过这些示例可以看出该引入哪些项目。比如<a href="https://github.com/junit-team/junit5-samples/blob/r5.3.0/junit5-jupiter-starter-maven/pom.xml" target="_blank" rel="noopener">GitHub - pom.xml</a>。</p>
<p>可惜当我把依赖复制过去的时候 IDEA 总是报错：<em>Failed to read artifact descriptor for..</em>，导致我浪费了很多时间。</p>
<p>后面谷歌了一下：<a href="https://stackoverflow.com/questions/6642146/maven-failed-to-read-artifact-descriptor" target="_blank" rel="noopener">解决方法</a>，也就是执行一下 <em>mvn -U clean install</em>。</p>
<p>主要的代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.jupiter.version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">junit.jupiter.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.jupiter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-params<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.jupiter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.jupiter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JUnit5 包含很多个注解，有时候要使用某个注解就要添加特定的依赖。比如要使用 @ParameterizedTest 就要添加 junit-jupiter-params。</p>
<h1 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h1><p>通过 Maven 来使用 JUnit5，那么在创建项目的使用肯定是创建 Maven 项目，所以在 test 文件夹下的 java 文件夹下创建类，然后在类中编写测试方法来测试功能代码。</p>
<p>一个方法之所以是测试方法，是因为它加了注解，比如加了 @Test 的方法。</p>
<p>就像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test1 方法就是一个测试方法，在 IDEA 中可以运行这个方法，并得到测试结果。</p>
<p>需要注意的是 assertEquals() 是一个静态方法，直接写是没有自动提示的，要么通过 <strong>类型.方法名</strong> 的方法调用，要么这样导入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br></pre></td></tr></table></figure>
<h2 id="测试自定义方法"><a href="#测试自定义方法" class="headerlink" title="测试自定义方法"></a>测试自定义方法</h2><p>在 main 文件夹下的 java 文件夹下创建类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JUnitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后为它编写测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="keyword">new</span> JUnitTest().add(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    assertEquals(res, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JUnit5 还有很多注解，比如为测试方法设置参数、重复测试等，这些留着下次再说，这一次先了解最最最基本的使用。</p>
]]></content>
      
        <categories>
            
            <category> JUnit </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[单元测试]]></title>
      <url>/2018/11/articles/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>单元测试概述。</p>
<a id="more"></a>
<h1 id="为什么需要“单元测试”？"><a href="#为什么需要“单元测试”？" class="headerlink" title="为什么需要“单元测试”？"></a>为什么需要“单元测试”？</h1><p>我写的代码还不够多，走的弯路也不够，不知道“单元测试”的好处。但是无数前辈都推崇它，必然有其中的原因。我也有理由相信，编写出好的软件是需要遵循科学的方法的。</p>
<p>我的一些理解是：写功能代码的时候，是站在“如何实现这个功能的角度”，有可能就会忽视一些可能发生的特殊情况。而编写测试代码的时候，就能从“可靠性”、“正确性”的角度看待问题，从而进一步完善程序。</p>
<p>另外，写出来的代码都是要经过测试的，不然怎么知道写的对不对？没学单元测试之前是自己编写代码测试，输出结果，人工判断是否正确。实际上单元测试对于不同的语言对应有不同的框架，JUnit 对应的是 Java，PyUnit 对应 Python，CppUnit 对应 C++，学习响应的知识可以更方便的进行测试。</p>
<h1 id="黑盒测试和白盒测试"><a href="#黑盒测试和白盒测试" class="headerlink" title="黑盒测试和白盒测试"></a>黑盒测试和白盒测试</h1><ul>
<li>黑盒测试：把整个软件看成是一个整体，而且看成是一个黑盒子，谁也看不到盒子里面是什么，只对外提供一些服务。主要是测试这些对外提供的服务的正确性。</li>
<li>白盒测试：此时可以“看到”软件的内部结构，验证内部的方法是否如预期一样。</li>
</ul>
<h1 id="测试的分类"><a href="#测试的分类" class="headerlink" title="测试的分类"></a>测试的分类</h1><h2 id="功能性测试"><a href="#功能性测试" class="headerlink" title="功能性测试"></a>功能性测试</h2><p>对于单人开发而言，最常用的是单元测试（Unit Test）–在最低的功能/参数上验证程序的正确性。还有其他的功能性测试：功能测试、集成测试、场景测试、系统测试等。功能性测试顾名思义是测试是否实现了某些功能。</p>
<h2 id="非功能性测试"><a href="#非功能性测试" class="headerlink" title="非功能性测试"></a>非功能性测试</h2><p>即使软件的基本功能没有问题，但是还需要进行很多的验证。比如验证在高负载的情况下是否正常工作。除此之外，还会验证软件的效能、兼容性、安全性等等。</p>
<h2 id="其他测试"><a href="#其他测试" class="headerlink" title="其他测试"></a>其他测试</h2><p>冒泡测试、回归测试（用以前的测试用例检查新的代码）以及随机进行的测试。</p>
<p><a href="https://mooc.study.163.com/learn/1000003016?tid=2001588001#/learn/content?type=detail&amp;id=2001876067&amp;cid=2001887493" target="_blank" rel="noopener">金老师相关的PPT</a></p>
<h1 id="单元测试的含义"><a href="#单元测试的含义" class="headerlink" title="单元测试的含义"></a>单元测试的含义</h1><p>既然知道单元测试在开发中是有必要的，那么什么是单元测试呢？</p>
<p><strong>单元测试是对类中方法正确性的测试。</strong></p>
<p>上面这句话已经很直白了，不就是测试一个方法对不对吗？</p>
<p>测试一个方法对不对，通常是提供一些原始数据给类中的方法，运行得到结果 A。然后人工或者用其他方法处理原始数据，得到结果 B。最后验证结果 A 和结果 B 是否一致。</p>
<p>这就是单元测试的基本方法，通常我们编写的叫做测试用例：<strong>输入的数据 + 预期的结果 = 测试用例（Test Case）</strong>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>在开发中“单元测试”是必须的</li>
<li>一个合格的软件是需要进行各方面的测试的</li>
<li>单元测试是对类中方法正确性的验证</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[RecyclerView 的简单使用]]></title>
      <url>/2018/11/articles/Android%20RecyclerView%20%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>RecyclerView 控件被推荐用来展示一组数量较多的或者数据频繁改变的数据集。</p>
<a id="more"></a>
<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://developer.android.com/guide/topics/ui/layout/recyclerview#select" target="_blank" rel="noopener">Create a List with RecyclerView</a></p>
<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><p>打开 app module 中的 build.gradle，添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;com.android.support:recyclerview-v7:28.0.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="在布局文件中添加-RecyclerView"><a href="#在布局文件中添加-RecyclerView" class="headerlink" title="在布局文件中添加 RecyclerView"></a>在布局文件中添加 RecyclerView</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/myRecyclerView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"368dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scrollbars</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/toolbar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="在主界面中使用-RecyclerView"><a href="#在主界面中使用-RecyclerView" class="headerlink" title="在主界面中使用 RecyclerView"></a>在主界面中使用 RecyclerView</h1><p>这一步主要是添加布局管理器，以及为 RecyclerView 设置数据集。</p>
<p>设置数据集的方法是新建一个适配器，然后将数据传给适配器，并调用 RecyclerView 的 setAdapter 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView.Adapter mAdapter;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView.LayoutManager mLayoutManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.my_activity);</span><br><span class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.my_recycler_view);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use this setting to improve performance if you know that changes</span></span><br><span class="line">        <span class="comment">// in content do not change the layout size of the RecyclerView</span></span><br><span class="line">        mRecyclerView.setHasFixedSize(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use a linear layout manager</span></span><br><span class="line">        mLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">        mRecyclerView.setLayoutManager(mLayoutManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// specify an adapter (see also next example)</span></span><br><span class="line">        mAdapter = <span class="keyword">new</span> MyAdapter(myDataset);</span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="为列表添加一个适配器"><a href="#为列表添加一个适配器" class="headerlink" title="为列表添加一个适配器"></a>为列表添加一个适配器</h1><p>适配器继承自 RecyclerView.Adapter，泛型指定为这个自定义适配器的内部类：MyAdapter.MyViewHolder。</p>
<p>用一个成员变量 myDataset 引用数据集，通过适配器的构造函数初始化。</p>
<p>MyViewHolder 继承自 RecyclerView.ViewHolder，在其中可以定义我们需要的控件引用。</p>
<p>onCreateViewHolder 这个方法被布局管理器（LaoutManager）调用，返回一个 MyViewHolder 对象。这个 MyViewHolder 的类型必须和 MyAdapter 中内部类的类型一致。</p>
<p>onBindViewHolder 将视图与对象位置的数据进行绑定。</p>
<p>R.layout.my_textview 是自定义布局，新建一个布局文件名字叫做：my_textview.xml，根据需要添加控件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">MyViewHolder</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] myDataset;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(String[] dataset)</span> </span>&#123;</span><br><span class="line">        myDataset = dataset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        TextView v = (TextView) LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.my_textview, parent, <span class="keyword">false</span>);</span><br><span class="line">        MyViewHolder vh = <span class="keyword">new</span> MyViewHolder(v);</span><br><span class="line">        <span class="keyword">return</span> vh;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder myViewHolder, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        myViewHolder.myTextView.setText(myDataset[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myDataset.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> TextView myTextView;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(TextView v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(v);</span><br><span class="line">            myTextView = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/text_view"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"80px"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h1><p>直接修改数据集，然后调用适配器的 notifyDataSetChanged() 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myData[<span class="number">0</span>] = <span class="string">"上传"</span>;</span><br><span class="line">myAdapter.notifyDataSetChanged();</span><br></pre></td></tr></table></figure>
<h1 id="列表中元素的点击事件"><a href="#列表中元素的点击事件" class="headerlink" title="列表中元素的点击事件"></a>列表中元素的点击事件</h1><p>参考的是：[<a href="https://stackoverflow.com/questions/24471109/recyclerview-onclick" target="_blank" rel="noopener">RecyclerView onClick</a>]</p>
<p>关键代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OnClickListener mOnClickListener = <span class="keyword">new</span> MyOnClickListener();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="keyword">final</span> ViewGroup parent, <span class="keyword">final</span> <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    View view = LayoutInflater.from(mContext).inflate(R.layout.myview, parent, <span class="keyword">false</span>);</span><br><span class="line">    view.setOnClickListener(mOnClickListener);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolder(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以及：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(<span class="keyword">final</span> View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> itemPosition = mRecyclerView.getChildLayoutPosition(view);</span><br><span class="line">    String item = mList.get(itemPosition);</span><br><span class="line">    Toast.makeText(mContext, item, Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两个方法是写在自定义适配器类中的，所以 MyAdapter 需要实现 View.OnClickListener 接口。</p>
<p>而在 onClick 方法中需要 RecyclerView 的引用，以及上下文对象，所以适配器的构造方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(String[] dataset, RecyclerView myRecyclerView, Context mcontext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.myRecyclerView = myRecyclerView;</span><br><span class="line">    myDataset = dataset;</span><br><span class="line">    <span class="keyword">this</span>.mcontext = mcontext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 MainActivity 中这样创建适配器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myAdapter = <span class="keyword">new</span> MyAdapter(myData, myRecyclerView, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 下使用 Tarball 安装软件]]></title>
      <url>/2018/09/articles/2018-09-15/</url>
      <content type="html"><![CDATA[<p>使用源码安装软件。<br><a id="more"></a></p>
<h1 id="什么是软件"><a href="#什么是软件" class="headerlink" title="什么是软件"></a>什么是软件</h1><p>在 Windows 下，后缀名为 .exe 的文件就称之为软件。</p>
<p>而在 Linux 下，能被机器执行的文件就可以叫做软件，不过 .sh 文件不是软件，它可以被执行，但本质上，机器执行的还是 bin 目录下 bash 这个软件，.sh 是由 bash 执行的，这有点像录音机和磁带的关系。</p>
<p>电脑上有很多软件，即使你没有装过一个软件，也有很多自带的软件供我们使用。</p>
<p>上次装的 Python 就是一个软件，因为我们可以执行它。</p>
<p>知道了什么是软件，那么软件从何而来呢？答案是从源码而来，如果对C语言有所了解，就容易理解。一个 .c 源文件，编译链接之后就得到一个可执行的文件，也就是软件。</p>
<p>一开始，我们希望实现某个功能，于是使用C语言的语法编写源码，但是机器是看不懂源码的。所以就要使用编译程序进行编译，目的是让机器能看懂我们说的是什么，然后按照我们说的去做。至于链接这一步，是由于我们的程序使用了“其它软件提供的某些函数”，在生成可执行文件之前，需要把这些用到的东西链接起来。最后得到了可以运行的软件。</p>
<h1 id="configure-和-make"><a href="#configure-和-make" class="headerlink" title="configure 和 make"></a>configure 和 make</h1><p>源码变成软件需要经过<strong>编译程序</strong>的编译和链接，而这个编译程序就叫做 gcc，在终端输入：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c a.c</span><br></pre></td></tr></table></figure>
<p>就会运行 gcc 这个软件，gcc 后面的内容时告诉编译程序要编译的是哪个文件。</p>
<p>至于链接：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o a a.o b.o c.o</span><br></pre></td></tr></table></figure>
<p>-o 后面是生成的软件的名字，以及要链接的目标文件，根据实际情况，可能要链接很多个 .o 结尾的文件。</p>
<p>如果每次都要输入一大堆东西，岂不是很麻烦？于是就有了 make 这个工具，创建一个 makefile，然后预先编写好编译和链接的规则，真正编译时只需要一句：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<p>这样是不是方便多了？不过这样还存在问题，不同的 Linux 发行版本里，文件的放置的位置不一样，另外不同机器的硬件环境也不一样，这样一来，预先编写一个通用的 makefile 就不现实。</p>
<p>所以 configure 就是来解决这个问题的，它会根据实际情况来生成 makefile，确保最后得到的软件可以在当前机器上运行。</p>
<h1 id="Tarball-是什么"><a href="#Tarball-是什么" class="headerlink" title="Tarball 是什么"></a>Tarball 是什么</h1><p>其实就是将所有源文件打包之后压缩得到的文件，如果不压缩就会使得下载源码的时间变得更长。</p>
<p>Tarball 的后缀可能是 *.tar.gz、*.tgz 或者 *.tar.bz2 等。</p>
<p>将它解压之后就会得到：</p>
<ul>
<li>源码</li>
<li>检测程序文件（也就是上面说的 configure 了）</li>
<li>本软件的介绍和安装说明</li>
</ul>
<h1 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h1><ul>
<li>下载 Tarball</li>
<li>解压 Tarball（建议解压到 /usr/local/src 目录下）</li>
<li>进入解压目录，执行 configure 脚本，生成 makefile</li>
<li>执行 make 进行编译</li>
<li>执行 make install 进行安装（就是将编译好的软件复制到指定目录）</li>
</ul>
<p>这样安装的前提是具有 gcc 和 make 这两个软件。</p>
<p>具体例子看上一篇博客。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟机下 CentOS 7 安装 Python3]]></title>
      <url>/2018/09/articles/2018-09-11-1/</url>
      <content type="html"><![CDATA[<p>尝试以 make 的方式安装软件。<br><a id="more"></a></p>
<h1 id="下载-CentOS-7-镜像"><a href="#下载-CentOS-7-镜像" class="headerlink" title="下载  CentOS 7 镜像"></a>下载  CentOS 7 镜像</h1><p><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">CentOS 7</a></p>
<h1 id="下载-Python-3-7"><a href="#下载-Python-3-7" class="headerlink" title="下载 Python 3.7"></a>下载 Python 3.7</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://www.python.org/ftp/python/3.7.0/</span><br></pre></td></tr></table></figure>
<h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">tar -zvxf ~/Python3.7.0.tgz</span><br></pre></td></tr></table></figure>
<h1 id="生成-makefile"><a href="#生成-makefile" class="headerlink" title="生成 makefile"></a>生成 makefile</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/python3</span><br></pre></td></tr></table></figure>
<p>这一步是根据机器配置生成 makefile 文件，–prefix 是指定等下软件安装路径。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make clean;</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h1 id="添加到-PATH"><a href="#添加到-PATH" class="headerlink" title="添加到 PATH"></a>添加到 PATH</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>
<p>在文件末尾添加：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$&#123;PATH&#125;:/usr/local/python3</span><br></pre></td></tr></table></figure>
<p>保存退出之后，加载配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. /etc/profile</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3</span><br></pre></td></tr></table></figure>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="CentOS-无法上网"><a href="#CentOS-无法上网" class="headerlink" title="CentOS 无法上网"></a>CentOS 无法上网</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/networdk-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>
<p>将 onboot 从 no 改为 yes。</p>
<h2 id="gcc-未安装"><a href="#gcc-未安装" class="headerlink" title="gcc 未安装"></a>gcc 未安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ kernel-dervel</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 2 整合 editor.md]]></title>
      <url>/2018/08/articles/2018-08-14/</url>
      <content type="html"><![CDATA[<p>在线的 markdown 编辑器。<br><a id="more"></a><br><a href="https://pandao.github.io/editor.md/" target="_blank" rel="noopener">editor.md</a> 是一款开源的在线 markdown 编辑器，多的不多说，反正就是好用。</p>
<p>对于一个博客系统，一个好用的编辑器是很重要的。今天下午折腾了很久，终于知道怎么用了。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="阅读前提："><a href="#阅读前提：" class="headerlink" title="阅读前提："></a>阅读前提：</h2><ul>
<li>会使用 IDEA 创建 Spring Boot 项目</li>
<li>了解 thymeleaf 的简单使用</li>
</ul>
<p>本文将介绍如何在 Spring Boot 中整合 editor.md，将要实现的功能也很简单，就是启动 Spring Boot 应用之后，访问 127.0.0.1/edit 可以使用编辑器。</p>
<p><img src="https://wx2.sinaimg.cn/mw690/0065Ozb6gy1fu9mh6wifmj311w0hm0tg.jpg" alt></p>
<p>点击「预览」可以将输入的内容提交到后端，后端也没有保存到数据库而是直接返回 HTML 页面，最后得到这样的效果。</p>
<p><img src="https://wx3.sinaimg.cn/mw690/0065Ozb6gy1fu9mh6w578j311y0hkt8r.jpg" alt></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>虽然说这个项目不复杂，但是的确耗费了我很多的时间，原因就是因为不理解其中的执行顺序。</p>
<p>先说这个 editor.md，它的在线编辑功能应该是由 css 和 js 完成的，所以想要在我们的项目中使用这个编辑器，实际上就是要新建一个 html 文档，然后引用它提供的 css 和 js。（由于路径问题，以及对它的不理解，导致了我差一点放弃了。）</p>
<p>假设我们已经建好了一个 html 文档，并成功的引入了所需要的文件，达到了在线编辑的功能。那么接下来就是将数据提交到后台，此时需要一个 form 表单，将我们输入的内容提交到后台。注意这里是提交的是我们输入的那些文字，而不是 editor.md 帮我们转换之后的内容。</p>
<p>一开始我还在想，提交到后台之后怎么存储？下一次怎么展示出来？实际上，存储的就是原始的 markdown 格式的文字，展示的时候也是这部分内容，只不过给用户看的时候，再一次在 css 和 js 的作用下，展示出好看的样式。</p>
<h1 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h1><ul>
<li>创建 Spring Boot 项目</li>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加配置</li>
</ul>
<p>最后那个是配置静态地址，是可以配置多个的。作用是：当访问 127.0.0.1/css/style.css 这个文件的时候，会在 templates 目录下寻找这个文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># thymeleaf</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line"></span><br><span class="line">spring.resources.static-locations=classpath:/templates/</span><br></pre></td></tr></table></figure>
<h1 id="下载-editor-md"><a href="#下载-editor-md" class="headerlink" title="下载 editor.md"></a>下载 editor.md</h1><p><a href="https://github.com/pandao/editor.md" target="_blank" rel="noopener">下载地址</a></p>
<ul>
<li>下载之后将文件夹的内容复制到项目中的 templates 目录下</li>
</ul>
<p><img src="https://wx3.sinaimg.cn/mw690/0065Ozb6gy1fu9mk6b2bkj308v0e13ym.jpg" alt></p>
<h1 id="新建-simple-html"><a href="#新建-simple-html" class="headerlink" title="新建 simple.html"></a>新建 simple.html</h1><p>这个页面就是在线编辑的页面。</p>
<ul>
<li>删除 examples 目录下的 html 文件（还有其他文件可以删除，有待测试）</li>
<li>在 examples 下新建一个 simple.html，并编辑，代码如下</li>
<li>需要注意的地方：引入 css、js 以及 form 表单</li>
<li>引入 css 和 js 是为了实现在线编辑的功能，form 表单是为了将内容提交到后台</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Simple example - Editor.md examples<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--关键代码：引入 css 代码，路径一定要正确--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/examples/css/style.css&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/editormd.css&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"https://pandao.github.io/editor.md/favicon.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"layout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--关键代码：form 表格，不然没法提交--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/preview"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"预览"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--通过 textarea 标签的 name 值，在后台取到我们输入的内容。--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"editormd"</span> <span class="attr">id</span>=<span class="string">"test-editormd"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"editormd-markdown-textarea"</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--关键代码：引入 js。顺序和路径都要注意。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"examples/js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/editormd.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">			var testEditor;</span></span><br><span class="line"><span class="undefined">            // 这里的 test-editormd 与上面 div 的 id 相对应</span></span><br><span class="line"><span class="undefined">            // 所有的名字尽量不要改，免得出错</span></span><br><span class="line"><span class="undefined">            $(function() &#123;</span></span><br><span class="line"><span class="undefined">                testEditor = editormd("test-editormd", &#123;</span></span><br><span class="line"><span class="undefined">                    width   : "90%",</span></span><br><span class="line"><span class="undefined">                    height  : 640,</span></span><br><span class="line"><span class="undefined">                    syncScrolling : "single",</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h1><ul>
<li>新建一个 Controller，映射到上面这个 html 文件，如果不出意外的话访问 127.0.0.1:8080/edit 就可以在线编辑了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/edit"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/examples/simple"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>上面表单提交的地址是 /preview，所以还需要创建一个接口，这个接口将接收传递过来的文本</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/edit"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/examples/simple"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/preview"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">preview</span><span class="params">(String text, ModelMap map)</span> </span>&#123;</span><br><span class="line">        map.addAttribute(<span class="string">"text"</span>, text);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"preview"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="新建-preview-html"><a href="#新建-preview-html" class="headerlink" title="新建 preview.html"></a>新建 preview.html</h1><ul>
<li>在 templates 目录下新建 preview.html</li>
<li>这里就是将文字传递过来，并由 editor.md 替我们转换</li>
<li>关键点是引入 css 和 js，以及如何使用传递过来的文字</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>预览<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/editormd.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/editormd.preview.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"examples/js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/marked.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/prettify.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"editormd.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"doc-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;text&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var testEditor;</span></span><br><span class="line"><span class="undefined">    $(function () &#123;</span></span><br><span class="line"><span class="undefined">        testEditor = editormd.markdownToHTML("doc-content", &#123;</span></span><br><span class="line"><span class="undefined">            htmlDecode: "style,script,iframe",</span></span><br><span class="line"><span class="undefined">            taskList: true,</span></span><br><span class="line"><span class="undefined">            tex: true, // 默认不解析</span></span><br><span class="line"><span class="undefined">            flowChart: true, // 默认不解析</span></span><br><span class="line"><span class="undefined">            sequenceDiagram: true, // 默认不解析</span></span><br><span class="line"><span class="undefined">            codeFold: true,</span></span><br><span class="line"><span class="undefined">        &#125;);&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>白天折腾了一个下午，晚上为了写这篇博客又折腾了很久，文章还有很多地方说得不清楚，我已经尽力。</p>
<p>目前已知的不足：</p>
<ul>
<li>thymeleaf 的路径问题，导致文件位置不敢随便改</li>
<li>不知道那些文件是可以删除的，导致添加了很多没有到的文件</li>
<li>不清楚 editor.md 的配置，像如何添加表情</li>
<li>…</li>
</ul>
<p>勉强会用，但是真正运用到项目中，可能还要踩很多坑。</p>
<p><a href="https://blog.csdn.net/zhulier1124/article/details/80242300" target="_blank" rel="noopener">拓展阅读</a></p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 2 整合 Spring Security]]></title>
      <url>/2018/08/articles/2018-08-12/</url>
      <content type="html"><![CDATA[<p>想用 Spring Boot 做一个博客，一个登录功能就把我安排得明明白白。<br><a id="more"></a></p>
<p>发现别人的登录功能是用 Spring Security 实现的，但是我并没有找到合适的教程。一会儿跟着视频写，一会儿照着别人的文章敲，折腾了半天，虽说实现了登录和退出，但总感觉自己是在闭门造车。</p>
<h1 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h1><ul>
<li>首次访问提示未登录</li>
</ul>
<p><img src="https://wx4.sinaimg.cn/mw690/0065Ozb6gy1fu72xfmvs6j30e305aglv.jpg" alt></p>
<ul>
<li>登录之后显示用户身份（用户的身份包括：USER、ADMIN）</li>
</ul>
<p><img src="https://wx2.sinaimg.cn/mw690/0065Ozb6gy1fu72xfmbswj30dy07r3yw.jpg" alt></p>
<ul>
<li>另外如果没有登录的话，是不能进入后台管理页面（/admin）的</li>
</ul>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><ul>
<li>工具：<ul>
<li>JDK1.8</li>
<li>IDEA</li>
</ul>
</li>
</ul>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ul>
<li>第一个依赖是每个项目都需要的，就不多说了，多了我也不会。</li>
<li>第二、三个依赖是关于 Spring Security 的，下面是这两个包的官方说明。</li>
</ul>
<blockquote>
<h4 id="Web-spring-security-web-jar"><a href="#Web-spring-security-web-jar" class="headerlink" title="Web - spring-security-web.jar"></a>Web - spring-security-web.jar</h4><p>Contains filters and related web-security infrastructure code. Anything with a servlet API dependency. You’ll need it if you require Spring Security web authentication services and URL-based access-control. The main package is <code>org.springframework.security.web</code>.</p>
<h4 id="Config-spring-security-config-jar"><a href="#Config-spring-security-config-jar" class="headerlink" title="Config - spring-security-config.jar"></a>Config - spring-security-config.jar</h4><p>Contains the security namespace parsing code &amp; Java configuration code. You need it if you are using the Spring Security XML namespace for configuration or Spring Security’s Java Configuration support. The main package is <code>org.springframework.security.config</code>. None of the classes are intended for direct use in an application.</p>
</blockquote>
<ul>
<li>第四个依赖我也不了解，但是如果不加这个依赖那么就不能在 HTML 根据登录状态显示指定的内容。（下面会讲如何显示指定内容的）</li>
<li>最后一个依赖的功能是向浏览器返回一个 HTML 页面。当然了，它还有其他功能，我还没用到而已。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>修改端口以及 thymeleaf 相关配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br><span class="line"></span><br><span class="line">#开发时关闭缓存,不然没法看到实时页面</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.mode=HTML5</span><br><span class="line">#前缀</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">#编码</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line">#类型</span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html</span><br><span class="line">#名称的后缀</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br></pre></td></tr></table></figure>
<h2 id="新建配置类"><a href="#新建配置类" class="headerlink" title="新建配置类"></a>新建配置类</h2><ul>
<li>新建一个 config 文件夹，然后新建一个类。</li>
<li>这个类继承 WebSecurityConfigurerAdapter 类，并覆盖它的两个方法，方法的作用已经写有注释了。</li>
</ul>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>理解一下代码的含义，比如哪些是需要登录才能访问的接口。</li>
<li>根据下面的代码，当需要访问权限时，会自动跳转到 127.0.0.1/login 路径下，所以在 Controller 中需要添加 login 接口，使其跳转到登录页面。</li>
<li>登录界面提交的路径同样是 127.0.0.1/login，也就是说登录表单的 action 值为 /login。</li>
<li>登录请求提交之后，Spring Security 会自动为我们处理，如果登录成功返回上一级页面，如果失败跳转到自定义的错误页面。（这里还有个需要注意的点，后面讲 login.html 的时候会讲。）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> diaolizhi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2018/8/12 16:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置哪些地址可以访问，哪些需要特殊的身份。</span></span><br><span class="line"><span class="comment">     * 指定了哪个是登录接口，已经登录失败时跳转的地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"USER"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line"><span class="comment">//                loginPage 既是需要验证时自动跳转的接口，也是接收验证信息的接口</span></span><br><span class="line">                .loginPage(<span class="string">"/login"</span>).failureUrl(<span class="string">"/login-error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Pbkdf2PasswordEncoder encoder = <span class="keyword">new</span> Pbkdf2PasswordEncoder();</span><br><span class="line">        String password = encoder.encode(<span class="string">"admin"</span>);</span><br><span class="line">        auth</span><br><span class="line">                .inMemoryAuthentication()</span><br><span class="line">                .passwordEncoder(encoder)</span><br><span class="line">                .withUser(<span class="string">"admin"</span>).password(password).roles(<span class="string">"USER"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="新建-Controller-类"><a href="#新建-Controller-类" class="headerlink" title="新建 Controller 类"></a>新建 Controller 类</h2><p>定义 admin、login 和 login-error 接口。</p>
<p>由于上面的配置类，所以未登录的情况下可以访问 / 接口，但是不能访问 /admin。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> diaolizhi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2018/8/12 16:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/admin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/admin/index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login-error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login_error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login-error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="新建-html-页面"><a href="#新建-html-页面" class="headerlink" title="新建 html 页面"></a>新建 html 页面</h2><p>先理一下思路：</p>
<ul>
<li>进来先访问<strong>首页</strong></li>
<li>点击登录或者访问<strong>后台管理页面</strong>将跳转到<strong>登录界面</strong></li>
<li>已经在配置类中添加了用户信息，所以 Spring Security 将会为我们处理登录请求</li>
<li>登录成功，跳转回上一页</li>
<li>失败则跳转到<strong>失败页面</strong></li>
</ul>
<p>所以我们需要新建四个页面。</p>
<h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><h4 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span><br></pre></td></tr></table></figure>
<ul>
<li>上面这一句定义了一个命名空间，由此可以获取到用户的相关信息，比如是否登录。更具体的用法可以去谷歌搜索。</li>
<li>注意下面 form 表单的 action 的写法，一定要这样写，不然就会出错。</li>
</ul>
<p>templates 目录下的 index.html 代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>欢迎进入首页<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"info"</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>您已登录，已进入后台管理页面。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/admin"</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>身份<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">sec:authentication</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"退出登录"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">sec:authorize</span>=<span class="string">"isAnonymous()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>您尚未登录，点击下方链接登录。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="后台管理页面"><a href="#后台管理页面" class="headerlink" title="后台管理页面"></a>后台管理页面</h3><p>这个文件就没什么需要注意的了。</p>
<p>在 templates 目录下新建一个 admin 目录，再新建一个 index.html 文件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>后台管理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>后台管理页面。<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="登录失败页面"><a href="#登录失败页面" class="headerlink" title="登录失败页面"></a>登录失败页面</h3><p>这个文件也没什么需要注意的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录失败<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>登录失败，用户名或密码错误。<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>返回首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span>重新登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><p>这个文件有一点非常需要注意，就是 action 那里，本以为两种写法没有什么区别，但是就是因为这里导致我花了很多时间。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下面这里不能直接 action="/login"，因为那样的话，验证成功之后是不会自动跳转的。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lable</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lable</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>很多东西只是会用一点点，却不知道它真正的用途是什么，也不知道还有那些用法，我还需要很长时间的学习。</p>
<p>总说网上学习资源多，但是有时候我真找不到我想要的，不知道是我找不到还是真的就没有。</p>
]]></content>
      
        <categories>
            
            <category> Spring Boot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Security </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分享 137 个软件和注册机]]></title>
      <url>/2018/08/articles/%E5%88%86%E4%BA%AB%20137%20%E4%B8%AA%E8%BD%AF%E4%BB%B6%E6%B3%A8%E5%86%8C%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>137 个软件和注册机，或许有你需要的。<br><a id="more"></a></p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>软件分享给大家，大家根据需要下载。看到压缩包里的广告请忽略掉，因为广告里的东西是实在是没什么用，比如 2000G IT 视频，看上去很多，但是真的有用吗？视频里的内容是否已经过时了？是否适合自己当前的水平？</p>
<p>它所有的软件和注册机都在这里，其它资源没必要在意了。</p>
<p>这 137 个软件和注册机当中，我只用到了：SQLyog、IntelliJ IDEA、IDM，亲测都是可用的。</p>
<p>希望这些软件能对大家有所帮助。</p>
<h1 id="直入主题"><a href="#直入主题" class="headerlink" title="直入主题"></a>直入主题</h1><h2 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h2><p>这个<a href="http://www.yishimei123.com/go/soft_list.txt" target="_blank" rel="noopener">链接</a>里面列出了所有的软件和破解教程。</p>
<h2 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h2><p>我已经将<strong>所有资源</strong>保存到一个文件夹当中，方便大家保存：</p>
<blockquote>
<p>链接: <a href="https://pan.baidu.com/s/1q81SNSPAvj2LQxfu9IC3Zg" target="_blank" rel="noopener">https://pan.baidu.com/s/1q81SNSPAvj2LQxfu9IC3Zg</a> 密码: 73wc</p>
</blockquote>
<p>如有遗漏，或者只想保存自己当前需要的软件，请在下面这段文本中查找：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">微软msdn原版windows系统镜像和office下载地址 http://www.yishimei123.com/network/290.html</span><br><span class="line">激活工具：windows10、8、7、office2016/2013/2010 http://www.yishimei123.com/network/319.html</span><br><span class="line">win7专用激活工具 链接: https://pan.baidu.com/s/1kV1PaR1 密码: pedc</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Adobe photoshop CC 2014-2018+注册机 链接: https://pan.baidu.com/s/1bptswJd 密码: y8xy</span><br><span class="line">Adobe Acrobat Pro DC 2018+注册机 链接: https://pan.baidu.com/s/1jHBgSwm 密码: wrat</span><br><span class="line">Adobe Acrobat DC Pro 2015、2017+注册机 链接: https://pan.baidu.com/s/1geFokkb 密码: bc9u</span><br><span class="line">Adobe After Effects CC 2015、2018+注册机 链接: https://pan.baidu.com/s/1pLE7ZaN 密码: ezp7</span><br><span class="line">Adobe Audition CC 2018中文版+注册机 链接: https://pan.baidu.com/s/1eSVqaGi 密码: ngmx</span><br><span class="line">Adobe Dreamweaver CC 2018中文版+注册机 链接: https://pan.baidu.com/s/1mioqKg4 密码: 89a8</span><br><span class="line">Adobe Illustrator CC 2014、2017+注册机 链接: https://pan.baidu.com/s/1dEUluyX 密码: bp9d</span><br><span class="line">Adobe Lightroom CC 2015中文版+注册机 链接: https://pan.baidu.com/s/1qXMx5Q8 密码: rja8</span><br><span class="line">Adobe Lightroom Classic CC 7.0中文版+注册机 链接: https://pan.baidu.com/s/1nv0zjux 密码: 9yrs</span><br><span class="line">Adobe Premiere Pro CC 2014+注册机 链接: https://pan.baidu.com/s/1nuPl31f 密码: ttf4</span><br><span class="line">Adobe Premiere Pro CC 2018中文版+注册机 链接: https://pan.baidu.com/s/1eSLCdbG 密码: x3fe</span><br><span class="line">Adobe InDesign CC 2018中文版+注册机 链接: https://pan.baidu.com/s/1dFZvZrF 密码: 7uh9</span><br><span class="line">Adobe清理神器Creative_Cloud_Cleaner_Tool 链接: https://pan.baidu.com/s/1o7GvUMe 密码: bsxx</span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Autodesk AutoCAD 2004-2018中文版+注册机 链接: https://pan.baidu.com/s/1mi22Wbu 密码: swfa</span><br><span class="line">Autodesk 3dsmax 2014+注册机 链接: https://pan.baidu.com/s/1mi3jawK 密码: bub8</span><br><span class="line">Autodesk Inventor 2015、2016+注册机 链接: https://pan.baidu.com/s/1pKNLsLX 密码: dpca</span><br><span class="line">Autodesk Simulation CFD 2016、2017+注册机 链接: https://pan.baidu.com/s/1hsy71SK 密码: fa52</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Abbyy FineReader 12 Corporate中文版+注册激活文件 链接: https://pan.baidu.com/s/12t29hS79Iv0b23R09lXgBQ 密码: 8ry8</span><br><span class="line">ABBYY PDF Transformer+ 12.0.104.225中文版+注册激活文件 链接: https://pan.baidu.com/s/15BKpp9YIaFM7Nt9nZwomRg 密码: b3pa</span><br><span class="line">AnyBizSoft_PDF_Converter+注册激活 链接: https://pan.baidu.com/s/1o8zbljG 密码: 2kyd</span><br><span class="line">ABViewer Enterprise 12.0.0.19中文版+注册文件下载 链接: https://pan.baidu.com/s/1b8apT8 密码: 484r</span><br><span class="line">Acme CAD Converter 2018中文版+注册码 链接: https://pan.baidu.com/s/1ecyRNo 密码: rhnr</span><br><span class="line">Acronis True Image 2018中文版+注册机 链接: https://pan.baidu.com/s/1dFpkdWH 密码: nsin</span><br><span class="line">AIDA64 Extreme 5.95.4500中文版+序列号下载地址 链接: https://pan.baidu.com/s/1i6qOwEL 密码: 6i5k</span><br><span class="line">AOMEI OneKey Recovery Professional Edition v1.6.1+注册激活 链接: https://pan.baidu.com/s/1kVahkRd 密码: xtg5</span><br><span class="line">Advanced System Optimizer 3.9.3645中文版+注册密钥 链接：https://pan.baidu.com/s/1vmtq--aWoSjL3_DfxaFY6w 密码：4y5j</span><br><span class="line">Advanced SystemCare 10.3 Pro中文版+注册码 链接: https://pan.baidu.com/s/1slPZW9R 密码: ar9a</span><br><span class="line">AVG PC TuneUp 2018中文版+产品密钥 链接: https://pan.baidu.com/s/1aS5UkEdJPsBb4R2k7dPJVA 密码: ddyt</span><br><span class="line">ACDSee Pro 8+注册机 链接: https://pan.baidu.com/s/1c1T7zsk 密码: jrii</span><br><span class="line">ACDSee ultimate 9+注册机 链接: https://pan.baidu.com/s/1kVvd8Zd 密码: 5n2x</span><br><span class="line">ACDSee ultimate pro 10.0+注册机 链接: https://pan.baidu.com/s/1kVf44b9 密码: gpnx</span><br><span class="line">Ansys Products 18.2 + Crack 链接: https://pan.baidu.com/s/1jKpH24m 密码: 52hb</span><br><span class="line">ActivePresenter Pro v7.1.0中文版+注册文件 链接: https://pan.baidu.com/s/1smAlWsd 密码: akd4</span><br><span class="line">Advanced Host Monitor Enterprise 11.24安装包+注册机 链接: https://pan.baidu.com/s/1xOB8RUPDb5dYTjTD2Hg8rg 密码: 39xf</span><br><span class="line">-----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">BarTender Enterprise Automation 2016 R6 v11.0.6.3141+注册机 链接: https://pan.baidu.com/s/1f7U-HtMeM1aquCS4-_dlHw 密码: 3b3a</span><br><span class="line">Bitsum Process Lasso Pro 9.0.0.440中文版+注册机下载 链接: https://pan.baidu.com/s/1VCJlJlFWv4bdneE1HsDuzA 密码: w2bf</span><br><span class="line">Bandicam v4.1.2.1385中文版+注册机 链接: https://pan.baidu.com/s/1eW9zyiYFeXC_vOAt6V16VA 密码: nxg1</span><br><span class="line">Beyond Compare 4.2.4 Build 22795中文版+注册机 链接: https://pan.baidu.com/s/1hm_m7ak2GgBMRvL-ayxMCg 密码: mf49</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">CINEMA 4D R18.057 Studio中文版+正版序列号 链接: https://pan.baidu.com/s/1qYQdkhY 密码: us8g</span><br><span class="line">Color Efex Pro 4.0+注册机 链接: https://pan.baidu.com/s/1cHGzvC 密码: 6dn3</span><br><span class="line">Cyberlink PowerDVD Ultra v17.0.2406.62中文版+注册文件 链接：https://pan.baidu.com/s/1o8zJYuY 密码：h1p7</span><br><span class="line">COMSOL Multiphysics 5.3a v5.3.1.229中文版+注册许可证 链接: https://pan.baidu.com/s/1hsTlIhI 密码: 5ahe</span><br><span class="line">CCleaner v5.45 简体中文版+注册机序列号下载 链接: https://pan.baidu.com/s/1W1AgJYn0NcmnYDQNuQUAGQ 密码: i5ui</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Duplicate Cleaner Pro 4.05中文版+许可证密钥 链接: https://pan.baidu.com/s/1jHI5ZoU 密码: 8xni</span><br><span class="line">Duplicate File Finder Plus v9.0中文版+许可证密钥 链接: https://pan.baidu.com/s/1nvXJTP3 密码: q34m</span><br><span class="line">DU Meter 7.30中文版+注册机 链接：https://pan.baidu.com/s/1htwrIFq 密码：mgj8</span><br><span class="line">DNAMAN 9+注册文件下载地址 链接: https://pan.baidu.com/s/1knO-gnjFg3NNlUsuChdsoA 密码: 76xm</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Edraw Max v9.1中文版+注册文件 链接：https://pan.baidu.com/s/1vZOaD3bRLUzjUxQDUkbenA 密码：euu6</span><br><span class="line">EaseUS Data Recovery Wizard Professional 11.8中文版+注册码 链接: https://pan.baidu.com/s/1o8cHjOA 密码: tni4</span><br><span class="line">EasyRecovery 11.5.0.3企业中文版+注册机 链接：https://pan.baidu.com/s/12_3-YwtzoMv75Tg7SXt72g 密码：ic7p</span><br><span class="line">Endnote X8+正版许可文件注册激活 链接: https://pan.baidu.com/s/1o85MSmY 密码: 8f4q</span><br><span class="line">ESET NOD32 Antivirus v11.0.159.0+许可证密钥 链接: https://pan.baidu.com/s/1qXTR85m 密码: gxrd</span><br><span class="line">Emurasoft EmEditor Professional 17.5.0中文版+注册机 链接：https://pan.baidu.com/s/1jKclqnk 密码：gjkt</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">FileRecovery 2015简体中文企业版+注册机 链接: https://pan.baidu.com/s/1hsEMHxE 密码: f2nj</span><br><span class="line">Foxit PhantomPDF Business v9.0.1.1049中文版+注册激活文件 链接: https://pan.baidu.com/s/1-iELcyl2RshT6l9trYVEBA 密码: 6tdh</span><br><span class="line">FlashFXP 5.4中文版+注册机下载地址 链接: https://pan.baidu.com/s/1544s0cyRiKVz0fZkydrgTA 密码: z67x</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">GoodSync Enterprise v10.6.0.0中文版+注册文件 链接: https://pan.baidu.com/s/1c2Tr7o8 密码: 3wes</span><br><span class="line">GoodSync Enterprise v10.7.8.8中文版+注册文件下载 链接: https://pan.baidu.com/s/1i5TPgNF 密码: 8jpe</span><br><span class="line">GoodSync Enterprise 10.8.4.4中文版+注册机下载 链接：https://pan.baidu.com/s/1SLo9RFss5za6aGLJiALdHw 密码：ua6y</span><br><span class="line">GiliSoft Screen Recorder v8.0.0中文版+注册码 链接: https://pan.baidu.com/s/1o8j4wbC 密码: 72kw</span><br><span class="line">GiliSoft File Lock Pro 11.0.0中文版+注册码 链接: https://pan.baidu.com/s/1jIpcCuy 密码: bfjt</span><br><span class="line">GiliSoft USB Lock 6.6.0中文版+注册码 链接: https://pan.baidu.com/s/1djA9C6 密码: viyy</span><br><span class="line">GraphPad Prism 7.04+注册机下载地址 链接: https://pan.baidu.com/s/1jkRDn-s4Iz_OE0xkYtFnrg 密码: iiwi</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Honeycam 2.03中文版+注册机下载 链接: https://pan.baidu.com/s/1oArAqwU 密码: j536</span><br><span class="line">Hard Disk Sentinel Pro 5.01中文版+注册机 链接：https://pan.baidu.com/s/1jJiGGOQ 密码：ggo3</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Iobit Uninstaller Pro中文版+破解文件 链接: https://pan.baidu.com/s/1slG5ZoL 密码: nuhd</span><br><span class="line">IObit Uninstaller 7.4 Pro中文版+注册文件 链接: https://pan.baidu.com/s/1R1eE-PciDIKH7Xq9QUq-1A 密码: wjfm</span><br><span class="line">IDM 6.30 Build 8中文版+注册机 链接: https://pan.baidu.com/s/1OFDLO7q5iZJKieeeOaY7Pw 密码: 5vgj</span><br><span class="line">IDM 6.31 Build 3中文版+注册机 链接: https://pan.baidu.com/s/1qjJTRsnSTzjFArA5kQuVrQ 密码: sesr</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">JetBrains IntelliJ IDEA Ultimate 2017.3安装包+注册文件 链接: https://pan.baidu.com/s/1pMuaXez 密码: gjia</span><br><span class="line">JetBrains IntelliJ IDEA Ultimate 2018.1+注册文件 链接: https://pan.baidu.com/s/1Lu0LRm788qxEwTOhkUXuhg 密码: vtwk</span><br><span class="line">------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Leawo Video Converter Ultimate 7.8.0.0中文版+注册文件 链接: https://pan.baidu.com/s/1dFyaObJ 密码: prj1</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Maple 2017中文版+注册激活文件 链接: https://pan.baidu.com/s/1o8KaoFS 密码: cp2r</span><br><span class="line">MATLAB R2015a中文版+有效注册激活 链接: https://pan.baidu.com/s/1eRFqtaU 密码: gtwj</span><br><span class="line">MATLAB 2018.1中文版+有效注册激活 链接：https://pan.baidu.com/s/1H5pTuZEW3mMeeCKIegyk2g 密码：dzfn</span><br><span class="line">MathWorks MATLAB R2017b中文版+注册文件 链接: https://pan.baidu.com/s/1e8IJ8OwF5e9Yo0vugOwdww 密码: 3bta</span><br><span class="line">MathWorks MATLAB R2018a中文版+注册文件 链接: https://pan.baidu.com/s/1gY9yR4KGrEVl-d_oPx_0oQ 密码: s566</span><br><span class="line">Mindjet MindManager 2018中文版+注册机 链接: https://pan.baidu.com/s/1Gaw5OQzSOF7X01pvtwiONg 密码: jdg2</span><br><span class="line">MathType 6.9d(76)安装包+产品密钥注册机 链接: https://pan.baidu.com/s/1MyeeWySlRGCflG_n04iWgw 密码: z71z</span><br><span class="line">Master PDF Editor 4.3.89中文版+注册机 链接: https://pan.baidu.com/s/1JX1pjB3SXdPtTFLtpfibuQ 密码: wnyq</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Navicat for MySQL 12.0.11中文版+注册激活 链接: https://pan.baidu.com/s/1qYWgWQK 密码: b6uq</span><br><span class="line">Navicat 12.0.23 for SQL Server企业中文版+注册激活文件 链接: https://pan.baidu.com/s/1ggC7LT5 密码: wjf2</span><br><span class="line">NTLite 1.5.0.5855中文企业注册版 链接: https://pan.baidu.com/s/1snum31N 密码: 9t16</span><br><span class="line">NiceLabel 2017 v17.2.0 Build 1825中文版+注册机 链接: https://pan.baidu.com/s/1sbcsvpJCoiL3HQ8I0KKFZA 密码: e8pb</span><br><span class="line">NetLimiter Pro 4.0.36.0 Enterprise+注册码下载 链接: https://pan.baidu.com/s/1PQmMX6c3AGOabGgBNlYHqg 密码: rrzg</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">OriginPro 2017 SR2中文版+注册机 链接: https://pan.baidu.com/s/1qXOzpQO 密码: qaq3</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Premiumsoft Navicat Premium 12.0.20中文版+注册激活 链接: https://pan.baidu.com/s/1i47elc5 密码: e7dg</span><br><span class="line">PremiumSoft Navicat Premium 12.1.4中文版+注册激活下载 链接: https://pan.baidu.com/s/1MwK1R1aQZlsyyhLrVVSicA 密码: 47ma</span><br><span class="line">PHP Manager for IIS+PHP+MySQL 链接: https://pan.baidu.com/s/1boGczMJ 密码: 1jcb</span><br><span class="line">PDF Shaper Professional 8.3中文版+注册机下载地址 链接: https://pan.baidu.com/s/1TgIXl4w_90NoQpHJp79Ivg 密码: tjnr</span><br><span class="line">PicturesToExe Deluxe 9.0.17+注册机下载地址 链接: https://pan.baidu.com/s/1Ha_CYMbV5fd6EkY1FoLX0w 密码: rf9h</span><br><span class="line">pdfFactory Pro  Server v6.30中文版+序列号下载 链接: https://pan.baidu.com/s/1wFFNh3_AnB2hLaifS1Vgxw 密码: h6iw</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">RescuePRO Deluxe v6.0.1.4中文版+注册机下载地址 链接: https://pan.baidu.com/s/1dECDFFV 密码: 5f1a</span><br><span class="line">Revo Uninstaller Pro v3.2.1中文版+注册机 链接: https://pan.baidu.com/s/14kNw5opB_NmjOyBou-JVlA 密码: 759t</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Shadow Defender v1.4.0.672中文版+注册码下载地址 链接: https://pan.baidu.com/s/1dEIJuOp 密码: 3crj</span><br><span class="line">SolidWorks2014、2015+注册机 链接: https://pan.baidu.com/s/1slhucSP 密码: pphy</span><br><span class="line">SolidWorks 2018 Premium中文版+注册机 链接: https://pan.baidu.com/s/1kXeQKV9 密码: f6vu</span><br><span class="line">Solid PDF Tools v9+注册机 链接: https://pan.baidu.com/s/1o7WBadk 密码: 3mqw</span><br><span class="line">Syncios Professional 6.30中文版+注册机 链接: https://pan.baidu.com/s/1dFSARzr 密码: y6dg</span><br><span class="line">Syncios Data Recovery 1.2.3中文版+注册机 链接: https://pan.baidu.com/s/1uPKdjsQIqLTKaVRMw5EJ0A 密码: 8imm</span><br><span class="line">SimLab Composer v8.2.5中文版+注册文件 链接: https://pan.baidu.com/s/1c3GbVMw 密码: 8477</span><br><span class="line">StartIsBack++ 2.6中文永久免费版 链接: https://pan.baidu.com/s/1eg4ygY 密码: qskm</span><br><span class="line">SoftMaker FlexiPDF 2017中文版+注册机 链接: https://pan.baidu.com/s/1nwjqhvj 密码: yqea</span><br><span class="line">SQLyog Ultimate v12.5.1中文版+证书密钥激活下载 链接: https://pan.baidu.com/s/1QCWcVqK9Xa0kETTD0ZyM5w 密码: axpn</span><br><span class="line">SketchUp Pro 2018 18.0.16975+注册激活文件 链接: https://pan.baidu.com/s/1Dp74DQu91-8w3aa5tY7Jqw 密码: fswk</span><br><span class="line">SmartFTP Enterprise 9.0.2560.0中文版+注册机 链接: https://pan.baidu.com/s/1umIsJU2fWw-1jbQP9XC2rg 密码: y35v</span><br><span class="line">SQLite Expert Professional 5.2.3.312安装包+注册机 链接: https://pan.baidu.com/s/1n_8JAQNNinLGL8iQG2InRw 密码: j2t5</span><br><span class="line">SQL Maestro for MySQL Professional 17.5.0.3+注册文件 链接: https://pan.baidu.com/s/1yOxsMYplKRUjXkCjwDsVSA 密码: dmmj</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Trados 2014、2017中文版+注册许可证 链接: https://pan.baidu.com/s/1jIQnAy6 密码: 6dqg</span><br><span class="line">TamperMonkey插件 链接: https://pan.baidu.com/s/1RMDwoNs5AOzsA79uJ8Es2Q 密码: gd3m</span><br><span class="line">Total Commander 9.10中文版+正版key文件 链接: https://pan.baidu.com/s/1geOcggj 密码: 5bue</span><br><span class="line">Total Commander 9.20中文版+注册激活key文件 链接: https://pan.baidu.com/s/1htE8oGNQZdoQ0mN5MKea7Q 密码: m9up</span><br><span class="line">Total Uninstall Professional v6.21.1.485中文版+注册文件 链接: https://pan.baidu.com/s/1miOQ4Es 密码: k7cs</span><br><span class="line">TeamViewer 13企业中文版+注册机 链接: https://pan.baidu.com/s/1pO79fCYdcC4JcRe20I7lpA 密码: i9px</span><br><span class="line">T-Arch 2014+注册机 链接: https://pan.baidu.com/s/1gfB0M1l 密码: g7f4</span><br><span class="line">The Ultimate PID Checker密钥检测器 链接: https://pan.baidu.com/s/1nv0zjtB 密码: 6avg</span><br><span class="line">Tableau Desktop Pro 2018.1.0中文版+注册文件 链接: https://pan.baidu.com/s/1SjbtHGhqiW03YuTChiyOsg 密码: ibxd</span><br><span class="line">TSR Watermark Image Pro 3.5.9.3中文版+注册授权码下载 链接: https://pan.baidu.com/s/1u6LoPLM12HcO20Gug_l1ig 密码: m6t7</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Unity3D Professional 2017.3.1p1+注册文件 链接: https://pan.baidu.com/s/1efiTS6 密码: hpzt</span><br><span class="line">UltraISO Premium Edition 9.7.1.3519中文版+注册码 链接: https://pan.baidu.com/s/1dfF7GfaaOmZNW_lQNWiOnw 密码: 9w8h</span><br><span class="line">------------------------------------------------------------------------------------------------------------------</span><br><span class="line">VMware Pro 14+许可证密钥生成器 链接: https://pan.baidu.com/s/1o7NNu7g 密码: 7i39</span><br><span class="line">Visual C++ 6.0中文绿色版 链接: https://pan.baidu.com/s/1c145eCC 密码: ejd7</span><br><span class="line">VM虚拟机安装Mac OS X 10.13.4 链接: https://pan.baidu.com/s/1UJxzEO2oSzb6YvsH7lnumQ 密码: aqcv</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Wolfram Mathematica 11.2中文版+注册机 链接: https://pan.baidu.com/s/1ggvBBZ9 密码: k7cm</span><br><span class="line">Wise Care 365 Pro 4.7.6中文版+授权码 链接: https://pan.baidu.com/s/1bp6QYT5 密码: utzc</span><br><span class="line">Wise Care 365 Pro 4.83中文版+注册机 链接: https://pan.baidu.com/s/1sbzlC_XosLQoBZpnSu_4HA 密码: abad</span><br><span class="line">Wise Video Converter Pro 2.3.1.65中文版+注册机 链接: https://pan.baidu.com/s/1nwNRNk9 密码: eg5r</span><br><span class="line">Wondershare PDFelemen 6.3.5.2806中文版+注册文件下载 链接: https://pan.baidu.com/s/1smZSYHB 密码: synq</span><br><span class="line">Wondershare Recoverit 7.0.5.18中文版+注册激活文件下载 链接: https://pan.baidu.com/s/1aP2iG7phe-3YKCDOqrqXrw 密码: w2a6</span><br><span class="line">WinUtilities Professional 15.21中文版+注册机注册码 链接: https://pan.baidu.com/s/1YrEeFxrLxOHM2PL_g3hYkg 密码: azim</span><br><span class="line">WinToUSB Enterprise 3.9中文版+注册机 链接: https://pan.baidu.com/s/1blsvSYSL-paFuewkNfioZA 密码: gxwb</span><br><span class="line">WinToUSB Enterprise 4.1中文版+注册机 链接: https://pan.baidu.com/s/1TbRN4oyVO3GuQoMKvseb8g 密码: 4ubh</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Xshell 5中文免注册版 链接: https://pan.baidu.com/s/1jIksirG 密码: rka9</span><br><span class="line">Xmanager Enterprise 5中文版+产品密钥注册机 链接: https://pan.baidu.com/s/1jKd6osQ 密码: 9mrt</span><br><span class="line">XnView v2.43中文版+注册码 链接: https://pan.baidu.com/s/1slqkOe5 密码: gypr</span><br><span class="line">XMind 8 Pro中文版+注册激活 链接: https://pan.baidu.com/s/1xPS792rJgJppISrPykT_gQ 密码: iud2</span><br><span class="line">XYplorer 18.80中文版+注册机序列号 链接: https://pan.baidu.com/s/1DCW9tITlNUrExFiMzd2Z0A 密码: 7jq7</span><br></pre></td></tr></table></figure>
<h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>资源已经分享完了，下面的内容对大家没有任何帮助，你可以退出去了，除非你好奇我为什么会写这篇文章。</p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>前几天，电脑 CPU 利用率经常是百分之百，我怀疑电脑里还有病毒，所以打算再装一次系统。为什么要说<strong>再装一次</strong>呢，因为放假之前就出现过同样的问题，那一次我把电脑重置了。而且当时因为电脑只有一个盘，所以所有东西都被清空了，到后面想起来的时候，写的代码、记的笔记都已经灰飞烟灭了。</p>
<h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>以前通过 ghost 重装系统，这次看到知乎上说这种方式不安全，所以就用另一种方式。</p>
<p><a href="https://www.zhihu.com/question/23042197/answer/135343543" target="_blank" rel="noopener">重装系统教程</a></p>
<p>这个教程很完整，装的系统也相对干净。问题出在安装的过程中：因为磁盘分区格式不对，根据网上的教程，我又把磁盘清空了…本来吸取了上次的教训，我专门分一个 D 盘用来保存代码和笔记，原以为装系统只会影响 C 盘，就没有另外备份，没想到…真是心如刀割，以后遇到同样的问题，没有笔记，还得去谷歌搜索一遍，想想都觉得心累啊。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>怀着悲伤的心情，装好了系统，而 win10 还需要激活，我先去吾爱破解论坛搜了激活工具但没有找到，在淘宝上看激活码大概要十块钱，然后通过谷歌搜索找到了一个激活工具，因为激活工具带有广告，所以我就进去看了，并购买了网站上提供的软件，利用百度云批量转存工具，保存到自己网盘之后，就有了这篇文章。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>每次想到丢失的笔记和代码，都难免有些悲伤。</p>
<p>从今往后，常用软件保存到百度云或者微云，代码保存到 GitHub，笔记保存到印象或者为知笔记。</p>
]]></content>
      
        <categories>
            
            <category> 资源分享 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 的坐标与依赖]]></title>
      <url>/2018/06/articles/Maven%20%E7%9A%84%E5%9D%90%E6%A0%87%E4%B8%8E%E4%BE%9D%E8%B5%96/</url>
      <content type="html"><![CDATA[<p>书上还有不少东西我看不懂，暂时放着。</p>
<a id="more"></a>
<h1 id="坐标详解"><a href="#坐标详解" class="headerlink" title="坐标详解"></a>坐标详解</h1><p>每一个 Maven 项目都有一个 pom.xml，这个文件中就配置了这个 Maven 项目的 groupId、artifactId、name（给用户看的项目名称，非必须）等等。</p>
<p>groupId、artifactId 和 version 就是一个 Maven 项目的基本坐标，坐标在空间中定位到唯一的一点，也就是说，通过坐标可以找到唯一的 Maven 项目。</p>
<h2 id="groupId"><a href="#groupId" class="headerlink" title="groupId"></a>groupId</h2><p>首先要明确“当前 Maven 项目”和“实际项目”两个概念，实际项目可以是一个完整的网上购物系统，而这个“实际项目”可以包含多个 Maven 项目，没有真正开发过，先记住。</p>
<p>groupId 是在 Maven 项目中配置的，所以<strong>它的含义是：当前 Maven 项目隶属的实际项目。</strong></p>
<p>通常的格式：<strong>公司域名倒序+项目名</strong></p>
<p>比如：com.diaolizhi.projectA</p>
<p>其中的 projectA 就是项目名。</p>
<h2 id="artifactId"><a href="#artifactId" class="headerlink" title="artifactId"></a>artifactId</h2><p>这个元素配置的就是 <strong>Maven 项目的 id</strong>，推荐的做法是使用实际项目名称作为 artifactId 的前缀，比如 projectA-core，加前缀的意义是跟其他的项目进行区分，毕竟其他项目也可能会出现 core 这个名字。</p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p>定义当前 Maven 项目的<strong>版本号</strong>。</p>
<h2 id="packaging"><a href="#packaging" class="headerlink" title="packaging"></a>packaging</h2><p>定义 Maven 项目的打包方式，可以为 jar 或者 war。这个元素是可选的，如果没有定义，默认为 jar。</p>
<h1 id="依赖的配置"><a href="#依赖的配置" class="headerlink" title="依赖的配置"></a>依赖的配置</h1><p>如果项目中需要用到其他的 jar 包，不需要手动导入，只需要在 pom.xml 文件中配置依赖。</p>
<p>配置依赖的格式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>...<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>...<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>...<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>...<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">excluseion</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">excluseion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="groupId、artifactId-和-version"><a href="#groupId、artifactId-和-version" class="headerlink" title="groupId、artifactId 和 version"></a>groupId、artifactId 和 version</h2><p>依赖的基本坐标，Maven 根据坐标才能找到需要的依赖。</p>
<h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>依赖的类型，对应 packaging 元素。大部分情况下，该元素不必声明，默认值为 jar。</p>
<h2 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h2><p>依赖的范围。</p>
<h2 id="optional"><a href="#optional" class="headerlink" title="optional"></a>optional</h2><p>依赖依赖是否可选。</p>
<h2 id="exclusions"><a href="#exclusions" class="headerlink" title="exclusions"></a>exclusions</h2><p>用来排除传递性依赖。</p>
<h1 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h1><p>Maven 在编译主项目时使用一套 classpath，编译和测试时使用一套 classpath，实际运行时又使用另一套 classpath。</p>
<p>依赖范围就是用来说明：添加的依赖要添加到哪些 classpath 中。</p>
<h2 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h2><p>默认配置。在三种 classpath 中都生效。</p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>对于测试 classpath 有效。</p>
<h2 id="provided"><a href="#provided" class="headerlink" title="provided"></a>provided</h2><p>对于编译和测试 classpath 中有效，但是运行项目的时候不用。</p>
<h2 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h2><p>在编译主代码时无效，对于测试和运行 classpath 有效。</p>
<h1 id="传递性依赖"><a href="#传递性依赖" class="headerlink" title="传递性依赖"></a>传递性依赖</h1><p>当前 Maven 项目依赖 projectA，而 projectA 有依赖于 projectB。</p>
<p>只需要在 pom.xml 中添加 projectA 的依赖，Maven 会自动依赖 projectB。</p>
<p>当前项目对 projectA 的依赖范围可能是 compile、test 等等。projectA 对 projectB 的依赖范围也有多种可能，那么问题来了，当前项目对 projectB 的依赖范围是什么呢？</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">compile</th>
<th style="text-align:center">test</th>
<th style="text-align:center">provided</th>
<th style="text-align:center">runtime</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">compile</td>
<td style="text-align:center">compile</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">runtime</td>
</tr>
<tr>
<td style="text-align:center">test</td>
<td style="text-align:center">test</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">test</td>
</tr>
<tr>
<td style="text-align:center">provided</td>
<td style="text-align:center">provided</td>
<td style="text-align:center">-</td>
<td style="text-align:center">provided</td>
<td style="text-align:center">provided</td>
</tr>
<tr>
<td style="text-align:center">runtime</td>
<td style="text-align:center">runtime</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">runtime</td>
</tr>
</tbody>
</table>
<p>左边第一列表示第一直接依赖范围，最上面一行表示第二依赖直接依赖范围，中间的表示传递性依赖范围。</p>
<h1 id="依赖调解"><a href="#依赖调解" class="headerlink" title="依赖调解"></a>依赖调解</h1><p>假设有这样的依赖关系：A-&gt;B-&gt;C-&gt;X(1.0)、A-&gt;D-&gt;X(2.0)。不能把项目 X 引入两次，所以规定：路径最短者优先。1.0 的路径长度为 3，2.0 的路径长度为 2，所以 2.0 会被解析使用。</p>
<p>如果两者路径长度相同，那么哪个依赖先声明就使用哪个。</p>
<h1 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h1><p>假设项目 projectD 依赖了 projectE 和 projectF，并且这两个依赖是可选依赖，也就是说 option 元素内是 true。</p>
<p>那么就算当前项目依赖了 projectD，projectE 和 projectF 也<strong>不会</strong>添加到当前项目，换句话说：可选依赖不会传递。</p>
<p>如果需要用到 projectE，就必须<strong>显式地</strong>声明它的依赖。</p>
<h1 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h1><p>假设添加了 projectB 的依赖，projectB 又依赖于 projectC。</p>
<p>当我想使用另一个版本的 projectC 的时候，就可以使用依赖排除。</p>
<p>排除依赖的方法就是在 exclusion 元素里说明 projectC 的 groupId 和 artifactId，这里只需要这两个元素就足够了。 </p>
<h1 id="归类依赖"><a href="#归类依赖" class="headerlink" title="归类依赖"></a>归类依赖</h1><p>多个依赖版本相同，如果要升级版本，一个一个地改版本号岂不是很麻烦？</p>
<p>为了解决这个问题，可以定义一个 Maven 属性，然后在 version 中使用这个属性。</p>
<p>要升级的时候，只需要改一次。</p>
<p>在 project 元素内定义：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">myapp.version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">myapp.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后这样使用：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;myapp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Maven </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 使用入门]]></title>
      <url>/2018/06/articles/Maven%20%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>如何创建一个 Maven 工程。</p>
<a id="more"></a>
<h1 id="编写-POM"><a href="#编写-POM" class="headerlink" title="编写 POM"></a>编写 POM</h1><ul>
<li>新建一个 hello-world 文件夹</li>
<li>在文件夹下新建一个 pom.xml 文件。这个文件用来定义项目的基本信息。代码如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- The Basics --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.diaolizhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Hello World Project<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="编写主代码"><a href="#编写主代码" class="headerlink" title="编写主代码"></a>编写主代码</h1><p>在 hello-world 文件夹下创建 src/main/java 文件夹，在 java 文件夹下创建 com/diaolizhi/HelloWorld.java 文件，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.diaolizhi.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="keyword">new</span> HelloWorld().sayHello());	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在主目录 hello-world 下打开命令行，运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean compile</span><br></pre></td></tr></table></figure>
<p>这句话先清理输出目录 target/，compile 告诉 Maven 编译项目主代码。</p>
<h1 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h1><p>首先为项目添加依赖，添加之后的 pom.xml 文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- The Basics --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.diaolizhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Hello World Project<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>在 根目录/src/test/java 文件夹下创建 HelloWorldTest.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.diaolizhi.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		HelloWorld helloWorld = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">		String result = helloWorld.sayHello();</span><br><span class="line">		assertEquals(<span class="string">"Hellod World"</span>, result);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：<strong>测试类不用放在固定的包下，直接放在 src/test/java 目录下即可，而且第一行代码 package xx.xx.xxx; 和主类一样。</strong></p>
<h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p>在根目录下运行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean test</span><br></pre></td></tr></table></figure>
<p>执行测试，结果发现有错误。</p>
<blockquote>
<p>由于历史原因，Maven 的核心插件之一——compiler 插件默认只支持编译 Java 1.3，因此需要配置该插件使其支持 Java 5。</p>
</blockquote>
<p>在 pom.xml 中加入如下的代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以成功执行测试了。</p>
<h1 id="打包和运行"><a href="#打包和运行" class="headerlink" title="打包和运行"></a>打包和运行</h1><ul>
<li>单纯地打包，得到的 jar 包位于 target/ 目录下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<ul>
<li>打包并放入本地仓库，以便其他项目使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>
<h2 id="生成可运行的-jar-包"><a href="#生成可运行的-jar-包" class="headerlink" title="生成可运行的 jar 包"></a>生成可运行的 jar 包</h2><p>HelloWorld 类是有一个 main 方法的，默认打包生成的 jar 是不能够直接运行的，因为带有 main 方法的类信息不会添加到 manifest 中。为了生成可执行的 jar 文件，需要借助 maven-shade-plugin，配置该插件如下：</p>
<p>（plugin 元素在 pom.xml 中的 project 下的 build 下的 plugins 标签下）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.diaolizhi.helloworld.HelloWorld<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再次运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>就会自动生成可执行 jar 包，位于 target/ 目录下， original 开头的包是原始的包，另一个才是可执行的。</p>
<p>使用下面的命令执行 jar 包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target\hello-world-1.0-SNAPSHOT.java</span><br></pre></td></tr></table></figure>
<h1 id="使用-Archetype-生成项目骨架"><a href="#使用-Archetype-生成项目骨架" class="headerlink" title="使用 Archetype 生成项目骨架"></a>使用 Archetype 生成项目骨架</h1><p>因为装的是 Maven 3，所以直接运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate</span><br></pre></td></tr></table></figure>
<p>敲两次回车，然后输入 groupId、artifactId、version、package，并按回车确定。</p>
]]></content>
      
        <categories>
            
            <category> Maven </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java Web 入门笔记]]></title>
      <url>/2018/05/articles/Java%20Web%20%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>关于 Servlet 和 Tomcat 的一些理解。</p>
<a id="more"></a>
<p>以前我告诉自己，不要写诸如“某某软件是如何使用”的博客，因为我觉得这种文章没什么技术含量，一步一步的来，每一步都截图，不就完了吗？</p>
<p>到后来，发现自己装个软件也要费半天劲，装好了也不知道怎么用。比如这次的 Tomcat，通过 .exe 文件装好之后，也不知道该怎么在 IDE 里面使用…</p>
<p>我清楚了解到自己的智商，为了让自己下次少花一些时间，我决定花一些时间把这个过程记录下来。</p>
<h1 id="Windows-下安装-Tomcat"><a href="#Windows-下安装-Tomcat" class="headerlink" title="Windows 下安装 Tomcat"></a>Windows 下安装 Tomcat</h1><p>Tomcat 的下载就不说了，肯定不是在百度搜索找一个来安装，而是去官网下载安装，毕竟百度搜索出来的指不定是多久之前的版本。</p>
<p>在安装 Tomcat 有两种方法，一种是通过 .exe 文件来安装，这种方法很简单，我一开始也是这么干的。后来在网上看别人的文章的时候，看到别人说：一开始不要这么装，这样做只会徒增烦恼。而且后面在 YouTube 看视频的时候，别人也是通过另一种方法来安装的，<strong>也就是下载压缩包，解压之后通过 .bat 文件来启动 Tomcat</strong>。</p>
<p>Tomcat 也是需要 Java 运行环境的，所以电脑上需要安装 JDK，并且配置好环境变量。</p>
<p>Tomcat 自身也需要配置一个环境变量，但是我还没用到，所以就没管。</p>
<p>Tomcat 启动之后，通过 127.0.0.1:8080 就可以访问到它自带的页面了。</p>
<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>先说说我对 Servlet 和 Tomcat 的理解。</p>
<p>首先这些都是服务器端的东西，而服务器的功能就是<strong>接收客户端的请求，并返回指定内容给客户端</strong>，比如 JSON 格式的数据，或者一个 HTML 文件。</p>
<p>这里的客户端具体来说，就是手机 App 或者浏览器。</p>
<p>说回服务器，服务器实际上是一台时刻运行的电脑，但是一台运行着的电脑并不一定是一台服务器。一台服务器，那么必须时刻准备着响应客户端的请求。不然一个浏览器向你这台电脑请求数据，你一点表示都没有，这算怎么回事。</p>
<p>想要响应客户端的请求，至少要存在一个进程，这个进程监听一个端口。之所以要监听一个特定的端口，是因为一台计算机可能提供多个服务，比如文件传输服务、收发邮件服务，这些服务必然是由不同的线程提供，但是客户端只知道这台电脑能提供某项服务，并不知道具体由哪个进程来提供。</p>
<p>所以就需要各自指定端口，就像各自守着一个门口，等到有人来了就开始干活。</p>
<p>而 Tomcat 就具备响应客户端的能力，所以启动 Tomcat 之后，电脑就变成了一台服务器。它监听 8080 端口，就像守在 8080 号门口，时刻等待客户端发送请求。</p>
<p>虽然 Tomcat 具备接收和发送请求的能力，但是它没有处理请求的能力。这么说有点不准确，客户端要访问 index.html 文件，Tomcat 的确可以把这个文件发送给客户端。但是如果客户端说：我想得到 9 + 8 的结果，这个请求倒是简单，问题是服务器没有哪个文件有包含了 17 这个结果，就算有 17，那 16 呢？不可能把所有的结果都事先准备好吧？</p>
<p>这个时候就要 Servlet 登场了，它可以了解到客户端的请求是什么，并且处理这个请求，计算出结果。最后由 Tomcat 再发送给客户端。</p>
<p>通过上面这段话，我们可以知道：<strong>Servlet 必须依赖于 Tomcat 才能发挥自己的作用。因为它根本不具备接收和发送请求的能力，只能接收 Tomcat 的传给它的请求，也只能让 Tomcat 把最终结果返回给客户端。</strong></p>
<p>说得 Servlet 好像很厉害的样子，实际上它也是一个 Java 对象，这个对象主要是跟<strong>请求</strong>打交道，而且这个对象由 Tomcat 创建、管理和销毁。</p>
<p>通过类才可以生成对象，下面就是一个 Servlet 类的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"/Login"</span>, urlPatterns = &#123;<span class="string">"/Login"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">"admin"</span>) &amp;&amp; password.equals(<span class="string">"admin"</span>))&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"welcome.jsp"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">"index.jsp"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常把 Tomcat 看作一个容器，而 Servlet 对象就存在于这个容器里面。</p>
<p>我们编写好 Servlet 代码，并交给 Tomcat 处理，这些代码就会变成<strong>对象</strong>，并发挥自己的作用。</p>
<p><em>（注意类和对象的概念，类这是没有生命的，对象是运行时真实存在于内存的。）</em></p>
<p>可以把上面这个代码看成一张图纸，Tomcat 用这张图纸造出一个机器人。当请求从 8080 号门进入的时候，请求就交给机器人，机器人就会开始工作，最后的结果由 Tomcat 发送出去。</p>
<h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><p>说了那么多，还只是解释了 Servlet 和 Tomcat 的概念，仍然不知道代码该怎么写。</p>
<p>下面就来讲：</p>
<ul>
<li>在 Tomcat 的解压目录的 \webapps\ROOT\WEB-INF\classes 目录下，创建一个 Java 文件（假设叫做 kk.java）。</li>
<li>在这个文件里定义一个 Servlet，（HttpServlet 类在 servlet-api.jar 包里面，而 jre 中没有这个文件，所以要把这个文件复制到 JAVA_HOME\jre\lib\ext 目录下，这样才能编译成功。）</li>
<li>使用 javac 编译这个文件之后得到 .class 文件。</li>
<li>然后修改 WEB-INF 下的 web.xml 文件。</li>
<li>最后运行 Tomcat，在浏览器访问下面的地址。</li>
</ul>
<p><a href="http://127.0.0.1:8080/kk?username=admin&amp;password=admin" target="_blank" rel="noopener">http://127.0.0.1:8080/kk?username=admin&amp;password=admin</a> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">kk</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">      message = <span class="string">"Hello World"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    String username =  request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line"><span class="comment">//      out.println("&lt;h1&gt;" + message + "&lt;/h1&gt; &lt;h2&gt;"+ username + "&lt;br&gt;" + password +  "&lt;/h2&gt;");</span></span><br><span class="line">      <span class="keyword">if</span>(username.equals(<span class="string">"admin"</span>) &amp;&amp; password.equals(<span class="string">"admin"</span>)) &#123;</span><br><span class="line">        out.println(<span class="string">"&lt;!DOCTYPE html&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;head&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;title&gt;&lt;/title&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;/head&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;body&gt;\r\n"</span> +</span><br><span class="line">            <span class="string">"&lt;h1&gt;Login Sucess&lt;/h1&gt;fuck "</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out.println(<span class="string">"&lt;!DOCTYPE html&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;head&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;title&gt;&lt;/title&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;/head&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;body&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;h1&gt;Login Default&lt;/h1&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;/body&gt;\r\n"</span> + </span><br><span class="line">            <span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment">  contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">  this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment">  The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment">  (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment">  the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Welcome to Tomcat<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">     Welcome to Tomcat</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>kk<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>kk<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>kk<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/kk<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>虽然不知道这些文件究竟是怎么发挥作用的，但可以猜测，Tomcat 将这些文件复制到某个指定的目录，或者利用这些文件生成某些文件，最后监听端口，实现服务器的功能。</p>
<p>这么猜测也是有理由的，启动 Tomcat 之后再修改文件，在服务器上并没有及时的更新，而是要重启 Tomcat。</p>
<h1 id="使用-IDE（集成开发环境）"><a href="#使用-IDE（集成开发环境）" class="headerlink" title="使用 IDE（集成开发环境）"></a>使用 IDE（集成开发环境）</h1><p>用刚才的方法，每次修改代码，都要在命令行编译 .java 文件，而且每次都要重启 Tomcat。</p>
<p>而通过 IDE 可以省掉这些麻烦事，在 IDE 中开发跟平时差不多，只不过当启动 Tomcat 时，它自动地对文件进行编译，并移动到 Tomcat 指定的那个文件夹。</p>
<p>那么问题来了，哪个 IDE 好用？</p>
<p>之前一直使用 eclipse，虽然 eclipse 也有支持 Web 开发的版本，但是既然要装新的软件，为什么不装一个 IntelliJ ？毕竟经常看到有人说它好用。</p>
<p>IntelliJ  有收费版和社区版，但是社区版不支持 Web 开发，所以只能通过激活码的方法使用第一种。</p>
<p>下面记录一下创建一个简单的项目的过程：</p>
<ul>
<li>首先创建一个 Project，这里的 Project 类似于 eclipse 的工作空间。</li>
<li>选择 Maven 选项。</li>
<li>创建 Module，选择 Java Enterprise，并把 Web Application 和 JSF 勾上。（我猜： 选择 Java Enterprise 之后， IntelliJ 就知道要启动 Tomcat，并且把相关文件移动到指定目录。）</li>
<li>设置 Tomcat 所在的目录。</li>
<li>点击绿色三角形启动 Tomcat。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文所涉及的内容非常有限，网上还有非常多的知识。</p>
<p>我并没有找到一个期望中的教程，要么不成体系，要么不是我想要的。</p>
<p>想买一本关于 Java Web 的书，又听说那些书不能跟上软件的更新。</p>
<p>但是网上的内容就能跟上了吗？最新的内容就是官网的内容，但是英语是硬伤。</p>
<p>路还很长。</p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaFx 笔记]]></title>
      <url>/2018/05/articles/JavaFX%20%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>一篇关于 JavaFX 的笔记。<br><a id="more"></a></p>
<p>金旭亮老师在 live 中提到，要自己动手写一个 Windows 下的文件资源管理器。</p>
<p>刚开始动手不久，我就知道这是不可能的了，因为很多控件，我不知道该怎么描述，更别提去谷歌搜索相关的内容了。</p>
<p>后来遇到很多问题，都是在网上搜索，效率可以说非常低。简单的问题想一个晚上，困难一点的问题一个晚上都想不出来，说到底还是自己英语不行。</p>
<p>不过实现功能那一刻还是开心的，这个<em>文件浏览器</em>（因为根本没有管理功能）就到此为止。为了让自己下次，遇到同样的问题不用去搜索，我决定把一些东西记录下来。</p>
<p><img src="http://wx2.sinaimg.cn/large/0065Ozb6gy1frs5xo4lxhj30k30egmxt.jpg" alt></p>
<h1 id="TreeView-创建问题"><a href="#TreeView-创建问题" class="headerlink" title="TreeView 创建问题"></a>TreeView 创建问题</h1><p>先说说两个类：</p>
<ul>
<li>TreeView</li>
</ul>
<p>这个控件包含一个根元素（root），这个根元素又可以包含多个元素， 以此类推， 就构成了与树类似的视图。在这里使用它，是因为文件目录也具有类似的特点：C 盘下有多个目录，点开某个目录，这些目录下可能也有多个目录…</p>
<ul>
<li>TreeItem&lt;T> </li>
</ul>
<p>上面这个类是树形视图，而这个类就是树形视图中的一个元素。这个元素下面还可以添加多个元素，这样点击它就会展开，就可以看到它的子元素。</p>
<p>这个类是泛型类，根据实际情况决定实际类型，比如字符串、数字、或者文件类型。</p>
<p>当时看到的教程都是创建 TreeItem 之后，再创建 TreeView。而我这里是通过 FXML 文件设计 TreeView，然后在控制类里面创建 TreeItem，结果我就不会写了，又不能在 FXML 中添加 TreeItem。</p>
<p>解决方法很简单，简单到我觉得自己是个睿智，这里忍不住加了一条注释。</p>
<p><em>FileTreeItem 是自定义类，原因马上会说。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"C:\\"</span>);</span><br><span class="line">TreeItem&lt;FileTreeItem&gt; root = <span class="keyword">new</span> TreeItem&lt;&gt;(<span class="keyword">new</span> FileTreeItem(path));</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置图标</span></span><br><span class="line">root.setGraphic(<span class="keyword">new</span> ImageView(getClass().getResource(<span class="string">"../image/folder.png"</span>)</span><br><span class="line">		.toExternalForm()));</span><br><span class="line"></span><br><span class="line">treeView.setRoot(root);</span><br><span class="line"><span class="comment">//找了半天，真是日了狗</span></span><br></pre></td></tr></table></figure>
<h1 id="为什么要自定义-FileTreeItem-类"><a href="#为什么要自定义-FileTreeItem-类" class="headerlink" title="为什么要自定义 FileTreeItem 类"></a>为什么要自定义 FileTreeItem 类</h1><p>因为如果 TreeItem 的泛型是 File，那么是 TreeView 中显示的就不是文件名，而是更长的路径名。</p>
<p>出现这个问题的原因是：File 类的 toString() 方法最终返回的是对象的 path 属性。而我们想要的应该是文件名，也就是要 getName() 方法返回的值。</p>
<p><em>但是这个解决方法不好，应该写一个类继承 File，然后重写 toString 方法。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个类的目的是，让 TreeItem 里面保存 File，而且显示的时候只显示文件名，而不是一长串</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileTreeItem</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> File myFile;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FileTreeItem</span><span class="params">(Path path)</span> </span>&#123;</span><br><span class="line">		myFile = path.toFile();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FileTreeItem</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		myFile = file;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> myFile.getName();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFile</span><span class="params">(Path path)</span> </span>&#123;</span><br><span class="line">		myFile = path.toFile();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		myFile = file;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> File <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> myFile;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="多线程问题"><a href="#多线程问题" class="headerlink" title="多线程问题"></a>多线程问题</h1><p>既然是文件浏览器，肯定要递归地遍历每个文件夹。如果只是遍历当前工作目录肯定没问题，问题是如果要遍历的是整个 C 盘呢？这显然要花很多时间，总不能让程序一直停在那里吧。</p>
<p>自然而然想到多线程，同时也自然而然想到子线程不能更新用户界面。</p>
<p>这里使用的多线程并不复杂。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Runnable task = () -&gt; &#123;</span><br><span class="line">    createTree(path, root);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(task).start();</span><br></pre></td></tr></table></figure>
<p>如何更新用户界面才是个问题。</p>
<p>金老师的教育网站提到了解决方式，但我不清楚自己是否理解正确。</p>
<p>我的理解是，子线程不能更新用户界面，如果要在子线程更新界面，就应该把<strong>更新界面这件事</strong>交给专门处理用户界面的线程，这个线程什么时候有空了，就会执行这个更新操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTree</span><span class="params">(Path path, TreeItem&lt;FileTreeItem&gt; treeItem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//			遍历文件夹的方式</span></span><br><span class="line">        DirectoryStream&lt;Path&gt; children = Files.newDirectoryStream(path);</span><br><span class="line">        <span class="keyword">for</span>(Path child: children) &#123;</span><br><span class="line">            File file = child.toFile();</span><br><span class="line">            <span class="keyword">if</span>(file.isDirectory()) &#123;</span><br><span class="line">                TreeItem&lt;FileTreeItem&gt; newTreeItem 	= <span class="keyword">new</span> TreeItem&lt;&gt;(<span class="keyword">new</span> FileTreeItem(file));</span><br><span class="line">                System.out.println(getClass().getSimpleName());</span><br><span class="line">                newTreeItem.setGraphic(<span class="keyword">new</span> ImageView(getClass().getResource(<span class="string">"../image/folder.png"</span>)</span><br><span class="line">                                                     .toExternalForm()));</span><br><span class="line"></span><br><span class="line">                Platform.runLater(() -&gt; &#123;</span><br><span class="line">                    treeItem.getChildren().add(newTreeItem);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//				if(file.isDirectory()) &#123;</span></span><br><span class="line">            <span class="comment">//					createTree(child, newTreeItem);</span></span><br><span class="line">            <span class="comment">//				&#125;</span></span><br><span class="line"></span><br><span class="line">            System.out.println(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"访问出错"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 重点就在于</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Platform.runLater(() -&gt; &#123;</span><br><span class="line">    treeItem.getChildren().add(newTreeItem);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>(这里注释掉那几句，是因为后来我不想一开始就遍历所有文件夹，而是等用户点击时才去访问。)</p>
<h1 id="TableView-中列的问题"><a href="#TableView-中列的问题" class="headerlink" title="TableView 中列的问题"></a>TableView 中列的问题</h1><h2 id="TableColumn-问题"><a href="#TableColumn-问题" class="headerlink" title="TableColumn 问题"></a>TableColumn 问题</h2><p>暂且把 TableColumn 看作是表头，第一个泛型类型是 TableView 中某一行元素的类型，第二个泛型类型是单元格中的类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TableColumn&lt;MyFile, String&gt; column2 = <span class="keyword">new</span> TableColumn&lt;&gt;(<span class="string">"文件名"</span>);</span><br><span class="line">column2.setCellValueFactory(<span class="keyword">new</span> PropertyValueFactory&lt;&gt;(<span class="string">"Name"</span>));</span><br><span class="line">...</span><br><span class="line">table.getColumns().add(column2);</span><br></pre></td></tr></table></figure>
<p>这里写的是：”文件名”和 “Name”，一开始不明白程序实际上是调用 getXXX() 方法来获取单元格的内容的，所以我两个都写了”文件名”，结果表格一直为空…</p>
<p>这里写 “Name” 就会调用 MyFile 类的 getName() 方法，以此类推。</p>
<h2 id="TableView-添加元素方法"><a href="#TableView-添加元素方法" class="headerlink" title="TableView 添加元素方法"></a>TableView 添加元素方法</h2><p>创建 TableColumn 之后，然后添加到 TableView 之中。</p>
<p>要想表格有内容，还得给 TableView 添加要显示的列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ObservableList&lt;MyFile&gt; list = FXCollections.observableArrayList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    DirectoryStream&lt;Path&gt; children = Files.newDirectoryStream(myPath);</span><br><span class="line">    <span class="keyword">for</span>(Path child :  children) &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> MyFile(child.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">table.setItems(list);</span><br></pre></td></tr></table></figure>
<h2 id="获取文件其他属性的方法"><a href="#获取文件其他属性的方法" class="headerlink" title="获取文件其他属性的方法"></a>获取文件其他属性的方法</h2><p>File 的 getName() 方法可以获取文件名，但是没办法获取到文件的大小（尽管有 length() 方法，但是这个方法不是 get 开头的。）</p>
<p>而 MyFile 是一个自定义类，并且继承自 File 类。它的目的是<strong>添加一些方法：比如 getSize() 等</strong>，在 getSize() 方法内调用 length() 方法，这样就可以获取到文件的长度了。</p>
<h2 id="TableView-高度问题"><a href="#TableView-高度问题" class="headerlink" title="TableView 高度问题"></a>TableView 高度问题</h2><p>TableView 表格是有背景的，如果表格元素不够多，不够铺满父级容器，看起来就不顺眼，所以要设置它的大小。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table.prefHeightProperty().bind(vbox.heightProperty());</span><br></pre></td></tr></table></figure>
<p>上面这句话是可行的，但我搞不懂它的含义是什么。</p>
<p>另外，这个的 TableView 是在 VBox 里面的。当时开始写的时候，好像还一直不能显示出表格，至于原因就不记得了。总之，放在 VBox 里是可行的。</p>
<h2 id="TableView-更新问题"><a href="#TableView-更新问题" class="headerlink" title="TableView 更新问题"></a>TableView 更新问题</h2><p>这个 TableView 是显示一个文件夹里面的内容，如果点击一个文件夹 A，那么显示的就应该是 A 的内容。</p>
<p>一开始我是使用：先调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vbox.getChildren().clear();</span><br></pre></td></tr></table></figure>
<p>把已存在的表格删除掉，然后再创建一个表格的方法。</p>
<p>后来感觉这样不太好，就添加一个用于更新表格的方法，这个方法里生成一个新的列表，然后调用 table 的 setItems() 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateTable</span><span class="params">(Path myPath)</span> </span>&#123;</span><br><span class="line">    nowPath = myPath;</span><br><span class="line">    ObservableList&lt;MyFile&gt; list = FXCollections.observableArrayList();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DirectoryStream&lt;Path&gt; children = Files.newDirectoryStream(myPath);</span><br><span class="line">        <span class="keyword">for</span>(Path child :  children) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> MyFile(child.toString()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    table.setItems(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可知，改变一个表格，只需要改变它的 items。</p>
<h1 id="添加事件响应问题"><a href="#添加事件响应问题" class="headerlink" title="添加事件响应问题"></a>添加事件响应问题</h1><p>这个问题是困扰我最久的一个问题了。如果是一个按钮还好办，问题是 TreeItem 没有 setOnMouseClicked() 方法。后面尝试的一些方法也不好用，最后在 GitHub 上找了一份 JavaFX 文件管理器的代码，终于看到了解决方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//		设置树视图的点击事件</span></span><br><span class="line">treeView.setOnMouseClicked(e -&gt; &#123;</span><br><span class="line">    TreeItem&lt;FileTreeItem&gt; item = treeView.getSelectionModel().getSelectedItem();</span><br><span class="line">    <span class="keyword">if</span>(e.getClickCount() == <span class="number">2</span> &amp;&amp; item != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//		获取到被点击的 Item</span></span><br><span class="line">        File file = item.getValue().getFile();</span><br><span class="line">        String path2 = file.getPath();</span><br><span class="line">        System.out.println(path2);</span><br><span class="line">        updateTable(Paths.get(path2));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(file.isDirectory()) &#123;</span><br><span class="line">            createTree(file.toPath(), item);</span><br><span class="line">        &#125;</span><br><span class="line">        item.setExpanded(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>关键就在于</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSelectionModel().getSelectedItem()</span><br></pre></td></tr></table></figure>
<p>获取到被点击的元素。</p>
<p>获取到被点击的元素之后事情就变得简单了，这里只是更新表格和更新树视图。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我所遇到的所有问题基本都在这里了，这份代码还存在不少问题，有时候我都不清楚到底是传一个 Path 对象还是要给 String 对象…</p>
<h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><ul>
<li>没有设置好图标（其实是不会）</li>
<li>没有实现右键单击弹出选项的功能（还是不会）</li>
<li>没有实现文件资源管理器的布局切换（更加不会）</li>
<li>没有对文件排序，使文件夹排在前面（菜是原罪）</li>
<li>对很多类和方法一知半解</li>
<li>……</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java JDBC 基础]]></title>
      <url>/2018/04/articles/Java%20JDBC%20%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>第十九篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="概念的理解"><a href="#概念的理解" class="headerlink" title="概念的理解"></a>概念的理解</h1><ul>
<li>数据库<ul>
<li>一个数据库由多个表构成，而表中存放着信息。</li>
<li>数据库是真实存在的，它储存我们所需要的数据。</li>
</ul>
</li>
<li>SQL<ul>
<li>SQL 也是一种语言，和其他编程语言一样，有自己语法规则。就当做是和数据库交流所使用的语言。</li>
</ul>
</li>
<li>MySQL<ul>
<li>MySQL 是一个<em>关系型数据库管理系统</em>，也就是说它可以用 SQL 和数据库进行交流。这里的交流包括创建、修改、删除数据库等。</li>
</ul>
</li>
<li>MySQL 服务器端和客户端<ul>
<li>服务器端，真正执行 SQL 语句，从而操作数据库。</li>
<li>客户端，获取到 SQL 语句，然后发送给服务器端。</li>
</ul>
</li>
</ul>
<h1 id="JDBC-的介绍"><a href="#JDBC-的介绍" class="headerlink" title="JDBC 的介绍"></a>JDBC 的介绍</h1><p>首先需要了解，数据库管理系统不止 MySQL 一个，它们之间的语法也有所不同。假设没有 JDBC，那么编写连接数据库的代码的时候，就需要根据实际情况，编写特定的代码。而且当更换数据库时，需要重新写一遍代码。</p>
<p>而 JDBC 规定了一系列接口，各个数据库厂商实现了这些接口，并提供了连接数据库的工具包，使得 Java 可以很方便的连接到数据库，并进行增删改查操作。</p>
<p><strong>实际上的连接更加复杂，以上的介绍仅仅是为了方便看懂接下去的代码。</strong></p>
<h2 id="JDBC-中常用的类"><a href="#JDBC-中常用的类" class="headerlink" title="JDBC 中常用的类"></a>JDBC 中常用的类</h2><blockquote>
<p>DriverManager：此类管理数据库驱动程序列表。</p>
<p>Driver ：此接口处理与数据库服务器的通信。</p>
</blockquote>
<ul>
<li>Connection：应用程序与数据库的连接。</li>
<li>Statement：用于执行 SQL 语句。</li>
<li>ResultSet：用于接收 SQL 语句得到的结果。<ul>
<li>.next() 指向下一条结果</li>
<li>.previous() 指向上一条结果</li>
<li>.absolute() 定位到某行</li>
<li>.beforeFirst() 定位到表头</li>
<li>.afterLast() 定位到最后一行</li>
<li>.getXXX(列名/索引) 获取一行中特定的列</li>
</ul>
</li>
<li>SQLException：连接过程中可能抛出的异常。</li>
</ul>
<h1 id="JDBC-连接-MySQL-的模板"><a href="#JDBC-连接-MySQL-的模板" class="headerlink" title="JDBC 连接 MySQL 的模板"></a>JDBC 连接 MySQL 的模板</h1><ol>
<li>装载驱动程序</li>
<li>建立数据库连接</li>
<li>执行 SQL 语句</li>
<li>获取执行结果</li>
<li>释放连接</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myJDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JdbcExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		String JDBC_DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">		String DB_URL = <span class="string">"jdbc:mysql://127.0.0.1:3306/Test"</span>;</span><br><span class="line">		String USER = <span class="string">"DLZ"</span>;</span><br><span class="line">		String PASSWORD = <span class="string">"fuck"</span>;</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//			1. 装载驱动程序</span></span><br><span class="line">			Class.forName(JDBC_DRIVER);</span><br><span class="line"><span class="comment">//			2. 建立数据库连接</span></span><br><span class="line">			conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);</span><br><span class="line"><span class="comment">//			3. 执行 SQL 语句</span></span><br><span class="line">			stmt = conn.createStatement();</span><br><span class="line">			rs = stmt.executeQuery(<span class="string">"SELECT * FROM products WHERE vend_id = 1003"</span>);</span><br><span class="line"><span class="comment">//			4. 获取执行结果</span></span><br><span class="line">			<span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">				System.out.println(rs.getString(<span class="number">2</span>) + <span class="string">","</span> + rs.getString(<span class="number">5</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//			5. 释放连接</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">					stmt.close();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">					rs.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">				<span class="comment">//ignore</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		JdbcExample();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="读取记录过多问题"><a href="#读取记录过多问题" class="headerlink" title="读取记录过多问题"></a>读取记录过多问题</h1><p>需要读取的记录过多，导致 Java 内存溢出。</p>
<p>解决方法：通过游标，每次从服务器端读取一部分结果集。</p>
<ul>
<li>在 DB_URL 加上 useCursorFetch=true</li>
<li>使用 PreparedStatement 替代 Statement</li>
<li>PreparedStatement 在创建时就要传入 SQL 语句</li>
<li>通过 .setFetchSize() 设置每次读取的大小</li>
<li>通过 .executeQuery() 执行 SQL 语句</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myJDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2018年04月24日21:38:17</span></span><br><span class="line"><span class="comment"> * 使用游标，每次从数据库中读取一部分数据。</span></span><br><span class="line"><span class="comment"> * 避免 JVM 内存溢出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dlz</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JdbcExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		String JDBC_DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">		String DB_URL = <span class="string">"jdbc:mysql://127.0.0.1:3306/Test"</span>;</span><br><span class="line">		String USER = <span class="string">"DLZ"</span>;</span><br><span class="line">		String PASSWORD = <span class="string">"fuck"</span>;</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(JDBC_DRIVER);</span><br><span class="line"><span class="comment">//			需要在连接数据库时加上这句。</span></span><br><span class="line">			DB_URL += <span class="string">"?useCursorFetch=true"</span>;</span><br><span class="line">			conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);</span><br><span class="line">			</span><br><span class="line"><span class="comment">//			在创建 prepareStatement 对象时就需要传入 sql 语句。</span></span><br><span class="line">			pstmt = conn.prepareStatement(<span class="string">"SELECT * FROM products WHERE vend_id = ?"</span>);</span><br><span class="line">			pstmt.setFetchSize(<span class="number">1</span>);  <span class="comment">//设置每次读取的大小</span></span><br><span class="line">			pstmt.setString(<span class="number">1</span>, <span class="string">"1003"</span>);  <span class="comment">//将第一个问号改为 1003</span></span><br><span class="line">			rs = pstmt.executeQuery();  <span class="comment">//执行 sql 语句</span></span><br><span class="line">			<span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">				System.out.println(rs.getString(<span class="number">2</span>) + <span class="string">","</span> + rs.getString(<span class="number">5</span>));</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(pstmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">					pstmt.close();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">					rs.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">				<span class="comment">//ignore</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		JdbcExample();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="读取大数据问题"><a href="#读取大数据问题" class="headerlink" title="读取大数据问题"></a>读取大数据问题</h1><p>读取数据库表大字段，比如数据库中，有一条大小为 1G 的数据，读入内存中同样可能发生溢出的问题。</p>
<p>解决方法：通过流方式解决。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myJDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2018年04月24日21:52:52</span></span><br><span class="line"><span class="comment"> * 流方式处理数据库中的大字段，比如很长的文章，目的仍然是避免 JVM 内存溢出。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dlz</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JdbcExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		String JDBC_DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">		String DB_URL = <span class="string">"jdbc:mysql://127.0.0.1:3306/Test"</span>;</span><br><span class="line">		String USER = <span class="string">"DLZ"</span>;</span><br><span class="line">		String PASSWORD = <span class="string">"fuck"</span>;</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">		ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(JDBC_DRIVER);</span><br><span class="line">			conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);</span><br><span class="line">			</span><br><span class="line">			stmt = conn.createStatement();</span><br><span class="line">			rs = stmt.executeQuery(<span class="string">"SELECT * FROM products WHERE vend_id = 1003"</span>);</span><br><span class="line">			String FILE_URL = <span class="string">"temp.txt"</span>;</span><br><span class="line">			InputStream in = <span class="keyword">null</span>;</span><br><span class="line">			File f = <span class="keyword">new</span> File(FILE_URL);</span><br><span class="line">			OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">			out = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">			<span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">				System.out.println(rs.getString(<span class="number">2</span>) + <span class="string">","</span> + rs.getString(<span class="number">5</span>));</span><br><span class="line">				</span><br><span class="line"><span class="comment">//				将大数据文件，用二进制读取，避免内存溢出。</span></span><br><span class="line">				in = rs.getBinaryStream(<span class="string">"vend_id"</span>);</span><br><span class="line">				<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span>((temp = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">					out.write(temp);</span><br><span class="line">				&#125;</span><br><span class="line">				out.write(<span class="string">"\n"</span>.getBytes());</span><br><span class="line">			&#125;</span><br><span class="line">			in.close();</span><br><span class="line">			out.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">					stmt.close();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">					rs.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">				<span class="comment">//ignore</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		JdbcExample();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="大量插入数据问题"><a href="#大量插入数据问题" class="headerlink" title="大量插入数据问题"></a>大量插入数据问题</h1><p>大量的数据插入操作，导致效率低下，因为发送和接收 SQL 语句都需要时间。</p>
<p>解决方法：批处理，一次发送多条 SQL 语句。</p>
<ul>
<li>.addBatch() 将 SQL 语句打包</li>
<li>.executeBatch() 执行打包的 SQL 语句</li>
<li>clearBatch() 清空以便下次使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myJDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JdbcExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		String JDBC_DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">		String DB_URL = <span class="string">"jdbc:mysql://127.0.0.1:3306/Test"</span>;</span><br><span class="line">		String USER = <span class="string">"DLZ"</span>;</span><br><span class="line">		String PASSWORD = <span class="string">"fuck"</span>;</span><br><span class="line">		Connection conn = <span class="keyword">null</span>;</span><br><span class="line">		Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(JDBC_DRIVER);</span><br><span class="line">			DB_URL += <span class="string">"?useUnicode=true&amp;characterEncoding=utf8"</span>;</span><br><span class="line">			conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);</span><br><span class="line">			</span><br><span class="line">			stmt = conn.createStatement();</span><br><span class="line">			stmt.addBatch(<span class="string">"INSERT INTO customers2 VALUES (NULL, \"1\",\"77\", \"77\", \"77\", \"77\", \"77\", NULL, NULL)"</span>); <span class="comment">// 添加一条语句</span></span><br><span class="line">			stmt.addBatch(<span class="string">"INSERT INTO customers2 VALUES (NULL, \"1\",\"77\", \"77\", \"77\", \"77\", \"77\", NULL, NULL)"</span>); <span class="comment">// 添加一条语句</span></span><br><span class="line">			stmt.executeBatch(); <span class="comment">// 一次性执行</span></span><br><span class="line">			stmt.clearBatch(); <span class="comment">// 清空，以便下次使用</span></span><br><span class="line"></span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">					stmt.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">				<span class="comment">//ignore</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		JdbcExample();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="中文编码问题"><a href="#中文编码问题" class="headerlink" title="中文编码问题"></a>中文编码问题</h1><p>在 MySQL 中输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%character%&quot;;</span><br></pre></td></tr></table></figure>
<p>可以查看到 character_set_database 和 character_set_server 的编码。</p>
<p>在进入某个数据库后，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table customers;</span><br></pre></td></tr></table></figure>
<p>可以看出某个数据表、某个字段的编码。</p>
<p>优先级从高到低：</p>
<p>column &gt; Table &gt; Database &gt; Server</p>
<p>对数据库而言，需要将编码设置为 utf8；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set character_set_server = utf8;</span><br></pre></td></tr></table></figure>
<p>在创建数据表时，也可以设置编码。</p>
<p>对于 Java 程序而言，需要在 DB_URL 后面加上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"?useUnicode=true&amp;characterEncoding=utf8"</span></span><br></pre></td></tr></table></figure>
<h1 id="下载连接-MySQL-的-jar-包"><a href="#下载连接-MySQL-的-jar-包" class="headerlink" title="下载连接 MySQL 的 jar 包"></a>下载连接 MySQL 的 jar 包</h1><p><a href="http://www.java2s.com/Code/Jar/m/mysql.htm" target="_blank" rel="noopener">Download mysql-connector-java-5.1.21.jar</a></p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 反射]]></title>
      <url>/2018/04/articles/Java%20%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<p>第十八篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="Class-类-–-反射的基础"><a href="#Class-类-–-反射的基础" class="headerlink" title="Class 类 – 反射的基础"></a>Class 类 – 反射的基础</h1><h2 id="Class-类是什么"><a href="#Class-类是什么" class="headerlink" title="Class 类是什么"></a>Class 类是什么</h2><p>我们可以自己自定义类，JDK 中也提供了很多类，这些类有自己的名字，可能还有个爹（父类），也有自己的属性，比如：是否是接口？是不是基本数据类型等等。</p>
<p>从这个角度看，类跟现实世界的事物一样，有自己的特点。既然我们可以创建一个类来表示某种事物，那么是否可以设计一个类来表示“类”呢？</p>
<p>答案是可以的，而且已经有了这个类了，这就是 Class 类。</p>
<h2 id="获取-Class-类实例的三种方法"><a href="#获取-Class-类实例的三种方法" class="headerlink" title="获取 Class 类实例的三种方法"></a>获取 Class 类实例的三种方法</h2><p>Class 类是用来表示一个类的，我们已经知道可以定义一个 Student 类表示学生，然后可以调用 Student 对象的方法（比如 getName() 方法）获取到这个学生的信息。</p>
<p>这里也是一样的，通过调用 Class 对象的方法就可以获取到某个类的信息。比如 getName() 方法就可以获取到类的名称。</p>
<p>所有我们首先应该做的就是创建 Class 类型对象。</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>通过<strong>已存在的对象</strong>创建，此处使用的是 getClass() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Employee e;</span><br><span class="line">....</span><br><span class="line">Class cl = e.getClass();</span><br></pre></td></tr></table></figure>
<p><em>注意：Class 是泛型类，明确类型时可以写清楚：</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Employee&gt;</span><br></pre></td></tr></table></figure>
<p>不知道的情况下可以写个问号：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>通过一个字符串来创建</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cl = Class.forName(<span class="string">"java.util.Date"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>通过 类名.class 来创建</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = <span class="keyword">int</span>.class;</span><br><span class="line">Class c2 = Double[].class;</span><br></pre></td></tr></table></figure>
<h1 id="反射的意义"><a href="#反射的意义" class="headerlink" title="反射的意义"></a>反射的意义</h1><p>通过上面的讲解，可以了解到 Class 类型的对象可以获取到某个类的各种信息，但实际上不仅仅可以获取信息，还可以<strong>由 Class 类型的对象创建出某个类的实例</strong>（通过 newInstance() 方法），也可以<strong>执行这个类里面的静态方法或普通方法</strong>，甚至可以<strong>在运行的时候修改这个类的实例的成员变量</strong>（比如通过 Class 对象，我可以修改一个 Student 对象里面的私有变量的值）。</p>
<p>暂时看不懂没关系，下面会用一些例子来说明。</p>
<p>需要<strong>留意</strong>的一点，通过 forName() 方法创建一个 Class 对象，比如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; cl = Class.forName(<span class="string">"反射.Student"</span>);</span><br></pre></td></tr></table></figure>
<p>并不会创建一个 Student 对象，所以 Student 类的初始化块并不会执行。</p>
<p><strong>但是 Student 类的静态字段会被执行（用 static 修饰的代码块）。</strong></p>
<h1 id="Class-类部分方法介绍"><a href="#Class-类部分方法介绍" class="headerlink" title="Class 类部分方法介绍"></a>Class 类部分方法介绍</h1><ul>
<li>getName() 获取类名</li>
<li>isInterface() 是否是接口</li>
<li>isPrimitive() 是否是基本类型</li>
<li>isArray() 是否为数组对象</li>
<li>getSuperclass() 获取父类 Class 对象，可能得到 null</li>
<li>getPackage() 获取类所在包</li>
</ul>
<h1 id="Class-类的实际运用"><a href="#Class-类的实际运用" class="headerlink" title="Class 类的实际运用"></a>Class 类的实际运用</h1><h2 id="判断对象所属类型"><a href="#判断对象所属类型" class="headerlink" title="判断对象所属类型"></a>判断对象所属类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e.getClass().getName() == <span class="string">"Employee"</span>)</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">if</span>(e.getClass() == Employee.class)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>不管每个类型创建了多少个实例，也不管你用什么方法获取此类型的 Class 实例，每个类型都只对应一个 Class 实例。</p>
<p>基本数据类型，比如 int，float 等，也有一个对应的 Class 实例，它并不等于包装类的 Class 实例，包装类另提供了一个 TYPE 字段，向外界返回它所包装的基本数据类型的 Class 实例，所以 int.class == Integer.TYPE，其值为 true。</p>
<h2 id="运行时动态加载类并进行查询"><a href="#运行时动态加载类并进行查询" class="headerlink" title="运行时动态加载类并进行查询"></a>运行时动态加载类并进行查询</h2><p>使用 Class.forName() 方法可以加载指定名字的类型信息到内存中以便查询，所以在可以运行时获取用户输入的类名，然后加载一个类，也就是上面所说的方法二。加载类之后就可以查询其成员的方法。</p>
<p><em>提示：指定类所拥有的属性、方法、构造函数分别由 java.lang.reflect 包中的 Field、Method 和 Constructor 三个类来表达。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   <span class="doctag">@version</span> 1.1 2004-02-21</span></span><br><span class="line"><span class="comment">   <span class="doctag">@author</span> Cay Horstmann</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span></span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;  </span><br><span class="line">      <span class="comment">// read class name from command line args or user input</span></span><br><span class="line">      String name;</span><br><span class="line">      <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) </span><br><span class="line">         name = args[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">      &#123;</span><br><span class="line">         Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">         System.out.print(<span class="string">"Enter class name (e.g. java.util.Date): "</span>);</span><br><span class="line">         name = in.next();</span><br><span class="line">         in.close();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;  </span><br><span class="line">         <span class="comment">// print class name and superclass name (if != Object)</span></span><br><span class="line">         Class&lt;?&gt; cl = Class.forName(name);</span><br><span class="line">         Class&lt;?&gt; supercl = cl.getSuperclass();</span><br><span class="line">         System.out.print(<span class="string">"class "</span> + name);</span><br><span class="line">         <span class="keyword">if</span> (supercl != <span class="keyword">null</span> &amp;&amp; supercl != Object.class)</span><br><span class="line">            System.out.print(<span class="string">" 继承自 "</span> + supercl.getName());</span><br><span class="line"></span><br><span class="line">         System.out.print(<span class="string">"\n&#123;\n"</span>);</span><br><span class="line">         printConstructors(cl); <span class="comment">//输出构造函数</span></span><br><span class="line">         System.out.println();</span><br><span class="line">         printMethods(cl);    <span class="comment">//输出方法</span></span><br><span class="line">         System.out.println();</span><br><span class="line">         printFields(cl);    <span class="comment">//输出字段</span></span><br><span class="line">         System.out.println(<span class="string">"&#125;"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(ClassNotFoundException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">      System.exit(<span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">      输出所有构造方法</span></span><br><span class="line"><span class="comment">      <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstructors</span><span class="params">(Class&lt;?&gt; cl)</span></span></span><br><span class="line"><span class="function">   </span>&#123;  </span><br><span class="line">      Constructor&lt;?&gt;[] constructors = cl.getDeclaredConstructors();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Constructor&lt;?&gt; c : constructors)</span><br><span class="line">      &#123;           </span><br><span class="line">         String name = c.getName();</span><br><span class="line">         System.out.print(<span class="string">"   "</span> + Modifier.toString(c.getModifiers()));</span><br><span class="line">         System.out.print(<span class="string">" "</span> + name + <span class="string">"("</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// print parameter types</span></span><br><span class="line">         Class[] paramTypes = c.getParameterTypes();</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; paramTypes.length; j++)</span><br><span class="line">         &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>) System.out.print(<span class="string">", "</span>);</span><br><span class="line">            System.out.print(paramTypes[j].getName());</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(<span class="string">");"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">      输出所有方法</span></span><br><span class="line"><span class="comment">      <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMethods</span><span class="params">(Class&lt;?&gt; cl)</span></span></span><br><span class="line"><span class="function">   </span>&#123;  </span><br><span class="line">      Method[] methods = cl.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Method m : methods)</span><br><span class="line">      &#123;  </span><br><span class="line">         Class&lt;?&gt; retType = m.getReturnType();</span><br><span class="line">         String name = m.getName();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// print modifiers, return type and method name</span></span><br><span class="line">         System.out.print(<span class="string">"   "</span> + Modifier.toString(m.getModifiers()));</span><br><span class="line">         System.out.print(<span class="string">" "</span> + retType.getName() + <span class="string">" "</span> + name + <span class="string">"("</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// print parameter types</span></span><br><span class="line">         Class&lt;?&gt;[] paramTypes = m.getParameterTypes();</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; paramTypes.length; j++)</span><br><span class="line">         &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span>) System.out.print(<span class="string">", "</span>);</span><br><span class="line">            System.out.print(paramTypes[j].getName());</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(<span class="string">");"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">      输出所有字段</span></span><br><span class="line"><span class="comment">      <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">(Class&lt;?&gt; cl)</span></span></span><br><span class="line"><span class="function">   </span>&#123;  </span><br><span class="line">      Field[] fields = cl.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Field f : fields)</span><br><span class="line">      &#123;  </span><br><span class="line">         Class&lt;?&gt; type = f.getType();</span><br><span class="line">         String name = f.getName();</span><br><span class="line">         System.out.print(<span class="string">"   "</span> + Modifier.toString(f.getModifiers()));</span><br><span class="line">         System.out.println(<span class="string">" "</span> + type.getName() + <span class="string">" "</span> + name + <span class="string">";"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取某个类的构造方法"><a href="#获取某个类的构造方法" class="headerlink" title="获取某个类的构造方法"></a>获取某个类的构造方法</h2><p>获取类的所有构造方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取类的所有构造方法：</span><br><span class="line">Constructor[] constructors = Class.forName(<span class="string">"java.lang.String"</span>).getConstructors();</span><br><span class="line">获取指定类的构造方法：</span><br><span class="line">Constructor constructor = String.class.getConstructors(StringBuffer.class);</span><br></pre></td></tr></table></figure>
<p>有了类的构造方法的引用，就可以用它来创建对象。</p>
<h2 id="动态创建对象的典型方法"><a href="#动态创建对象的典型方法" class="headerlink" title="动态创建对象的典型方法"></a>动态创建对象的典型方法</h2><p>一种是通过 Class 对象的 newInstance() 方法动态创建，另一种是通过构造方法对象（Constructor 对象）的 newInstance() 方法动态创建。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewInstanceDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		invokeConstructorNoArgu();</span><br><span class="line">		invokeConstructorWithArgu();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//调用无参构造函数创建对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeConstructorNoArgu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class&lt;?&gt; c = Class.forName(<span class="string">"java.util.ArrayList"</span>);</span><br><span class="line">			List list = (List) c.newInstance(); <span class="comment">// 直接调用Class对象的newInstance方法创建对象</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">				list.add(<span class="string">"element "</span> + i);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (Object o : list.toArray()) &#123;</span><br><span class="line">				System.out.println(o);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			System.out.println(<span class="string">"找不到指定的类"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//调用有参构造函数创建对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeConstructorWithArgu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; c = Class.forName(<span class="string">"Student"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 取得对应参数列的构造函数 ,仅适用于JDK1.5及以上版本           </span></span><br><span class="line">            Constructor&lt;?&gt; constructor = </span><br><span class="line">                             c.getConstructor(String.class,<span class="keyword">int</span>.class); </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 指定实参</span></span><br><span class="line">            Object[] argObjs = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">            argObjs[<span class="number">0</span>] = <span class="string">"jxl"</span>;</span><br><span class="line">            argObjs[<span class="number">1</span>]=<span class="number">90</span>;</span><br><span class="line">            <span class="comment">//创建对象</span></span><br><span class="line">          </span><br><span class="line">            Object obj=constructor.newInstance(<span class="string">"jxl"</span>,<span class="number">90</span>);</span><br><span class="line">            <span class="comment">// 检查结果</span></span><br><span class="line">            System.out.println(obj);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"找不到类"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"没有所指定的方法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student类中定义了一个接收两个参数的构造方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">"N/A"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> score)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">        <span class="keyword">this</span>.score = score; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> score; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">":"</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态创建数组"><a href="#动态创建数组" class="headerlink" title="动态创建数组"></a>动态创建数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; c = String.class;</span><br><span class="line">        Object objArr = Array.newInstance(c, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Array.set(objArr, i, i+<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.print(Array.get(objArr, i) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        String[] strs = (String[]) objArr;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s : strs) &#123;</span><br><span class="line">            System.out.print(s + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="强类型的对象工厂"><a href="#强类型的对象工厂" class="headerlink" title="强类型的对象工厂"></a>强类型的对象工厂</h2><p><em>所谓对象工厂，实际上应该只是一个方法吧。利用对象工厂可以避免重复的编写 newInstance() 的代码。</em></p>
<p>通过字符串可以创建一个 Class 对象，通过 Class 对象可以动态的创建出一个对象，但是这种方法需要强制类型转换（newInstance() 方法返回的 Object 类型对象）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.edu.bit.cs.factory;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line">	<span class="comment">//传给它一个类名，就能得到此类的对象！</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">(String clsName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 创建指定类对应的Class对象</span></span><br><span class="line">			Class&lt;?&gt; cls = Class.forName(clsName);</span><br><span class="line">			<span class="comment">// 返回使用该Class对象所创建的实例</span></span><br><span class="line">			<span class="keyword">return</span> cls.newInstance();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String className=<span class="string">"java.util.GregorianCalendar"</span>;</span><br><span class="line">		<span class="comment">// 获取实例后需要强制类型转换</span></span><br><span class="line">		GregorianCalendar d = (GregorianCalendar) </span><br><span class="line">				ObjectFactory.getInstance(className);</span><br><span class="line">		System.out.println(d.getTime());</span><br><span class="line">		<span class="comment">// 由于没有类型信息，因此，以下这句也能通过编译，但会引发运行时异常</span></span><br><span class="line">		JFrame f = (JFrame) ObjectFactory.getInstance(className);</span><br><span class="line">		f.setVisible(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用泛型技术，可以不用强制类型转换，但是这样不能通过用户输入来创建 Class 实例了。<strong>（重点在于实例化 Class 对象的时候，明确是哪个类的 Class 对象。）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 反射;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2018年04月23日21:26:07</span></span><br><span class="line"><span class="comment"> * 利用泛型技术，实现一个强类型化的对象工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dlz</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrongTypeObjectFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//	中括号里面的 T 是格式需要，第二个 T 是方法的返回类型</span></span><br><span class="line"><span class="comment">//	也不知道如果形参里面没有 T 会是怎样</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getInstace</span><span class="params">(Class&lt;T&gt; myClass)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> myClass.newInstance();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(<span class="string">"创建对象失败"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//		Class&lt;?&gt; myClass = Class.forName("反射.ClassDemo");</span></span><br><span class="line">		</span><br><span class="line"><span class="comment">//		下面这句只能通过这种方法实现，否则无法明确 Class&lt;T&gt; 中的 T 是什么，那样的话仍然需要强制类型转换。</span></span><br><span class="line">		ClassDemo cd = StrongTypeObjectFactory.getInstace(ClassDemo.class);</span><br><span class="line"><span class="comment">//		通过上面的语句就创建了 ClassDemo 的对象	</span></span><br><span class="line">		cd.main(args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="利用反射存取对象的字段"><a href="#利用反射存取对象的字段" class="headerlink" title="利用反射存取对象的字段"></a>利用反射存取对象的字段</h2><p>有一个 Field 类，可以和一个类的字符绑定起来。（绑定的时候不需要跟具体的对象关联起来。）通过 Field 对象的 getField() 和 setField() 方法可以获取、修改一个对象的值。（此时需要跟具体的对象绑定起来，这也很好理解，不绑定谁知道你要修改的是那个对象的字段？）</p>
<p>下面是一个简单的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String str1;</span><br><span class="line">	<span class="keyword">public</span> String str2;</span><br><span class="line">	</span><br><span class="line">	Myclass() &#123;</span><br><span class="line">		str1 = <span class="string">"nishuonimane?"</span>;</span><br><span class="line">		str2 = <span class="string">"nimamaicaibizhungjia"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Myclass myclass = <span class="keyword">new</span> Myclass();</span><br><span class="line"><span class="comment">//		下面这句话的 f 应该是指向了 Myclass 类的 str1 字段，但是没有指明是那个对象的 str1 字段</span></span><br><span class="line"><span class="comment">//		所以使用 get、set 方法的时候，都需要指定对象</span></span><br><span class="line">		Field f = myclass.getClass().getField(<span class="string">"str1"</span>);</span><br><span class="line">		System.out.println(f.get(myclass).toString().replace(<span class="string">"n"</span>, <span class="string">"*"</span>));</span><br><span class="line">		f.set(myclass, f.get(myclass).toString().replace(<span class="string">"n"</span>, <span class="string">"*"</span>));</span><br><span class="line">		System.out.println(myclass.str1);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再来一个修改私有变量的例子。</p>
<p>注意，Field 绑定时使用的方法有所不用，而且需要用一条语句，设置可以访问私有变量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String str1;</span><br><span class="line">	<span class="keyword">public</span> String str2;</span><br><span class="line">	</span><br><span class="line">	Myclass() &#123;</span><br><span class="line">		str1 = <span class="string">"nishuonimane?"</span>;</span><br><span class="line">		str2 = <span class="string">"nimamaicaibizhungjia"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStr1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(str1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Myclass myclass = <span class="keyword">new</span> Myclass();</span><br><span class="line"><span class="comment">//		如果 str1 是私有的，那么应该使用：getDeclaredField</span></span><br><span class="line">		Field f = myclass.getClass().getDeclaredField(<span class="string">"str1"</span>);</span><br><span class="line"><span class="comment">//		下面这句设置私有变量是可以访问的，否则调用 get() 方法会出错。</span></span><br><span class="line">		f.setAccessible(<span class="keyword">true</span>); </span><br><span class="line">		System.out.println(f.get(myclass).toString().replace(<span class="string">"n"</span>, <span class="string">"*"</span>));</span><br><span class="line">		f.set(myclass, f.get(myclass).toString().replace(<span class="string">"n"</span>, <span class="string">"*"</span>));</span><br><span class="line">		myclass.getStr1();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过反射调用类的方法"><a href="#通过反射调用类的方法" class="headerlink" title="通过反射调用类的方法"></a>通过反射调用类的方法</h2><p>通过 Class 对象的 getMethdo() 方法获取到某个类的方法，返回的是一个 Method 对象，然后通过 Method 对象的 invoke() 方法可以调用该方法。（invoke() 方法的两个参数是：对象引用和实际参数。这里的 main() 是静态方法，所以不用指明对象，而且没有形参，所以 invoke() 没有第二个参数。）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecuMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		Method method = Class.forName(scanner.nextLine()).getMethod(<span class="string">"main"</span>);</span><br><span class="line">		method.invoke(<span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bbb</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我叫bbb"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aaa</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我叫aaa"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="简单的反射框架"><a href="#简单的反射框架" class="headerlink" title="简单的反射框架"></a>简单的反射框架</h2><p>如果我们将类的名字，要对应的方法等放到一个外部的配置文件中，而让程序在运行时使用反射去读取它们，进而创建相应的对象并自动调用特定的方法，我们就创建了一个简单的程序框架。</p>
<p><a href="https://github.com/diaolizhi/Java-Code/tree/master/Java%20%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%8D%E5%B0%84%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">例子-GitHub</a></p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 中的文件操作]]></title>
      <url>/2018/04/articles/java%20%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>第十七篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="java-nio-file-Path-接口"><a href="#java-nio-file-Path-接口" class="headerlink" title="java.nio.file.Path 接口"></a>java.nio.file.Path 接口</h1><p>Path 引用一个文件、目录或者文件链接（快捷方式）。</p>
<p>创建 Path 实例的两种方法：</p>
<ol>
<li>通过 FileSystem 对象：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileSystem fileSystem = FileSystem.getDefault();</span><br><span class="line">Path path = fileSystem.getPath(<span class="string">"文件路径"</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>通过 Path 类的静态方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"文件路径"</span>)；</span><br></pre></td></tr></table></figure>
<h1 id="复制、剪切和删除操作"><a href="#复制、剪切和删除操作" class="headerlink" title="复制、剪切和删除操作"></a>复制、剪切和删除操作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复制文件</span></span><br><span class="line">Files.copy(path, toPath);</span><br><span class="line">		</span><br><span class="line"><span class="comment">//剪切文件</span></span><br><span class="line"><span class="comment">//可选择：替代已存在的文件、复制属性、定义为原子性操作</span></span><br><span class="line">Files.move(path, toPath, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">		</span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line">Files.delete(toPath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Files.deleteIfExists(toPath)) &#123;</span><br><span class="line">    System.out.println(<span class="string">"文件存在并成功删除。"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"文件不存在或删除失败。"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="简单的读写操作"><a href="#简单的读写操作" class="headerlink" title="简单的读写操作"></a>简单的读写操作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//		读取文件的所有内容</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = Files.readAllBytes(path);</span><br><span class="line"></span><br><span class="line"><span class="comment">//		将文件当做字符串读入</span></span><br><span class="line">String content = <span class="keyword">new</span> String(bytes, <span class="string">"utf-8"</span>);</span><br><span class="line">System.out.println(content);</span><br><span class="line"></span><br><span class="line"><span class="comment">//		写出一个字符串到文件中</span></span><br><span class="line"><span class="comment">//		无法追加</span></span><br><span class="line">String mystring = <span class="string">"这是一个准备写入文件的字符串。"</span>;</span><br><span class="line">Files.write(path, mystring.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//		将文件当做行序列读入</span></span><br><span class="line">List&lt;String&gt; lines = Files.readAllLines(path);</span><br><span class="line"><span class="keyword">for</span> (String string : lines) &#123;</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="遍历文件夹的一种方式"><a href="#遍历文件夹的一种方式" class="headerlink" title="遍历文件夹的一种方式"></a>遍历文件夹的一种方式</h1><p>这种方法不会进入子目录</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.DirectoryStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetFiles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		Path path = Paths.get(<span class="string">"/home/dlz/diaolizhi.github.io"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			DirectoryStream&lt;Path&gt; children = Files.newDirectoryStream(path);</span><br><span class="line">			<span class="keyword">for</span>(Path entry : children) &#123;</span><br><span class="line">				System.out.println(entry.getFileName());</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h1><p>walkFileTree，构造方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Path <span class="title">walkFileTree</span><span class="params">(Path start, FileVisitor&lt;? <span class="keyword">super</span> Path&gt; visitor)</span> <span class="keyword">throws</span> IOException</span></span><br></pre></td></tr></table></figure>
<p>FileVisitor 是一个接口，定义了四个方法：</p>
<ol>
<li>preVisitDirectory：访问<strong>文件夹</strong>前调用</li>
<li>postVisitDirectory：访问<strong>文件夹</strong>后调用</li>
<li>visitFile：访问文件时调用</li>
<li>visitFileFailed：当指定文件不可访问时调用 </li>
</ol>
<p>JDK 中定义了 SimpleFileVisitor&lt;&gt; 实现了 FileVisitor 接口，我们可以继承 SimpleFileVisitor<path> 并重写其中的方法。</path></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileVisitResult;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.SimpleFileVisitor;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 查找路径下的所有文件</span></span><br><span class="line"><span class="comment"> * 2018年04月01日12:35:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetFiles2</span> <span class="keyword">extends</span> <span class="title">SimpleFileVisitor</span>&lt;<span class="title">Path</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		Path path = Paths.get(<span class="string">"src/"</span>);</span><br><span class="line">		GetFiles2 visitor = <span class="keyword">new</span> GetFiles2();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Files.walkFileTree(path, visitor);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//		访问文件夹后的操作</span></span><br><span class="line">		System.out.println(dir + <span class="string">"访问结束"</span>);</span><br><span class="line">		<span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">preVisitDirectory</span><span class="params">(Path dir, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//		访问文件夹前的操作</span></span><br><span class="line">		System.out.println(<span class="string">"开始访问："</span> + dir);</span><br><span class="line">		<span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//		if(attrs.isRegularFile())&#123;</span></span><br><span class="line"><span class="comment">//			System.out.println("Regular File:");</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">		System.out.println(file);</span><br><span class="line"><span class="comment">//		可以在访问文件时输出文件名字</span></span><br><span class="line">		<span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFileFailed</span><span class="params">(Path file, IOException exc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//		访问文件失败时输出错误信息，然后继续</span></span><br><span class="line">		System.err.println(exc.getMessage());</span><br><span class="line">		<span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h1><p>JDK7 中定义了一个 PathMatcher 接口，实现此接口的类可用于确定路径的匹配规范。</p>
<p>匹配规则有两种：一是诸如 “*.java” 之类的通配符，另一类是正则表达式。</p>
<p>JDK 中规定第一种匹配规则以 “glob:” 打头，第二种以 “regex:” 开头。</p>
<p>FileSystem.getDefault().getPathMatcher() 方法接收匹配字符串，返回一个可用的 PathMatcher 对象，程序之后就可以用它来进行文件名的匹配工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileVisitResult;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.PathMatcher;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.SimpleFileVisitor;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 2018年04月01日13:17:58</span></span><br><span class="line"><span class="comment"> * 查找指定名字的文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFinder2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		Path path = Paths.get(<span class="string">"/home/dlz"</span>);</span><br><span class="line"><span class="comment">//		MyVisitor 是自定义类，继承了 SimpleFileVisitor&lt;Path&gt;</span></span><br><span class="line">		MyVisitor visitor = <span class="keyword">new</span> MyVisitor(<span class="string">".*?Java.*?md"</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//			visitor 的作用是：定义了了遍历文件时的操作</span></span><br><span class="line">			Files.walkFileTree(path, visitor);</span><br><span class="line"><span class="comment">//			找到的文件（应该说是 Path 对象都放在一个集合里面）</span></span><br><span class="line">			ArrayList&lt;Path&gt; results = visitor.results;</span><br><span class="line">			<span class="keyword">if</span>(results.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span>(Path p : results) &#123;</span><br><span class="line">					System.out.println(p);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">"不存在此类文件。"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVisitor</span> <span class="keyword">extends</span> <span class="title">SimpleFileVisitor</span>&lt;<span class="title">Path</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> PathMatcher matcher;<span class="comment">//路径匹配对象</span></span><br><span class="line">	<span class="keyword">public</span> ArrayList&lt;Path&gt; results = <span class="keyword">new</span> ArrayList&lt;Path&gt;();<span class="comment">//用来保存 Path 对象</span></span><br><span class="line">	</span><br><span class="line">	MyVisitor(String regex) &#123;</span><br><span class="line"><span class="comment">//		通过构造方法，初始化一个路径匹配对象</span></span><br><span class="line">		matcher =  FileSystems.getDefault().getPathMatcher(<span class="string">"regex:"</span> + regex);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		Path name = file.getFileName();</span><br><span class="line">		System.out.println(<span class="string">"检查："</span> + name);</span><br><span class="line">		<span class="keyword">if</span> (matcher.matches(name)) &#123;<span class="comment">//使用路径匹配对象的 matches 方法对比当前文件名是否合适</span></span><br><span class="line">			System.out.println(<span class="string">"合适"</span>);</span><br><span class="line">			results.add(name);  <span class="comment">//这里是 file 还是 name?</span></span><br><span class="line"><span class="comment">//			如果想保存完整路径就是 file，保存文件名就是 name</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.visitFile(file, attrs);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFileFailed</span><span class="params">(Path file, IOException exc)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.err.println(file);</span><br><span class="line">		<span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结思路：</p>
<ol>
<li>首先要遍历文件夹下面所有文件，所以必须使用 Files.walkFileTree 方法。</li>
<li>因为要对比文件的名字，所以需要重写 visitFile 方法，也就是说要自定义一个类，继承 SimpleFileVisitor<path> ，然后重写 visiFile 方法。</path></li>
<li>对比文件名需要用到 PathMatcher，通过 FileSystems.getDefault().getPathMatcher 方法初始化一个 PathMatcher 对象。</li>
<li>对比文件是通过 PathMatcher 对象的 matches 方法。将符合条件的 Path 对象放入集合中，以便进行其他操作。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 面向对象编程基本技能]]></title>
      <url>/2018/03/articles/Java%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%9F%BA%E6%9C%AC%E6%8A%80%E8%83%BD%20/</url>
      <content type="html"><![CDATA[<p>第十六篇关于 Java 的笔记.<br><a id="more"></a></p>
<p>主要内容：</p>
<ul>
<li>对象比较（使用 equals 方法比较两个对象内容是否相同，使用 compareTo 方法比较两个对象的大小。）</li>
<li>对象组合（描述对象之间的关系：包含或者引用。）</li>
<li>对象复制（把一个对象的内容全部复制到另一个对象里面。）</li>
</ul>
<h1 id="对象比较"><a href="#对象比较" class="headerlink" title="对象比较"></a>对象比较</h1><h2 id="Comparable-接口"><a href="#Comparable-接口" class="headerlink" title="Comparable 接口"></a>Comparable 接口</h2><p> Comparable 接口里面定义了一个 compareTo 方法，这个方法接收一个对象。</p>
<p>Comparable 接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常一个类实现 Comparable 接口，然后在 CompareTo 方法中对两个对象（一个是形参，一个是 this）进行比较。如果 this 比较小，则返回 -1，相等则返回 0，否则返回 1 。</p>
<p>下面定义了一个学生类，它实现了 Comparable 接口，在 compareTo 方法中，通过分数比较两个对象的大小。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;  <span class="comment">// 需要指明泛型接口的类型变量，不能使用 T</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line">	</span><br><span class="line">	Student(String name, <span class="keyword">int</span> score) &#123;	</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.score = score;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;  <span class="comment">// 不理解为什么，这里的参数类型必须是 Student</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.score == o.score)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.score &lt; o.score)&#123;</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> score;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现了 Comparable 接口，并且写好了 compareTo 方法，所以两个学生对象之间就可以比较大小了。</p>
<p>我们可以利用 compareTo 方法，自定义方法来比较两个对象的大小，也可以利用 JDK 自带的方法对学生数组进行排序。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Student[] students2 = <span class="keyword">new</span> Student[<span class="number">3</span>];  <span class="comment">// 中括号内指定数组元素的个数</span></span><br><span class="line">		students2[<span class="number">0</span>] = <span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">80</span>);</span><br><span class="line">		students2[<span class="number">1</span>] = <span class="keyword">new</span> Student(<span class="string">"李四"</span>, <span class="number">60</span>);</span><br><span class="line">		students2[<span class="number">2</span>] = <span class="keyword">new</span> Student(<span class="string">"王五"</span>, <span class="number">70</span>);</span><br><span class="line">		Arrays.sort(students2);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; students2.length; i++) &#123;</span><br><span class="line">			System.out.println(students2[i].getName() + students2[i].getScore());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals 方法"></a>equals 方法</h2><ul>
<li>如果使用 ”==“ 比较两个对象，那么比较的是这两个对象变量是否引用同一个对象。</li>
<li>如果需要比较对象的内容，也就是各字段的值，通常是调用对象的 equals 方法。</li>
<li>equals 方法由 Object 类所定义，默认情况下还是比较两个对象变量是否引用同一个对象。所以通常需要重写 equals 方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重写 Object 的 equals 方法，注意其参数类型必须是 ”Object“。</li>
<li>重写 Object 的模板：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//	重写 equals 的模板</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(obj <span class="keyword">instanceof</span> xixi) &#123;</span><br><span class="line">			xixi xi = (xixi)obj;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.value == xi.value;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义比较规则"><a href="#自定义比较规则" class="headerlink" title="自定义比较规则"></a>自定义比较规则</h2><p>之前说过，实现了 Comparable 接口，就可以调用 Arrays.sort() 进行排序，它默认从小到大进行排序。</p>
<p>假设对学生排序，而学生类的 compareTo 方法是根据分数返回 0、-1 或者 1 。那么默认是根据分数从小到达进行排序。</p>
<p>如果想根据学生的姓名进行排序该怎么办呢？方法是自定义比较规则。</p>
<ul>
<li>自定义一个类，实现 Comparator 接口</li>
<li>重写 compare 方法（接收两个对象，返回 0、-1 或 1 ，表示 s1 和 s2 比较的结果）</li>
<li>在调用 Arrays.sort() 的时候，将自定义比较规则传入</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> s1.getName().compareTo(s2.getName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(students2, <span class="keyword">new</span> NameComparator());</span><br></pre></td></tr></table></figure>
<p>这样一来，学生对象的数组就已经根据名字来排序了。</p>
<h1 id="对象组合"><a href="#对象组合" class="headerlink" title="对象组合"></a>对象组合</h1><p>一个对象包容另一个对象，称为“对象组合”。</p>
<p>有两种组合方式：</p>
<ul>
<li>A 对象完全包容 B 对象，容器对象管理被包容对象的生命期。（B 是 A 的内部类）</li>
<li>B 对象是独立的，A 对象引用现成的 B 对象。（A 对象里面有一个 B 的引用而已）</li>
</ul>
<h1 id="对象复制"><a href="#对象复制" class="headerlink" title="对象复制"></a>对象复制</h1><ul>
<li>浅克隆，只是复制每个字段的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneATest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		A a = <span class="keyword">new</span> A();</span><br><span class="line">		a.change();</span><br><span class="line">		A b = CloneA(a);</span><br><span class="line">		System.out.println(a.a + <span class="string">"   "</span> + b.a);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	简单复制对象，只是复制里面的值。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> A <span class="title">CloneA</span><span class="params">(A other)</span> </span>&#123;</span><br><span class="line">		A a = <span class="keyword">new</span> A();</span><br><span class="line">		a.a = other.a;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		a = <span class="number">66</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果类中 b 字段引用一个对象，那么浅克隆的方式可能会导致，两个对象的 b 字段指向同一个对象，这显然不是真正的复制，我们需要的是两个对象的 b 各自指向一个对象，同时被指向的对象的内容完全一样。而这就是深克隆。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCopy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		A3 a = <span class="keyword">new</span> A3();</span><br><span class="line">		A3 b = CloneA3(a);</span><br><span class="line">		System.out.println(b.b.val);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> A3 <span class="title">CloneA3</span><span class="params">(A3 other)</span> </span>&#123;</span><br><span class="line">		A3 a = <span class="keyword">new</span> A3();</span><br><span class="line">		a.num = other.num;</span><br><span class="line">		a.b = <span class="keyword">new</span> B();</span><br><span class="line">		a.b.val = other.b.val;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A3</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">public</span> B b = <span class="keyword">new</span> B();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> val = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>JDK 中提供了一个 Cloneable 接口，需要深克隆的对象可以实现这一接口。（注意强制类型转换和捕获异常）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCopy2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		MyCopy myCopy = <span class="keyword">new</span> MyCopy();</span><br><span class="line">		myCopy.change();</span><br><span class="line">		MyCopy myCopy2 = (MyCopy) myCopy.clone();</span><br><span class="line">		System.out.println(myCopy2.a6.val);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCopy</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">public</span> A6 a6;</span><br><span class="line">	</span><br><span class="line">	MyCopy() &#123;</span><br><span class="line">		a6 = <span class="keyword">new</span> A6();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		MyCopy mycopy = <span class="keyword">new</span> MyCopy();</span><br><span class="line">		mycopy.num = <span class="keyword">this</span>.num;</span><br><span class="line">		mycopy.a6 = <span class="keyword">new</span> A6();</span><br><span class="line">		mycopy.a6.val = <span class="keyword">this</span>.a6.val;</span><br><span class="line">		<span class="keyword">return</span> mycopy;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		a6.val = <span class="number">999</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A6</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> val = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 内部类]]></title>
      <url>/2018/03/articles/Java%20%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>第十五篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="内部类的定义和特点"><a href="#内部类的定义和特点" class="headerlink" title="内部类的定义和特点"></a>内部类的定义和特点</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>简单来说， 在一个类里面定义的类就叫做内部类。</p>
<p>如下，在 Outer 里面又定义了一个叫做 Inner 的类，这个 Inner 就叫做内部类，而 Outer 就是外部类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">printNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>内部类可以访问外部类的所有成员</li>
<li>外部类需要创建内部类的对象才能访问（私有成员也可以访问）</li>
</ul>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Outer o = <span class="keyword">new</span> Outer();</span><br><span class="line">		o.method();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">666</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 内部类访问外部类的私有成员</span></span><br><span class="line">			System.out.println(<span class="string">"The num is: "</span>+num);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">		i.printNum();<span class="comment">// 在外部类创建内部类的对象，并访问它的私有成员</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="何时使用内部类"><a href="#何时使用内部类" class="headerlink" title="何时使用内部类"></a>何时使用内部类</h1><p>现实世界里面，一个事物还包含了另一个事物，那么为它们设计类的时候，就可以使用到内部类。</p>
<h1 id="静态内部类及其使用"><a href="#静态内部类及其使用" class="headerlink" title="静态内部类及其使用"></a>静态内部类及其使用</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>在内部类加上 static 修饰符就是<em>静态内部类</em>。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer2</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何直接创建静态内部类对象"><a href="#如何直接创建静态内部类对象" class="headerlink" title="如何直接创建静态内部类对象"></a>如何直接创建静态内部类对象</h2><ol>
<li>在内部类非静态的情况下<strong>（不是直接创建，用来作对比而已）</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		创建一个内部类的对象（内部类非静态的情况下）</span></span><br><span class="line">		Outer2.Inner i = <span class="keyword">new</span> Outer2().new Inner();</span><br><span class="line">		i.show();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer2</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 变量和成员都是非静态的。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">999</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"The num is: "</span> + num);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">		i.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在内部类是静态的情况下</li>
</ol>
<p><strong>静态内部类体现在可以直接创建其对象，而不是先创建一个外部类的对象。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		直接创建内部类对象（内部类是静态的情况下。）</span></span><br><span class="line"><span class="comment">//		注意：如果内部类中访问了外部类中的成员，那么该成员也必须是静态的</span></span><br><span class="line"><span class="comment">//		注意：new Outer2.Inner() 中的 Outer2 后面是没有括号的</span></span><br><span class="line">		Outer2.Inner i = <span class="keyword">new</span> Outer2.Inner();</span><br><span class="line">		i.show();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer2</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 静态内部类要访问到的成员也是静态的</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">999</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 内部类是静态的</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 静态内部类中的方法还是非静态的</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"The num is: "</span> + num);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">		i.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="静态内部类中的静态方法"><a href="#静态内部类中的静态方法" class="headerlink" title="静态内部类中的静态方法"></a>静态内部类中的静态方法</h2><p>静态内部类中的静态方法，可以直接访问。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//		如果内部类是静态的，并且内部类中的方法也是静态的，那么不创建对象就可以访问了</span></span><br><span class="line">		Outer2.Inner.show();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer2</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// num 被静态方法所访问，所以 num 也要是静态的。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">999</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"The num is: "</span> + num);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="内部类访问重名变量的特点"><a href="#内部类访问重名变量的特点" class="headerlink" title="内部类访问重名变量的特点"></a>内部类访问重名变量的特点</h1><p>如果在外部类中有一个叫做 num 的变量，在内部类中也有一个 num 变量，在内部类的方法里面还有一个 num 变量，那么如何访问到这些同名的变量呢？</p>
<p>答案是：</p>
<ul>
<li>访问方法内的变量：直接访问即可</li>
<li>访问内部类中的变量：this.变量名</li>
<li>访问外部类中的变量：外部类名.this.变量名</li>
</ul>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.inner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerTest2</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Outer3().method();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer3</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">888</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">88</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> num = <span class="number">8</span>;</span><br><span class="line">			System.out.println(<span class="string">"The num is: "</span> + num);<span class="comment">// 调用的是 show 方法中的 num</span></span><br><span class="line">			System.out.println(<span class="string">"The num is: "</span> + <span class="keyword">this</span>.num);<span class="comment">// 调用的是 Inner 类中的 num</span></span><br><span class="line">			System.out.println(<span class="string">"The num is: "</span> + Outer3.<span class="keyword">this</span>.num);<span class="comment">// 调用的是 Outer3 类中的 num</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Inner().show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顺便一提，内部类之所以可以访问外部类，是因为内部类持有外部类的引用。</p>
<h1 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>局部内部类就是：在类的方法中定义的类。</p>
<p>例如，在 Outer4 的 method 方法中的 Inner 类就是局部内部类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer4</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">""</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><p>在局部内部类中，只能访问外部类中用 final 修饰的变量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer4</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 局部内部类中使用的变量要用 final 修饰</span></span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">6</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 这里使用了 method 方法中的变量</span></span><br><span class="line">				System.out.println(num);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原因是： 如果 method 方法中定义了一个 Inner 内部类，那么这个类可以将这个内部类的对象返回（可以用 Object 接收）。问题是，将这个对象返回了，可是 method 方法也出栈了，method 的局部变量都释放了，Inner 类中使用的变量不存在，就会出错了。如果使用的变量被 final 修饰了，比如 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<p>那么出现 num 的地方，实际上使用的是 6 。这样就不存在使用的变量被释放的情况了。</p>
<h2 id="Java8-的特性"><a href="#Java8-的特性" class="headerlink" title="Java8 的特性"></a>Java8 的特性</h2><p>下面的代码是可以运行的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer4</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 局部内部类中使用到了，但是并没有使用 final 修饰</span></span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">6</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(num);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看成在 Java8 中，默认给我们加了 final 。前提是这个变量没有被修改。</p>
<p>如果这个变量被修改了，那么就不会默认地加上 final。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer4</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 局部内部类中使用到了，但是不用加 final</span></span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">6</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 这里使用了 method 方法中的变量</span></span><br><span class="line">				System.out.println(num);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">// 如果加了下面这句，就无法通过编译了</span></span><br><span class="line">        <span class="comment">// num = 7;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从编译器的角度看，你的方法中有个变量，你只是在局部内部类中访问了一下，那么我就帮你个忙，替你把 final 几个字加上去，反正这个变量不需要更改。但是，如果这个变量你还要改动的，那我就不能给你加上 finnal 了，加了你就不能改了，我只能提醒你，你的代码有问题了。</p>
<h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>匿名内部类它也是内部类，所以它还是在一个类里面定义的。</p>
<p>其次，它是匿名的，也就是没有名字的。</p>
<p>它没有名字，那怎么创建这个类的对象呢？只能用它爹的名字了。</p>
<p>所以，匿名内部类的一个要求就是，必须继承某个类，或者实现某个接口。（别忘了，任何一个类都是继承自 Object 类的。）</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>通过它爹的名字，来创建一个匿名内部类。这个类与它爹不同，因为这个类可以覆盖它爹的方法，或者定义新的方法。创建一个匿名内部类之后，就可以直接调用里面的方法了。不过这样只能调用一个方法，要调用另一个的话，只能再创建另一个匿名内部类了，所以，可以采用第二种方式。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer5</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Demo() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"第一个内部匿名类。"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.show();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建了一个匿名内部类之后，将这个对象的保存起来。这样就可以，创建一次对象，调用多次方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer5</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Demo d = <span class="keyword">new</span> Demo() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"第一个内部匿名类。"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类的第二个方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">		d.show();</span><br><span class="line">        d.show2(); <span class="comment">// 创建一次对象，多次调用对象的方法。</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>需要注意的是：通过父类引用，只能调用父类中声明的方法。</strong></p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 泛型编程]]></title>
      <url>/2018/03/articles/Java%20%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>第十四篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="一-Java-“泛型”-相关术语"><a href="#一-Java-“泛型”-相关术语" class="headerlink" title="一. Java “泛型” 相关术语"></a>一. Java “泛型” 相关术语</h1><ul>
<li>以 ArrayList&lt;E&gt;、ArrayList&lt;Integer&gt; 为例<ol>
<li>ArrayList&lt;E&gt; 定义了一个泛型类型，“E”称为”类型变量“或”参数类型“。</li>
<li>ArrayList&lt;Integer&gt; 称为“参数化的类型”，“Integer”称为“实际类型参数”。</li>
<li>ArrayList 称为泛型类型 ArrayList&lt;E&gt; 的“原始类型（raw type)”。</li>
</ol>
</li>
</ul>
<h1 id="二-泛型类"><a href="#二-泛型类" class="headerlink" title="二. 泛型类"></a>二. 泛型类</h1><ul>
<li>我们定义了泛型类 Pair&lt;&gt;，但是在使用的时候，必须给 T 指定一个具体的类型（比如：String）：Pair&lt;String&gt;。（实际上在有些简单的程序中，不加尖括号也不会出错。就像集合一样，可以不加，但是会有警告，而且可能在运行时会出错。出错的原因可能是：传入了不恰当类型的参数。）</li>
<li>“Pair&lt;String&gt;” 就是 “Pair&lt;T&gt;”的实例化（instantiate)。</li>
</ul>
<h1 id="三-泛型使用”须知“"><a href="#三-泛型使用”须知“" class="headerlink" title="三. 泛型使用”须知“"></a>三. 泛型使用”须知“</h1><ol>
<li><p>泛型类型必须是引用类型，不能是基本数据类型。（也就是说我要实例化一个 Pair&lt;T&gt;的对象，不能写 Pair&lt;double&gt;，只能 Pair&lt;Double&gt;。</p>
</li>
<li><p>参数化类型可以应用一个 ”原始类型对象（raw type）”的对象（反过来也可以），但是编译时会产生一个警告。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; strs = <span class="keyword">new</span> ArrayList();</span><br><span class="line">ArrayList strs2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure>
</li>
<li><p>不能定义泛型化数组</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String&gt;[] table = <span class="keyword">new</span> Pair&lt;String&gt;[<span class="number">10</span>];<span class="comment">//error</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不能直接创建泛型类型的实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> T();<span class="comment">//error</span></span><br><span class="line">        second = <span class="keyword">new</span> T();<span class="comment">//error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型类型不能直接或间接继承自 Throwable。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Problem</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Exception</span> //<span class="title">error</span></span></span><br></pre></td></tr></table></figure>
<p>所以也无法抛出或捕获泛型类型的异常对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (T e) &#123;...&#125; <span class="comment">//error</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不能定义静态泛型成员，以下代码无法通过编译</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">f</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="四-从泛型类派生子类的要求"><a href="#四-从泛型类派生子类的要求" class="headerlink" title="四. 从泛型类派生子类的要求"></a>四. 从泛型类派生子类的要求</h1><ol>
<li><p>不允许基类中有泛型参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChild</span> <span class="keyword">extends</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt; </span>&#123; &#125; <span class="comment">//error</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChild</span> <span class="keyword">extends</span> <span class="title">MyClass</span>&lt;<span class="title">String</span>&gt; </span>&#123; &#125; <span class="comment">//OK</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果 MyClass 是泛型类，在定义子类时不指定泛型参数，则 MyClass 的泛型参数默认为 Object。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChild</span> <span class="keyword">extends</span> <span class="title">MyClass</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h1 id="五-泛型方法"><a href="#五-泛型方法" class="headerlink" title="五. 泛型方法"></a>五. 泛型方法</h1><p>下面第一个属于泛型方法，剩下两个是为了观察：传入不同类型时，到底会调用哪个方法？得到的结果是：调用最合适的方法。已知编译器的擦除特点之后， 可以直接把第一个方法的参数类型看成是：Object。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayAlg</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 泛型方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getMiddle</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a[a.length / <span class="number">2</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">double</span>[] d)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">66.66</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 有了这个方法，传入 Integer 数组的时候，就会调用这个方法</span></span><br><span class="line">	<span class="comment">// 在不存在的时候，可能是寻找 Integer 的基类，所以找到了泛型方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getMiddle</span><span class="params">(Integer[] i)</span> </span>&#123;</span><br><span class="line">		 <span class="keyword">return</span> <span class="number">66</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="六-类型变量的限定"><a href="#六-类型变量的限定" class="headerlink" title="六. 类型变量的限定"></a>六. 类型变量的限定</h1><ul>
<li><p>下面的代码中如果没有 &lt;T extends Comparable&gt; ，那么 min.compareTo() 就会报错，因为无法保证传入的类型实现了 Comparable 接口。</p>
</li>
<li><p>虽说 Comparable 是接口不是类，但还是使用了 extends 关键字，这是 Java 设计者规定的。</p>
</li>
<li><p>一个类型变量可以有多个限定：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T extends Comparable &amp; Serializable</span><br></pre></td></tr></table></figure>
</li>
<li><p>限定中可以有多个接口，但只能有一个类。如果采用一个类作为限定，那么它必须是限定表中的第一位。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&gt; <span class="function">T <span class="title">minmax</span><span class="params">(T[] a)</span> </span>&#123; <span class="comment">// 加了限定为什么会出现警告？</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="keyword">null</span> || a.length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		T min = a[<span class="number">0</span>];</span><br><span class="line">		T max = a[<span class="number">0</span>];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (min.compareTo(a[i]) &gt; <span class="number">0</span>) min = a[i];</span><br><span class="line">			<span class="keyword">if</span> (max.compareTo(a[i]) &lt; <span class="number">0</span>) max = a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> max;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="七-泛型类型的继承规则"><a href="#七-泛型类型的继承规则" class="headerlink" title="七. 泛型类型的继承规则"></a>七. 泛型类型的继承规则</h1><p>假设 Employee 是 Manager 的父类，但是 Pair&lt;Employee&gt; 和 Pair&lt;Manager&gt; 是没有关系的。（它们两个顶多算是兄弟，不符合继承关系。）</p>
<h1 id="八-类型通配符"><a href="#八-类型通配符" class="headerlink" title="八. 类型通配符"></a>八. 类型通配符</h1><ul>
<li><p>在泛型限制中使用 ? 可以匹配任意类型。</p>
</li>
<li><p>要求 ? 必须是 T 的子类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt; ? extends T&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>要求 ? 必须是 T 的父类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt; ? <span class="keyword">super</span> T&gt;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h2 id="引入-”-“-的好处"><a href="#引入-”-“-的好处" class="headerlink" title="引入 ”?“ 的好处"></a>引入 ”?“ 的好处</h2><ul>
<li><p>考虑一下泛型方法，它以 MyClass&lt;Parent&gt; 作为参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(MyClass &lt;Parent&gt; obj)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Parent 类有一个子类 Child，我们可以这样调用它：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething(<span class="keyword">new</span> MyClass&lt;Parent&gt;());</span><br></pre></td></tr></table></figure>
</li>
<li><p>却不能这样调用它（这就像”泛型类型的继承规则“说的那样，它们没有继承关系）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething(<span class="keyword">new</span> MyClass&lt;Child&gt;());</span><br></pre></td></tr></table></figure>
</li>
<li><p>将泛型声明改为下面这样就行了（可以理解成：Myclass&lt; ? extends Parent&gt; 是 MyClass&lt;Parent&gt; 和 MyClass&lt;Child&gt; 的基类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Myclass&lt; ? extends Parent&gt; obj)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="九-擦除与恢复"><a href="#九-擦除与恢复" class="headerlink" title="九. 擦除与恢复"></a>九. 擦除与恢复</h1><ul>
<li><p>类型擦除</p>
<ul>
<li>以前版本的类解释器不知道什么是泛型，所以编译器为了让类解释器可以运行包含泛型的程序，会将类型变量（T）擦除掉，并替换为限定类型（无限定的变量用 Object）。</li>
</ul>
</li>
<li><p>翻译泛型表达式</p>
<ul>
<li>类型擦除之后，方法的返回类型有可能是 Object，所以在必要时编译器会插入强制类型转换。</li>
</ul>
</li>
<li><p>翻译泛型方法</p>
<ul>
<li><blockquote>
<p><a href="http://blog.csdn.net/pacosonswjtu/article/details/50374131" target="_blank" rel="noopener">java泛型——桥方法</a></p>
</blockquote>
</li>
<li><p>泛型方法的问题主要是在继承的时候：子类无法覆盖泛型父类中的方法。为了解决这个问题就有了桥方法，桥方法由编译器自动生成，间接的调用重新定义的方法。</p>
</li>
<li><p>问题 2：如果没有形参，那么桥方法和重新定义的方法只有返回值不同，看似不能共存，但是桥方法是编译器生成的，所以它有能力分辨，不用我们操心。</p>
</li>
</ul>
</li>
</ul>
<p><strong>对泛型的理解还远远不够，书上很多东西都还看不懂，还需要长时间的学习才能掌握。</strong></p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《坚持，一种可以养成的习惯》笔记]]></title>
      <url>/2018/03/articles/%E3%80%8A%E5%9D%9A%E6%8C%81%EF%BC%8C%E4%B8%80%E7%A7%8D%E5%8F%AF%E4%BB%A5%E5%85%BB%E6%88%90%E7%9A%84%E4%B9%A0%E6%83%AF%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>写完这篇笔记，寒假也基本结束。<br><a id="more"></a></p>
<p>第一章</p>
<h1 id="习惯的力量"><a href="#习惯的力量" class="headerlink" title="习惯的力量"></a>习惯的力量</h1><blockquote>
<p>习惯所产生的效果会通过<em>复利</em>而产生惊人的结果。就算是小小的行动，一旦重复累积，成果就会以<em>等比级数</em>倍增。还有，小小的行动最初可能成效很慢，但是到了某个时期就会产生<em>爆炸性</em>的效果。问题在于大多数人都等不到那个时候，就自行放弃了。</p>
</blockquote>
<p>这段话没有引用严谨的科学依据，但是根据现实，我们可以判断它的对错。好的习惯确实对人生有很大影响，比如习惯于保持良好坐姿的人，就不会像我一样摘下眼镜一片朦胧。也有人坚持写作的习惯，虽然外表看不出有什么不同，但是那些人就是可以利用文字赚钱。</p>
<h1 id="习惯的定义"><a href="#习惯的定义" class="headerlink" title="习惯的定义"></a>习惯的定义</h1><blockquote>
<p>所谓习惯就是<em>不依赖意志力或毅力，把自己想要持续的事情引导到如每天刷牙般轻松。</em>总之，保持行动自动地持续进行，就是习惯。</p>
</blockquote>
<p>习惯的定义不难理解，就是那些不用思考就自然而然去做的事情。比如我现在每天晚上睡前的玩手机，或者别人每天睡前的阅读。</p>
<p>有一本书的作者提到，<strong>人的所有行动至少有百分之九十五，是由习惯所决定的。</strong>这也说明了培养良好习惯有多么重要。</p>
<p>为什么人会产生习惯呢？因为人的意识是有限的，如果简单的事情都需要费劲心机去做，就无法完成困难的事情了。而如果把一些有意义的事情变成了习惯，使得我们每天可以轻松地完成它们，我们岂不是会有很大的收获？</p>
<h1 id="习惯引力"><a href="#习惯引力" class="headerlink" title="习惯引力"></a>习惯引力</h1><p><em>习惯引力</em>这个词语不常见，但是<em>三分钟热度</em>想必大家都听说过，而三分钟热度的原因就是有习惯引力的阻碍。</p>
<p>习惯引力有两个特点：</p>
<ul>
<li>抵抗新变化。当我们想要培养一个习惯的时候，身体就会开始产生反抗。</li>
<li>维持现状。当大脑认为某种行为跟往常一样，就是拼命地维护这种习惯。</li>
</ul>
<p>第一个特点解释了为什么会出现<em>三分钟热度</em>的现象，出现这种现象，说明我们是正常人。第二个告诉我们很难改掉坏习惯的原因，也告诉我们，当大脑认为<em>某种良好的行为</em>跟往常一样时，我们就成功地养成了一个习惯。那么这个过程需要多久呢？</p>
<h1 id="持续多久才能习惯化"><a href="#持续多久才能习惯化" class="headerlink" title="持续多久才能习惯化"></a>持续多久才能<em>习惯化</em></h1><p>对于习惯的养成有很多种说法（二十一天、一个月、三个月和六个月），但是培养不同的习惯所需要的时间是不同的。</p>
<ul>
<li>程度一 行为习惯<ul>
<li>所需时间 一个月</li>
<li>阅读、写日记、整理、节约等</li>
</ul>
</li>
<li>程度二 身体习惯<ul>
<li>所需时间 三个月</li>
<li>减肥、运动、早起、戒烟等</li>
</ul>
</li>
<li>程度三 思考习惯<ul>
<li>所需时间：六个月</li>
<li>逻辑思考能力、创意能力、正面思考能力</li>
</ul>
</li>
</ul>
<p>这本书主要探讨程度一中的习惯，对于程度二也有提及，需要注意，习惯养成的时间与阶段是不一样的。</p>
<h1 id="习惯养成的三个阶段"><a href="#习惯养成的三个阶段" class="headerlink" title="习惯养成的三个阶段"></a>习惯养成的三个阶段</h1><ul>
<li>阶段一：反抗期（第 1~7 天），42% 的失败率</li>
<li>阶段二：不稳定期（第 8~21天），40% 的失败率</li>
<li>阶段三：倦怠期（第 22～30 天），18% 的失败率</li>
</ul>
<p>如同火箭发射时的地球引力一样，习惯引力在开始时给人们带来的阻力最大。而一旦习惯养成，只需极少的精力就能够让习惯持续进行，就像需要少许能量就能够在无重力的太空中前进一样。</p>
<p>我们常说的三分钟热度指的就是在反抗期就失败了，如果进一步突破不稳定期，可以说成功了 8 成。</p>
<h1 id="七十项习惯清单"><a href="#七十项习惯清单" class="headerlink" title="七十项习惯清单"></a>七十项习惯清单</h1><h2 id="一、自我投资"><a href="#一、自我投资" class="headerlink" title="一、自我投资"></a>一、自我投资</h2><p>阅读/影音学习/写日记/认识新朋友/学习专业知识/考资格证/参加研讨会、读书会/把在路上的时间转变为学习时间/利用博客、电子报发布信息/订阅刊物/重新检视人生计划/把一年的目标写在纸上</p>
<h2 id="二、金钱"><a href="#二、金钱" class="headerlink" title="二、金钱"></a>二、金钱</h2><p>存钱/节约/投资/填写家庭收支簿/不赌博/请他人吃饭/捐款</p>
<h2 id="三、心灵成长（压力、动力）"><a href="#三、心灵成长（压力、动力）" class="headerlink" title="三、心灵成长（压力、动力）"></a>三、心灵成长（压力、动力）</h2><p>每天要说积极向上的话/冥想/每天写一件感恩的事/早上泡澡/每天都有一件期待的事/每周做一件有趣的事/整理/一天做三次深呼吸/听喜欢的音乐/问有建设性的问题/一天少做一件事（工作清单或备忘录）</p>
<h2 id="四、运用时间"><a href="#四、运用时间" class="headerlink" title="四、运用时间"></a>四、运用时间</h2><p>不看电视/拟定第二天的计划/限定看电子邮件的次数/拒绝聚餐的邀约/杂事统一处理/先处理最重要的三件事/列工作清单/严守下班时间/提早进公司/一次只集中在一件事上/不断改善对时间的运用</p>
<h2 id="五、人际关系"><a href="#五、人际关系" class="headerlink" title="五、人际关系"></a>五、人际关系</h2><p>经常称呼对方的名字/每天都要称赞他人/一天有 40% 的时间保持笑容/大声地与人打招呼/成为倾听的人/原谅他人/写交换日记/每天与重要的人交谈 10 分钟以上/不说抱怨、不满的话/先说结论/以双赢的目标思考</p>
<h2 id="六、健康、美"><a href="#六、健康、美" class="headerlink" title="六、健康、美"></a>六、健康、美</h2><p>吃健康食品/把白米换成糙米/每天刷 3 次牙/吃天然食物/每天睡满 7 个小时/一天喝 2 升水/每天晒太阳 30 分钟/不喝酒/讲究穿着/均衡摄取营养 ★/饮食以蔬果为主 ★/戒烟 ★/肌力训练 ★/做有氧运动 ★/限制热量摄取 ★/按摩/做伸展运动</p>
<p>列表中出现 ★ 者，为需要三个月时间培养的身体习惯。</p>
<h1 id="培养习惯的原则"><a href="#培养习惯的原则" class="headerlink" title="培养习惯的原则"></a>培养习惯的原则</h1><p>开始培养习惯之前，务必将这两件事牢记于心</p>
<ul>
<li>坚持每天行动<ul>
<li>成功培养习惯的秘诀在于，至少在 30 天的过程中，尽量减少什么都没做的空档。当然，30 天之后，行动的频率降到一周 3~4 次也就没有关系了。</li>
</ul>
</li>
<li>一定要坚持到底<ul>
<li>培养一项习惯的前提是，在三个阶段中执行的各项对策一定要持续 30  天。（w)</li>
</ul>
</li>
</ul>
<hr>
<p>第二章</p>
<h1 id="顺利培养习惯的三个阶段"><a href="#顺利培养习惯的三个阶段" class="headerlink" title="顺利培养习惯的三个阶段"></a>顺利培养习惯的三个阶段</h1><h2 id="反抗期：撑下去"><a href="#反抗期：撑下去" class="headerlink" title="反抗期：撑下去"></a>反抗期：撑下去</h2><ul>
<li><p>可能出现的症状</p>
<ul>
<li>马上就感觉没劲，只有三分钟热度</li>
<li>计划内容太过勉强，导致中途放弃</li>
<li>时间一天天过去，变得越来越懒得行动</li>
<li><em>这些不过是反抗期里的正常现象，原因就是强大的习惯引力</em>。如果度过了反抗期，就等于你成功四成了。</li>
</ul>
</li>
<li><p>度过反抗期的重点</p>
<ul>
<li><strong>撑下去</strong>。也就是说<em>每天持续行动</em>是很重要的。在这个阶段，只要行动就可以了，不用管行动量是多少，也不用在意结果。</li>
</ul>
</li>
<li><p>预防失败的<em>习惯培养三原则</em></p>
<ul>
<li>一次只培养一项习惯</li>
<li>坚持有效的行动（行动规则越简单越好）<ul>
<li>即便只培养一项习惯，行动规则太复杂的话，也基本不会成功。<strong>若要做到这点，就要广泛收集信息，听取该领域专家或旁人的意见。</strong></li>
</ul>
</li>
<li>不要太在意结果<ul>
<li>通过结果来激励自己是好事，但是不应该太在意结果，习惯带来的好处可能需要很长一段时间，太在意结果的话会打击我们的信心，或者打乱我们的行动节奏。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="两个对策"><a href="#两个对策" class="headerlink" title="两个对策"></a>两个对策</h3><h4 id="以婴儿学步"><a href="#以婴儿学步" class="headerlink" title="以婴儿学步"></a>以婴儿学步</h4><ul>
<li>由于习惯引力太强，很容易让人产生放弃的念头，尽量从小事做起，降低放弃的可能性。</li>
<li>因为认为自己做不好，所以迟迟不开始行动。针对这种情况，应该降低门槛，制定极其简单的目标，让自己迈出第一步。千里之行始于足下，<strong>有能力迈出第一步的人、有办法把第一步化为行动力的人，就是执行力强的人。</strong>（这里所说的，不仅仅在培养习惯上有用。）</li>
<li>效果<ul>
<li>行动阻力小，更容易付出行动。</li>
<li>引发动力，迈出第一步自然而然的就会迈出第二步。</li>
</ul>
</li>
<li>方法一：细分时间<ul>
<li>5 分钟整理</li>
<li>15 分钟阅读</li>
<li>3 分钟写日记</li>
<li>15 分钟跑步</li>
</ul>
</li>
<li>方法二：细分步骤<ul>
<li>只整理一个房间</li>
<li>读一页书</li>
<li>写一行日记</li>
<li>走路而不是跑步</li>
</ul>
</li>
</ul>
<ul>
<li><p>重点</p>
<ul>
<li>设定容易执行的门槛，在特殊情况下都可以执行。</li>
<li>抛开不足感，相信积累的力量。</li>
<li>坚持每天持续执行。</li>
</ul>
<p>​</p>
<h4 id="简单记录"><a href="#简单记录" class="headerlink" title="简单记录"></a>简单记录</h4></li>
<li><p>效果</p>
<ul>
<li>客观分析、了解问题，减少无谓的努力。<ul>
<li>只有真正了解问题，还能正确的解决问题。</li>
</ul>
</li>
<li>减少行动的不确定性，客观的管理自己的行为。<ul>
<li>即便是做得不好的时候，也可以找到原因。</li>
</ul>
</li>
<li>提高动力<ul>
<li>量化自己的行动，可以产生动力。看到每天执行小行动的意义，以及深切反省偷懒的原因。</li>
</ul>
</li>
</ul>
</li>
<li>方法<ul>
<li>思考记录内容</li>
<li>思考记录媒介</li>
</ul>
</li>
<li>重点<ul>
<li>记录方式越简单越好</li>
<li>一定要每天记录</li>
</ul>
</li>
</ul>
<h2 id="不稳定期：建立持续行动的机制"><a href="#不稳定期：建立持续行动的机制" class="headerlink" title="不稳定期：建立持续行动的机制"></a>不稳定期：建立持续行动的机制</h2><ul>
<li>可能出现的症状<ul>
<li>在已安排好的时间插入其他事情而荒废计划</li>
<li>因为加班或个人私事导致计划中断</li>
<li>因为天气或突发时间导致多日无法持续行动</li>
<li><strong>在此阶段需要提高门槛，所以可能会发生我们无法控制的事情，让我们更难坚持下去，在此阶段，需要我们采取有弹性的计划，已度过不稳定期</strong></li>
</ul>
</li>
</ul>
<h3 id="对策一：行为模式化"><a href="#对策一：行为模式化" class="headerlink" title="对策一：行为模式化"></a>对策一：行为模式化</h3><ul>
<li>所谓<em>行为模式化</em>就是：规定好要培养的习惯在某时某地怎么执行。比如规定自己每天晚上九点半阅读半小时，最好可以依附在另一个已经养成的习惯上面。</li>
<li>效果：<ul>
<li>培养节奏感<ul>
<li>让自己的身体在特定时间无意识的开始活动</li>
</ul>
</li>
<li>不容易忘记<ul>
<li>做事太随机的话，更容易忘记</li>
</ul>
</li>
</ul>
</li>
<li>方法<ul>
<li>时间：决定星期几、几点开始<ul>
<li>例如：每周一、三、五晚上八点开始阅读</li>
</ul>
</li>
<li>内容：决定数量和方法<ul>
<li>每天花三十分钟听新闻</li>
</ul>
</li>
<li>地点：决定地点<ul>
<li>在教室或者图书馆学习</li>
</ul>
</li>
</ul>
</li>
<li>重点<ul>
<li>尽量找到不被侵犯的<em>圣地</em></li>
<li>考虑一举两得的做法<ul>
<li>想想自己有哪些事是自己每天都做，而且那个时候还可以执行行动的。</li>
</ul>
</li>
<li>每天持续行动</li>
</ul>
</li>
</ul>
<h3 id="对策二：设定例外规则"><a href="#对策二：设定例外规则" class="headerlink" title="对策二：设定例外规则"></a>对策二：设定例外规则</h3><ul>
<li>再完美的计划都极难连续一个月坚持执行。</li>
<li>设定例外规则不是为了宠溺自己，而是为了让计划保持弹性，固定自己的行为节奏，避免因为一次失误灰心丧气。</li>
<li>效果<ul>
<li>有弹性的执行计划<ul>
<li>使得每天都有所行动</li>
</ul>
</li>
<li>减少压力<ul>
<li>避免罪恶感的产生</li>
</ul>
</li>
</ul>
</li>
<li>方法<ul>
<li>考虑例外状况<ul>
<li>身体状况（疲倦、提不起劲、感觉不舒服、感冒等）</li>
<li>气候（太冷、太热、下雨、下雨等）</li>
<li>预定事项（突然加班、聚餐等）</li>
</ul>
</li>
<li>考虑应对方法<ul>
<li>以婴儿学步的方式行动（推荐）<ul>
<li>只做 5 分钟或者只读一页书</li>
</ul>
</li>
<li>替换<ul>
<li>第二天加倍完成任务</li>
</ul>
</li>
<li>设定特别的日子<ul>
<li>正大光明地中断一次行动</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>重点<ul>
<li>假设出所有可能发生的例外状况</li>
<li>一边尝试一边变更<em>例外规则</em></li>
</ul>
</li>
</ul>
<h3 id="对策三：设定持续开关"><a href="#对策三：设定持续开关" class="headerlink" title="对策三：设定持续开关"></a>对策三：设定持续开关</h3><ul>
<li>所谓持续开关就是：做某件事来获取动力，激励自己继续行动。</li>
</ul>
<h4 id="获得快感"><a href="#获得快感" class="headerlink" title="获得快感"></a>获得快感</h4><ol>
<li>奖励<ol>
<li>通过奖励突破眼前的困难</li>
</ol>
</li>
<li>被称赞<ol>
<li>塑造被称赞的气氛以提升干劲</li>
</ol>
</li>
<li>游戏<ol>
<li>以游戏开启行动，提升自己的热情</li>
</ol>
</li>
<li>理想模式<ol>
<li>设定理想目标，让自己更进步</li>
</ol>
</li>
<li>仪式<ol>
<li>举行小小的仪式，去除倦怠的心情</li>
</ol>
</li>
<li>去除障碍<ol>
<li>去除阻碍行动的因素，减轻压力</li>
</ol>
</li>
</ol>
<h4 id="利用危机感"><a href="#利用危机感" class="headerlink" title="利用危机感"></a>利用危机感</h4><ol>
<li>损益计算<ol>
<li>投资时塑造失败就会亏损的环境</li>
</ol>
</li>
<li>结交朋友<ol>
<li>结交培养相同习惯的朋友，不容许自己安逸</li>
</ol>
</li>
<li>对大众宣布<ol>
<li>对大众发表宣言，塑造无路可退的状态</li>
</ol>
</li>
<li>处罚游戏<ol>
<li>利用处罚游戏击退借口</li>
</ol>
</li>
<li>设定目标<ol>
<li>设定目标，引发达成目标的欲望</li>
</ol>
</li>
<li>强制力<ol>
<li>通过与他人约定、塑造严苛的环境、时间限制，逼迫自己进入不得不做的状态</li>
</ol>
</li>
</ol>
<ul>
<li>利用这些方法可以让自己持续行动，不过<em>需要在出现问题之前设定好，不然已经想要放弃了，再多方法都无济于事。并且在出现问题的时候需要及时意识到自己有应对措施。</em></li>
<li>方法<ul>
<li>根据 12 项持续开关，选择适合自己的一项。</li>
</ul>
</li>
<li>重点<ul>
<li>了解自己擅长的事<ul>
<li>根据自己的特点选择开关</li>
</ul>
</li>
<li>不同的习惯有不同的开关<ul>
<li>每培养一个新习惯时，请好好地思考，选择最合适自己的开关</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="倦怠期：习惯引力最后的反抗"><a href="#倦怠期：习惯引力最后的反抗" class="headerlink" title="倦怠期：习惯引力最后的反抗"></a>倦怠期：习惯引力最后的反抗</h2><ul>
<li>可能出现的症状<ul>
<li>感觉厌烦提不起劲</li>
<li>感觉不到培养习惯的意义</li>
<li>因一成不变而产生空虚感</li>
<li><em>虽然坚持了一段时间，但是习惯引力仍然存在。此时我们会觉得厌烦、没意义，寻找各种理由放弃。或许我们会认为习惯已经养成，但这时候疏忽大意还是极有可能失败。</em></li>
<li><em>为了培养良好的习惯，请一定要巧妙且谨慎地度过倦怠期</em></li>
</ul>
</li>
</ul>
<p><strong>记住：如何在 30 天计划中添加创意也是成功培养习惯的关键</strong></p>
<h3 id="对策一：添加变化"><a href="#对策一：添加变化" class="headerlink" title="对策一：添加变化"></a>对策一：添加变化</h3><p>一直持续做一件同样的事，任何人都会感觉到厌烦，因此想找借口放弃，甚至找不到坚持下去的意义。</p>
<blockquote>
<p>如果打算学习英文，请准备好不同的教材；如果跑步，就请经常改变跑步路线；如果减肥，可以在菜单上添加各种创意。一旦感觉一成不变时，就应该灵活应对。所以，请多多思考不同的变化方式吧。</p>
</blockquote>
<ul>
<li>效果<ul>
<li>以崭新的心情重新出发</li>
<li>产生动力</li>
</ul>
</li>
<li>方法<ul>
<li>改变内容、环境<ul>
<li>改变教材、改变学习环境以此获得新鲜感</li>
</ul>
</li>
<li>使用<em>持续开关</em><ul>
<li>请专家指导训练课程，组团一起跑步</li>
</ul>
</li>
</ul>
</li>
<li>重点<ul>
<li>以一举两得的角度思考<ul>
<li>通过一个习惯得到两倍收获：一边听有声书一边跑步等。</li>
</ul>
</li>
<li>准备多种选择<ul>
<li>为了应对一成不变，变化越多越好。</li>
</ul>
</li>
<li>不要轻易改变模式或规则<ul>
<li>尽量不要改变不稳定期所建立的行为模式或例外规则，否则极容易摧毁已建立的习惯节奏。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="对策二：计划下一项计划"><a href="#对策二：计划下一项计划" class="headerlink" title="对策二：计划下一项计划"></a>对策二：计划下一项计划</h3><h4 id="习惯清单范例"><a href="#习惯清单范例" class="headerlink" title="习惯清单范例"></a>习惯清单范例</h4><blockquote>
<p>第一个月　英文听力（15 分钟）</p>
<p>第二个月　英文阅读（30 分钟）</p>
<p>第三个月　肌力训练（第一个月）</p>
<p>第四个月　肌力训练（第二个月）</p>
<p>第五个月　肌力训练（第三个月）</p>
<p>第六个月　阅读、做笔记（15 分钟）</p>
<p>第七个月　改善饮食生活（第一个月）</p>
<p>第八个月　改善饮食生活（第二个月）</p>
<p>第九个月　改善饮食生活（第三个月）</p>
<p>第十个月　打坐（10 分钟）</p>
<p>第十一个月 泡澡（30 分钟）</p>
<p>第十二个月 写作（30 分钟）</p>
<p>此为书中作者于 2009 年制定的清单。培养关于身体的习惯请以三个月为标准。</p>
</blockquote>
<ul>
<li>效果<ul>
<li>可以看到现在培养习惯的过程<ul>
<li>通过拟定下一个习惯的计划，再次感受目前培养习惯所获得的成就，如此一来，倦怠期就变得有趣。</li>
</ul>
</li>
<li>提高培养习惯的能力<ul>
<li>培养习惯的能力是最根本的能力</li>
</ul>
</li>
</ul>
</li>
<li>方法<ul>
<li>根据自己的<em>习惯的年度计划</em>清单（h)</li>
</ul>
</li>
<li>重点<ul>
<li>排列优先级<ul>
<li>选出对自己而言最有效的习惯</li>
</ul>
</li>
<li>就算拟好计划也不要执行<ul>
<li>太贪心必将失败</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>前面两章的笔记到此为止，后面主要是通过例子来说明如何运用书中所提到的方法，以后慢慢体会再加以运用吧。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[寒假总结]]></title>
      <url>/2018/03/articles/%E5%AF%92%E5%81%87%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>学习不是一遍就足够的。<br><a id="more"></a></p>
<p>今天是 3 月 2 号，也是这个寒假的最后一天了。我明天就要去学校了，环境要改变了， 身边的人也变得不同了，而且去学校又会有更多的烦恼了。看来我还是像以前一样，不喜欢开学。可是仔细想想，去学校是为了什么？当然是去学习的，学习的过程当然不会是轻松愉悦的，如果一直处于放松状态，那么可就危险了。</p>
<p>四十天的寒假里面，我可能有 20 天是去摘果的，那个时候就在想啊，要是让我能用电脑，我一定会好好学习的。然而当我真正拿到电脑的时候，我却没有像我所想的那样做。就想开学之前想着要泡图书馆，结果仍然是在床上玩手机或者在宿舍打游戏。有些愧疚，有些可怕。</p>
<p>拿到电脑这几天，也不知道是我折腾电脑还是电脑折腾我，首先是装双系统装到了凌晨，然后配置好 Hexo 来写博客又已经是 1 点钟，后面想安装 wine 来运行翻墙软件又把系统搞坏了，又只能重新装一遍系统。因为当时想装 32 位的，所以又白白折腾了一番。后来 wine 装好了，似乎不能运行绿色版的软件…最后打算重新安装 Hexo，结果花了两个多小时都没安装好！真的是心如死灰，我也长记性了，以后安装东西直接去看官方文档，网上搜索到的很可能不完整、过时的。</p>
<p>放假前打算寒假看两本书《自控力》和《人工智能》，说实话后一本一点没看，前一本随便翻了一些。还看了一本《坚持，一种可以养成的习惯》，这是一本教人们养成习惯的书。与某些书所说的<em>xx天摆脱所有坏习惯</em>不同，这本书认为每一个习惯都是需要一定时间才能养成的。我印象最深刻的就是作者提出的三种类型的习惯：</p>
<ul>
<li>行为习惯</li>
<li>身体习惯</li>
<li>思考习惯</li>
</ul>
<p>作者还提出了养成习惯的三个阶段：</p>
<ul>
<li>反抗期</li>
<li>不稳定期</li>
<li>倦怠期</li>
</ul>
<p><strong>写到这里写不下去了，原来匆匆忙忙读一遍，一点作用也没有。连里面讲的是什么都不记得，更不用说按照里面的方法执行。我并不是知道做不到，而是根本不知道。</strong></p>
<p>2018年03月02日10:20:57</p>
]]></content>
      
        <categories>
            
            <category> 人生感悟 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[我从「关注贴吧工具」中学会了什么]]></title>
      <url>/2018/01/articles/%E6%88%91%E4%BB%8E%E3%80%8C%E5%85%B3%E6%B3%A8%E8%B4%B4%E5%90%A7%E5%B7%A5%E5%85%B7%E3%80%8D%E4%B8%AD%E5%AD%A6%E4%BC%9A%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<p>放假前最后一篇博客.<br><a id="more"></a></p>
<h1 id="一-背景"><a href="#一-背景" class="headerlink" title="一. 背景"></a>一. 背景</h1><p>大概一年前在 GitHub 上面看到一个用 Python 实现贴吧签到的程序, 后来通过抓包我实现了发帖丶关注贴吧和取关贴吧功能. </p>
<p>这个学期实训之前在贴吧看到有人问「批量关注贴吧」的软件, 尽管已经可以通过代码来实现这个功能, 但是总不可能直接把代码丢给别人用, 后来不知道怎么就选择用 PyQt 来开发, 碰巧这两周的实训内容是 Qt.</p>
<p>下面是成果, 的确是很丑, 而且如果网络出现错误, 或者某一次请求出错, 就有可能出现问题, 这些我都没有做好. </p>
<p><img src="https://wx1.sinaimg.cn/mw690/0065Ozb6gy1fnm4c1sye5j30h40i0js3.jpg" alt></p>
<p>现在记录一下自己在这几天学到的东西.</p>
<h1 id="二-Python-中的多线程"><a href="#二-Python-中的多线程" class="headerlink" title="二. Python 中的多线程"></a>二. Python 中的多线程</h1><p>原来对 Python 中的多线程一点也不懂, 可是发送网络请求不能在主线程中进行, 因为这些操作可能很耗时, 就会导致程序无响应, 用户体验极差.</p>
<p>虽然在廖雪峰老师的博客中看了多线程的内容, 但是我掌握的内容也只是满足这个应用的需求.</p>
<p>希望程序同时做几件事, 有两种方法, 分别是多进程和多线程, 因为多进程中操作的可能不是同一个对象, 而我想要的是在主线程之外做某件事, 而且可以修改主线程里面的数据. 比如我希望获取到「我关注的吧」, 并且不会让程序卡住, 最后在主线程中得到所关注贴吧的数据. </p>
<p>所以多线程可以满足我的需求, 多线程的条件是:</p>
<ul>
<li>新建一个类, 继承自线程类</li>
<li>重写 run() 方法</li>
<li>在主线程中实例化并调用 start() 方法</li>
</ul>
<p>在 PyQt 中需要继承 QThread 类, 具体如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_thread_login</span><span class="params">(QThread)</span>:</span><span class="comment"># 继承自 QThread 类</span></span><br><span class="line"></span><br><span class="line">    login_success = pyqtSignal()</span><br><span class="line">    login_failure = pyqtSignal()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, tb=None, parent=None)</span>:</span></span><br><span class="line">        super(my_thread_login, self).__init__(parent)</span><br><span class="line">        self.tb = tb</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写 run() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.tb.profile()</span><br><span class="line">            self.login_success.emit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.login_failure.emit()</span><br></pre></td></tr></table></figure>
<p>主线程中需要启用子线程的时候:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.my_thread_login = my_thread_login(self.tieba)<span class="comment"># 实例化</span></span><br><span class="line">self.my_thread_login.start()<span class="comment"># 调用 start() 方法</span></span><br></pre></td></tr></table></figure>
<p>通过上面的方法就实现了在子线程中进行耗时的操作了, 而且在实例化的时候将主线程的一个对象传过去, 这样主线程中也可以得到获取到的数据.</p>
<h1 id="三-MVC"><a href="#三-MVC" class="headerlink" title="三. MVC"></a>三. MVC</h1><p>对于这个程序而言:</p>
<ul>
<li>M 是程序中保存信息的对象, 在这个程序中就是 TieBa 类, 包含了 BDUSS 之类的信息.</li>
<li>V 就是用户界面, 也就是用 PyQt 写出来的界面</li>
<li>C 是 control 的缩写, 作用是连接 M 和 V</li>
</ul>
<p>很庆幸那天早上看到了那个视频, 虽然不是中文的, 但是代码写得很清楚. 如果我没有看, 也许我写不出这个程序, 也可能我的代码会非常混乱. 因为我会把所有内容写在一起, 比如: 在 MainWindow 类中包含 TieBa 对象, 然后定义信号和槽, 点击按钮对 TieBa 对象进行操作, 可是这样我就不知道怎么实现多线程了.</p>
<p>这个程序主要有 MainWindow, Control 和 TieBa, 下面看看它们分别是干嘛的.</p>
<h2 id="1-Control-类"><a href="#1-Control-类" class="headerlink" title="1. Control 类"></a>1. Control 类</h2><p>在这个程序里面, MainWindow 类中有一个 Control 类, Control 类构造函数中接受一个 MainWindow 对象, 同时初始化一个 TieBa 类.</p>
<p>如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">    self.tieba = TieBa(<span class="string">""</span>)</span><br><span class="line">    self.mainwindow = MainWindow</span><br></pre></td></tr></table></figure></p>
<p>这样在 Control 对象中就可以访问到 MainWindow 和 TieBa, 在必要时改变界面的样子或者修改数据.</p>
<p>Control 类主要是进行各种操作, 也就是在这里启用子线程. 上面也已经说过, 只需要实例化一个线程类的对象, 然后调用 start() 方法. 别忘记把 TieBa 对象传进去, 因为子线程需要访问到其中的数据, 而且发送请求之后也要更新数据.</p>
<h2 id="2-MainWindow-类"><a href="#2-MainWindow-类" class="headerlink" title="2. MainWindow 类"></a>2. MainWindow 类</h2><p>MainWindow 对象中怎么跟 Control 联系起来呢 ? </p>
<p>答案是将 MainWindow 中的信号和 Control 中的方法连接起来.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绑定登陆按钮</span></span><br><span class="line">self.btn_login.clicked.connect(self.controlor.login)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新我喜欢的吧</span></span><br><span class="line">self.btn_up_mylike.clicked.connect(self.controlor.up_mylikes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本地列表</span></span><br><span class="line">self.btn_get_local_list.clicked.connect(self.controlor.get_local_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始关注贴吧</span></span><br><span class="line">self.btn_to_like.clicked.connect(self.controlor.to_like)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量取关按钮</span></span><br><span class="line">self.btn_to_del.clicked.connect(self.controlor.to_del)</span><br></pre></td></tr></table></figure>
<p>这样 MainWindow 类就只需要负责界面的设计, 将各种操作放到 Control 类, 编写代码的时候思路也不用那么混乱. </p>
<h2 id="3-TieBa-类"><a href="#3-TieBa-类" class="headerlink" title="3. TieBa 类"></a>3. TieBa 类</h2><p>这个类没什么好说的了, 就是包含 BDUSS 等数据, 同时有发帖丶签到之类的方法, 主要是在 Control 中被调用.</p>
<p>我对 MVC 理解不深, 不知道 TieBa 中的方法是不是应该放到 Control 中实现.</p>
<h1 id="四-子线程更新主界面"><a href="#四-子线程更新主界面" class="headerlink" title="四. 子线程更新主界面"></a>四. 子线程更新主界面</h1><p>程序在子线程中发送请求, 获取到数据之后肯定要显示在用户界面中, 之前是将 MainWindow 传递到子线程中, 结果发现达不到效果(也不知道为什么).</p>
<p>后来实现的方法是, 在线程类中定义信号, 在 Control 定义更新界面的方法, 然后将两者连接起来.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.my_thread_login = my_thread_login(self.tieba)</span><br><span class="line">self.my_thread_login.start()</span><br><span class="line">self.my_thread_login.login_success.connect(self.login_yes)</span><br><span class="line"><span class="comment"># self.login_yes 是 Control 类的方法. </span></span><br><span class="line"><span class="comment"># self.my_thread_login.login_success 是线程类中信号</span></span><br><span class="line">self.my_thread_login.login_failure.connect(self.login_no)</span><br></pre></td></tr></table></figure>
<p>当子线程完成网络请求之后, 就发出成功或者失败的信号, 调用 Control 类中的方法更新界面, 这就达到了效果.</p>
<h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul>
<li>Python 的基础部分我还没有掌握好, Java 也半途而废了…</li>
<li>多线程很有用, 但是需要一些额外的知识, 以后的 《操作系统》 要认真学</li>
<li>写程序的思路还是很重要的, 不过我对 MVC 的理解还是太肤浅了</li>
<li>知道了在 PyQt 中如何更新界面, 但是换一种编程语言就不懂了</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 异常处理]]></title>
      <url>/2017/12/articles/Java%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>第十三篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="一-什么是异常"><a href="#一-什么是异常" class="headerlink" title="一. 什么是异常"></a>一. 什么是异常</h1><p>一个程序是有可能出错的, 可能是语法错误, 也可能是逻辑错误(比如访问数组时, 算错了数组下标), 还有可能是程序运行的环境造成的错误(比如内存不足)…语法错误在运行之前就可以发现, 而有些错误只是在特定的情况下才能发生. </p>
<p>如果我们知道在某种情况下, 会发生错误, 那么我们就应该完善程序, 让它运行时无论遇到什么情况都能按照我们所设想的运行, 异常处理机制就是用来实现这个功能的.</p>
<p>话说回来, 异常到底是什么 ? 异常也是一个对象, 抛出异常就是 new 一个异常类的对象, 异常类中有一个属性 detailMessage, 这个属性记录了这个异常的信息, 说明了发生的是什么异常.</p>
<h1 id="二-异常的捕获语句"><a href="#二-异常的捕获语句" class="headerlink" title="二. 异常的捕获语句"></a>二. 异常的捕获语句</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能发生运行错误的代码;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(异常类型 异常对象引用)&#123;</span><br><span class="line">    <span class="comment">//用于处理异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//用于"善后"的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Java 中所有可捕获的异常都派生自 Exception 类</strong></p>
<h1 id="三-如何使用-Java-异常处理机制"><a href="#三-如何使用-Java-异常处理机制" class="headerlink" title="三. 如何使用 Java 异常处理机制"></a>三. 如何使用 Java 异常处理机制</h1><ul>
<li>将可能会出错的代码放入 try　块中</li>
<li>用 catch 捕获异常, 并对异常做出处理</li>
<li>无论发不发生异常, finally 语句都会执行</li>
</ul>
<h1 id="四-Java-中异常的分类"><a href="#四-Java-中异常的分类" class="headerlink" title="四. Java 中异常的分类"></a>四. Java 中异常的分类</h1><ul>
<li><p>Throwable 类有两个直接子类:</p>
<ul>
<li>Exception: 出现的问题是可以捕获的</li>
<li>Error:     系统错误, 通常有 JVM 处理</li>
</ul>
</li>
<li><p>可捕获的异常又可以分为两类:</p>
<ul>
<li>check 异常: 直接派生自 Exception 的异常类, 必须被捕获或再次声明抛出</li>
<li>runtime 异常: 派生自 RuntimeException 的异常类, <strong>不是必须</strong>被捕获或再次声明抛出. </li>
</ul>
</li>
</ul>
<h1 id="五-AssertionError"><a href="#五-AssertionError" class="headerlink" title="五. AssertionError"></a>五. AssertionError</h1><p>JDK1.4 以上提供了 assert 语句, 允许程序在运行期间判断某个条件是否满足, 不满足时, 抛出 AssertionError.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> s == <span class="number">7</span>;</span><br></pre></td></tr></table></figure>
<p>//在 Eclipse 中 assert 功能是默认关闭的, 需要手动设置</p>
<h1 id="六-OOM-Error"><a href="#六-OOM-Error" class="headerlink" title="六. OOM Error"></a>六. OOM Error</h1><p>全称: OutOfMemoryError, 表示系统内存不足</p>
<h1 id="七-catch-语句的特点"><a href="#七-catch-语句的特点" class="headerlink" title="七. catch 语句的特点"></a>七. catch 语句的特点</h1><ul>
<li>不能在多个 catch 语句块中捕获同一种异常</li>
<li>只能捕获 Exception 及其子类</li>
<li>如果第一个就捕获 Exceptioin, Java 不会编译这个程序</li>
</ul>
<h1 id="八-finally-语句"><a href="#八-finally-语句" class="headerlink" title="八. finally 语句"></a>八. finally 语句</h1><p>//用于处理 “资源泄漏”, 看不懂</p>
<h1 id="九-AutoCloseable-接口"><a href="#九-AutoCloseable-接口" class="headerlink" title="九. AutoCloseable 接口"></a>九. AutoCloseable 接口</h1><p>//自动释放资源, 看不懂</p>
<h1 id="十-多层的异常捕获"><a href="#十-多层的异常捕获" class="headerlink" title="十. 多层的异常捕获"></a>十. 多层的异常捕获</h1><ul>
<li>理解语句执行的顺序.</li>
<li>一旦抛出了异常, 必须捕获, 然后再往下运行.</li>
<li>如果内层 catch 语句无法捕获, 那么就马上让外层去捕获, 这样一来, 内层接下去的语句就不会运行</li>
</ul>
<h1 id="十一-printStackTrace-和-getMessage"><a href="#十一-printStackTrace-和-getMessage" class="headerlink" title="十一. printStackTrace() 和 getMessage()"></a>十一. printStackTrace() 和 getMessage()</h1><ul>
<li>第一个方法是输出方法调用堆栈: 异常从哪个方法被抛出, 然后又到了哪个方法, 最后到了哪里才被处理.</li>
<li>第二个方法是获取异常的详细信息.</li>
</ul>
<h1 id="十二-受控和不受控的异常"><a href="#十二-受控和不受控的异常" class="headerlink" title="十二. 受控和不受控的异常"></a>十二. 受控和不受控的异常</h1><ul>
<li>受控异常抛出之后必须捕获, 或者向上一层抛出</li>
<li>不受控异常就不必如此</li>
</ul>
<h1 id="十三-抛出多个受控异常的方法"><a href="#十三-抛出多个受控异常的方法" class="headerlink" title="十三. 抛出多个受控异常的方法"></a>十三. 抛出多个受控异常的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> throw MyException1, MyException2</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>抛出多个异常, 但是只需要捕获一个就可以通过编译</strong></p>
<h2 id="十四-子类抛出受控异常的限制"><a href="#十四-子类抛出受控异常的限制" class="headerlink" title="十四. 子类抛出受控异常的限制"></a>十四. 子类抛出受控异常的限制</h2><ul>
<li>不能是父类同名方法抛出异常对象的父类</li>
</ul>
<h1 id="十五-捕获多个异常的方法"><a href="#十五-捕获多个异常的方法" class="headerlink" title="十五. 捕获多个异常的方法"></a>十五. 捕获多个异常的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (MyException1 | MyException2)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十六-例子"><a href="#十六-例子" class="headerlink" title="十六. 例子"></a>十六. 例子</h1><p>输入整数分数, 判断等级</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入一个整数的分数: "</span>);</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> score = in.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                printGrage(score);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">                System.out.println(e.getMessage());</span><br><span class="line"><span class="comment">//              e.printStackTrace();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入格式有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGrage</span><span class="params">(<span class="keyword">int</span> score)</span> <span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"成绩优秀"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"成绩及格"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;= <span class="number">0</span> &amp;&amp; score&lt;<span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"成绩不及格"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"分数有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;       </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String Message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>简单的异常处理还可以理解, 但是复杂一点的就看不懂了. 这篇笔记只是最基础的内容.</strong></p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 多态]]></title>
      <url>/2017/12/articles/Java%20%E5%A4%9A%E6%80%81/</url>
      <content type="html"><![CDATA[<p>第十二篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="一-什么是多态"><a href="#一-什么是多态" class="headerlink" title="一. 什么是多态"></a>一. 什么是多态</h1><p>从用法上看: </p>
<ul>
<li>当基类变量引用子类对象时, 通过这个基类变量调用本类中与子类的方法, 实际上调用的就是子类中的方法</li>
<li>当接口变量引用实现了这个接口的类的对象时, 调用的方法是类中的方法</li>
</ul>
<p>或者说:</p>
<ul>
<li>调用同一个方法, 有不同的表现. 前提是基类(接口)对象引用子类对象.</li>
</ul>
<h1 id="二-为什么要有多态"><a href="#二-为什么要有多态" class="headerlink" title="二. 为什么要有多态"></a>二. 为什么要有多态</h1><p>假设有一个网上购物的程序, 有一个操作 (total) 是把购物车里面的价格加起来. 我们都知道商品的种类是非常多的, 怎么定义这个 total 方法的参数, 使得传入任意商品都可以实现算出价格呢 ? 我们总不能通过函数重载把所有情况都列一遍吧 ? </p>
<p>这个时候就可以用到 “多态” 了, 定义一个商品类(goods), 让所有商品都继承自这个类, 这个类定义一个 getPrice 方法, 返回商品的价格. 然后在定义 total 时, 只需要传入一个 goods 数组, 调用 goods[i].getPrice 就可以获得每个商品的价格.</p>
<h1 id="三-多态的语法特点"><a href="#三-多态的语法特点" class="headerlink" title="三. 多态的语法特点"></a>三. 多态的语法特点</h1><p><strong>当满足多态的条件时:</strong></p>
<ul>
<li>如果基类和子类中有同名方法, 那么调用的是子类中的方法</li>
<li>如果基类和子类中有<strong>同名字段</strong>时, 调用的是基类中的<strong>字段</strong>. (<strong>建议不要定义同名字段给自己自找麻烦</strong>)</li>
<li>可以通过关键字: super 调用基类中的方法, 以及访问基类中的字段. (<strong>子类方法中: super.方法名 可以调用父类中的方法, 如果那个方法中访问了类中的字段, 那么可能访问的是子类中的字段, 也可能访问父类类中的字段(如果父类和子类有同名字段)</strong>)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> polymorphism;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentChildTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parent parent=<span class="keyword">new</span> Parent();</span><br><span class="line">        parent.printValue();  <span class="comment">//输出父类的</span></span><br><span class="line">        Child child=<span class="keyword">new</span> Child();</span><br><span class="line">        child.printValue();  <span class="comment">//输出子类的</span></span><br><span class="line">        </span><br><span class="line">        Parent parent2 = <span class="keyword">new</span> Child();</span><br><span class="line">        System.out.println(parent2.myValue);</span><br><span class="line">        parent2.printValue();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//      parent=child;</span></span><br><span class="line"><span class="comment">//      parent.printValue();//输出子类的</span></span><br><span class="line"><span class="comment">//      </span></span><br><span class="line"><span class="comment">//      parent.myValue++;</span></span><br><span class="line"><span class="comment">//      parent.printValue();//还是子类的</span></span><br><span class="line"><span class="comment">//      </span></span><br><span class="line"><span class="comment">//      ((Child)parent).myValue++;//还是子类的吧</span></span><br><span class="line"><span class="comment">//      parent.printValue();</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> myValue=<span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent.printValue(),myValue="</span>+myValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> myValue=<span class="number">200</span>;</span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//      myValue = 888;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.printValue();</span><br><span class="line">        System.out.println(<span class="string">"Child.printValue(),myValue="</span>+myValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四-子类和父类变量之间的转换"><a href="#四-子类和父类变量之间的转换" class="headerlink" title="四. 子类和父类变量之间的转换"></a>四. 子类和父类变量之间的转换</h1><ul>
<li>子类对象可以直接赋给基类变量</li>
<li>基类对象要赋给子类变量, 需要强制类型转换.</li>
<li>通过 instanceof 判断一个对象是否可以转换为某个变量 (好像自定义的不行 ???)</li>
</ul>
<h1 id="五-动物园的例子"><a href="#五-动物园的例子" class="headerlink" title="五. 动物园的例子"></a>五. 动物园的例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> polymorphism;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Feeder feeder = <span class="keyword">new</span> Feeder(<span class="string">"小王"</span>);</span><br><span class="line">        Animal[] animals = <span class="keyword">new</span> Animal[<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            animals[i] = <span class="keyword">new</span> Lion();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            animals[i] = <span class="keyword">new</span> Monkey();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        feeder.feed(animals); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狮子在吃肉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallLion</span> <span class="keyword">extends</span> <span class="title">Lion</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小狮子在吃肉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猴子在吃桃子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Feeder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Feeder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Animal[] animals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;animals.length; i++) &#123;</span><br><span class="line">            System.out.printf(name + <span class="string">"正在喂动物: "</span>);</span><br><span class="line">            animals[i].eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果:</p>
<blockquote>
<p>小王正在喂动物: 狮子在吃肉<br>小王正在喂动物: 狮子在吃肉<br>小王正在喂动物: 狮子在吃肉<br>小王正在喂动物: 狮子在吃肉<br>小王正在喂动物: 狮子在吃肉<br>小王正在喂动物: 猴子在吃桃子<br>小王正在喂动物: 猴子在吃桃子<br>小王正在喂动物: 猴子在吃桃子<br>小王正在喂动物: 猴子在吃桃子<br>小王正在喂动物: 猴子在吃桃子</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 抽象类]]></title>
      <url>/2017/12/articles/Java%20%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>第十篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="一-抽象类和抽象方法"><a href="#一-抽象类和抽象方法" class="headerlink" title="一. 抽象类和抽象方法"></a>一. 抽象类和抽象方法</h1><ul>
<li>有 abstract 修饰的类称为 “抽象类”, 它只定义 “有什么方法”, 而不用实现这些方法. 因为没有实现方法, 所以抽象类就不能实例化. 但可以声明抽象类变量, 用来引用实现了所有抽象方法的子类.</li>
<li>在方法名前加上 abstract 就形成抽象方法, 只有方法声明, 没有实现代码.</li>
</ul>
<h1 id="二-抽象类和抽象方法的实例"><a href="#二-抽象类和抽象方法的实例" class="headerlink" title="二. 抽象类和抽象方法的实例"></a>二. 抽象类和抽象方法的实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>一个抽象类可以由非抽象方法和成员变量. 有抽象方法的一定是抽象类, 但是抽象类中的方法不一定是抽象方法.</strong></p>
<h1 id="三-抽象类的三种”类型”"><a href="#三-抽象类的三种”类型”" class="headerlink" title="三. 抽象类的三种”类型”"></a>三. 抽象类的三种”类型”</h1><ul>
<li>直接定义了一个抽象类</li>
<li>继承了一个抽象父类, 但没有完全实现父类包含的抽象方法</li>
<li><strong>实现了一个接口, 但没有完全实现此接口所包含的抽象方法</strong></li>
</ul>
<h1 id="四-为什么要有抽象类"><a href="#四-为什么要有抽象类" class="headerlink" title="四. 为什么要有抽象类"></a>四. 为什么要有抽象类</h1><p>我们可以定义一个表示 “人” 的类, 也可以定义一个表示 “动物” 的类, 但实际上我们还可以抽象出一个 “生物类”, 这个类是前两个的父类. 但是有可能在这个类中, 只知道有某种方法, 而不知道该怎么实现. 这种情况下, 就可以使用抽象类, 不需要写出具体的方法, 只需要列出有哪些方法就好了.</p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 接口]]></title>
      <url>/2017/12/articles/Java%20%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>第十一篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="一-接口是什么"><a href="#一-接口是什么" class="headerlink" title="一. 接口是什么?"></a>一. 接口是什么?</h1><p>我只能通过 interface 和 implements 分辨出接口. </p>
<p>接口里面有<strong>方法</strong>和<strong>域</strong>, 这里的方法只需声明<strong>无需实现</strong>, 而域<strong>必须初始化</strong>.</p>
<h1 id="二-接口有什么用"><a href="#二-接口有什么用" class="headerlink" title="二. 接口有什么用?"></a>二. 接口有什么用?</h1><p>在设计类的时候, 可能有些复杂对象难以设计. 比如设计一个鸭子类, 鸭子是鸟, 会游泳, 还是一种食物. 开始的想法是: 设计一个 Food 类和 Bird 类以及 Duck 类, 让 Duck 类继承这两个类, 问题似乎 Java 中不允许多继承. 而且 “会游泳” 这个方法应该放在哪个类当中呢? 放在 Bird 中 ? 可有些鸟是不会游泳的. 放在 Duck 中 ? 可会有用的鸟也不止鸭子一种.</p>
<p>这种情况下, 接口就派上用场了. 定义一个接口, 接口里面实现一个 “会游泳” 的方法. 让 Duck 实现这个接口. 如果还有其他需要的方法, 都可以通过这样的方式来解决. 因为一个类是可以实现多个接口的. </p>
<p>从作用来看, 接口可以让一个类<strong>拥有特定的方法和域</strong>. </p>
<h1 id="三-接口的特性"><a href="#三-接口的特性" class="headerlink" title="三. 接口的特性"></a>三. 接口的特性</h1><ul>
<li>接口不是类, 不能实例化一个接口</li>
<li>可以声明接口的变量, 接口变量必须引用实现了接口的类对象, 如同使用 instanceof <strong>检查一个对象是否属于某个特定类一样</strong>, 也可以使用 instanceof 检查一个对象是否实现某个特定的接口:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(anObject <span class="keyword">instanceof</span> Compareable) &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>定义接口时, 方法无需声明为 public, 因为方法自动设为 public. 接口中的域也一样, 自动设为 public static final. 接口本身可以设为 public 或者留空.</li>
</ul>
<h1 id="四-接口的例子"><a href="#四-接口的例子" class="headerlink" title="四. 接口的例子:"></a>四. 接口的例子:</h1><ul>
<li>编写一个类, 实例化一个对象数组, 实现 CompareTo 接口, 调用 Arrays.sort() 进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my_interface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interface1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Emlopyee[] emlopyees = <span class="keyword">new</span> Emlopyee[<span class="number">5</span>];</span><br><span class="line">        </span><br><span class="line">        emlopyees[<span class="number">0</span>] = <span class="keyword">new</span> Emlopyee(<span class="string">"张三"</span>, <span class="number">2000</span>);</span><br><span class="line">        emlopyees[<span class="number">1</span>] = <span class="keyword">new</span> Emlopyee(<span class="string">"李四"</span>, <span class="number">1000</span>);</span><br><span class="line">        emlopyees[<span class="number">2</span>] = <span class="keyword">new</span> Emlopyee(<span class="string">"王五"</span>, <span class="number">9000</span>);</span><br><span class="line">        emlopyees[<span class="number">3</span>] = <span class="keyword">new</span> Emlopyee(<span class="string">"赵六"</span>, <span class="number">4000</span>);</span><br><span class="line">        emlopyees[<span class="number">4</span>] = <span class="keyword">new</span> Emlopyee(<span class="string">"牛七"</span>, <span class="number">2000</span>);</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(emlopyees);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(Emlopyee e: emlopyees) &#123;</span><br><span class="line">            e.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emlopyee</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Emlopyee</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emlopyee</span><span class="params">(String name, <span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"的工资是: "</span> + salary);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Emlopyee o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(salary, o.salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果:</p>
<blockquote>
<p>李四的工资是: 1000<br> 三的工资是: 2000<br> 七的工资是: 2000<br> 六的工资是: 4000<br> 五的工资是: 9000</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 继承]]></title>
      <url>/2017/12/articles/Java%20%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<p>第九篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="一-继承的相关概念"><a href="#一-继承的相关概念" class="headerlink" title="一. 继承的相关概念"></a>一. 继承的相关概念</h1><h2 id="1-继承的意义"><a href="#1-继承的意义" class="headerlink" title="1. 继承的意义"></a>1. 继承的意义</h2><p>在面向对象语言中, 类就是模板, 通过模板可以创造出各种对象. 有些对象有一些共同的属性和方法, 如果在每个类定义里面都写一遍, 就很麻烦. 可以通过继承超类, 然后再完善自身的类, 达到一样的目的而不用写那么多代码.</p>
<h2 id="2-继承的语法"><a href="#2-继承的语法" class="headerlink" title="2. 继承的语法"></a>2. 继承的语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类名</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>父类, 超类: 通常指直接上级</li>
<li>基类: 通常指包括直接上级在内的 “上级的上级”</li>
</ul>
<h2 id="3-基础的特点"><a href="#3-基础的特点" class="headerlink" title="3. 基础的特点"></a>3. 基础的特点</h2><ul>
<li>子类自动拥有父类声明为 public 和 protectedd 的成员</li>
<li>在子类里面是没办法访问父类中私有成员的</li>
<li>可以看成是子类里面有这个私有成员, 但是没有访问权限. 因为在子类里面, 可以调用父类的方法输出父类的私有成员</li>
</ul>
<h1 id="二-继承条件下类的访问权限"><a href="#二-继承条件下类的访问权限" class="headerlink" title="二. 继承条件下类的访问权限"></a>二. 继承条件下类的访问权限</h1><ul>
<li>public: 外界可以自由访问</li>
<li>private: 外界不可访问</li>
<li>protected: 子类中可以访问</li>
<li>default: 同一个包中的类可以访问</li>
</ul>
<h1 id="三-构造函数的调用顺序"><a href="#三-构造函数的调用顺序" class="headerlink" title="三. 构造函数的调用顺序"></a>三. 构造函数的调用顺序</h1><ul>
<li>因为继承之后, 有可能有些属性在子类中的构造函数中没有被初始化, 所以需要调用父类的构造函数来初始化. </li>
<li>虽然没有调用父类的构造函数, 但是会隐式的调用父类中无参的构造函数.</li>
<li>如果父类中没有无参的构造函数, 在子类中又没有调用其他构造函数, 那么就会出错. (跟 C++ 一样)</li>
<li>在子类的构造函数中调用父类的构造函数, 必须是第一句就调用. (我认为是因为有些东西是在父类中初始化的)</li>
</ul>
<h1 id="四-不可修改的类"><a href="#四-不可修改的类" class="headerlink" title="四. 不可修改的类"></a>四. 不可修改的类</h1><p>这样的类就是不可修改的类, 它不能被继承</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五-当直接输出一个对象引用时会发生什么"><a href="#五-当直接输出一个对象引用时会发生什么" class="headerlink" title="五. 当直接输出一个对象引用时会发生什么?"></a>五. 当直接输出一个对象引用时会发生什么?</h1><p>当调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> A());</span><br></pre></td></tr></table></figure>
<p>首先会调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(Object x)</span></span>;</span><br></pre></td></tr></table></figure>
<p>还有调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(Object obj)</span></span>;</span><br></pre></td></tr></table></figure>
<p>以及</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后输出: inherit.A@7852e922</p>
<h1 id="六-子类和父类方法之间的关系"><a href="#六-子类和父类方法之间的关系" class="headerlink" title="六. 子类和父类方法之间的关系"></a>六. 子类和父类方法之间的关系</h1><ul>
<li>扩充: 增加父类中没有的方法</li>
<li>覆盖/重写: 修改父类中的方法(方法名, 参数, 返回值都相同)</li>
<li>重载: 与父类方法的方法名相同, 但参数不同.</li>
</ul>
<h1 id="七-重写-toString-方法"><a href="#七-重写-toString-方法" class="headerlink" title="七. 重写 toString 方法"></a>七. 重写 toString 方法</h1><ul>
<li>在 + 运算中, 任何一个对象与 String 对象连接时, 都会隐式调用 toString 方法</li>
</ul>
<h1 id="八-方法覆盖的要点"><a href="#八-方法覆盖的要点" class="headerlink" title="八. 方法覆盖的要点"></a>八. 方法覆盖的要点</h1><ul>
<li>形式一定要完全相同, 否则就变成重载了</li>
<li>可以通过 super 调用超类中被覆盖的方法</li>
</ul>
<h1 id="九-方法覆盖的语法规则"><a href="#九-方法覆盖的语法规则" class="headerlink" title="九. 方法覆盖的语法规则"></a>九. 方法覆盖的语法规则</h1><ol>
<li>覆盖方法的允许访问范围不能小于原方法</li>
<li>覆盖方法所抛出的异常不能比原方法更多</li>
<li>声明为 final 的方法不允许覆盖</li>
<li>不能覆盖静态方法</li>
</ol>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 数组]]></title>
      <url>/2017/12/articles/Java%20%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p>第八篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="一-数组的创建与初始化"><a href="#一-数组的创建与初始化" class="headerlink" title="一. 数组的创建与初始化"></a>一. 数组的创建与初始化</h1><h2 id="1-创建时不必马上初始化"><a href="#1-创建时不必马上初始化" class="headerlink" title="1. 创建时不必马上初始化"></a>1. 创建时不必马上初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a2;</span><br><span class="line">a2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>
<p>都是可以的</p>
<h2 id="2-初始化的简便方法"><a href="#2-初始化的简便方法" class="headerlink" title="2. 初始化的简便方法"></a>2. 初始化的简便方法</h2><p>上面的代码勉强算是初始化了, 因为有了默认值. 如果我们需要将元素初始化为我们需要的值, 只能通过下标一个一个地给元素赋值, 除此之外, 可以在创建数组的时候, 不使用 new, 直接给给元素赋值. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">0</span>, -<span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="3-错误的初始化方法"><a href="#3-错误的初始化方法" class="headerlink" title="3. 错误的初始化方法"></a>3. 错误的初始化方法</h2><p>先创建数组, 然后通过简便方法初始化, 这种方法是错误的.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a2;</span><br><span class="line">a2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>这种写法也是错的, 但我不知道为什么. 2017年12月11日 20:22:38</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[<span class="number">10</span>] a;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>
<h1 id="二-数组的默认值"><a href="#二-数组的默认值" class="headerlink" title="二. 数组的默认值"></a>二. 数组的默认值</h1><h2 id="1-原始数据类型数组的默认值"><a href="#1-原始数据类型数组的默认值" class="headerlink" title="1. 原始数据类型数组的默认值"></a>1. 原始数据类型数组的默认值</h2><p>类似 int, float, double 都属于原始数据类型, int 类型数组默认值 0, float, double 类型数组默认值都是 0.0.</p>
<h2 id="2-对象数组元素的默认值"><a href="#2-对象数组元素的默认值" class="headerlink" title="2. 对象数组元素的默认值"></a>2. 对象数组元素的默认值</h2><p>在执行下面这句话之后, 数组 s 中的每个元素都有了初始值: null</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>
<p>但是这些元素并没有指向一个对象, 如果对这些元素进行操作, 可能就报错了. </p>
<p>初始化的方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">"初始化"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="三-数组的传递"><a href="#三-数组的传递" class="headerlink" title="三. 数组的传递"></a>三. 数组的传递</h1><h2 id="1-直接传递数组名"><a href="#1-直接传递数组名" class="headerlink" title="1. 直接传递数组名"></a>1. 直接传递数组名</h2><p>按照 C 语言的想法, 通过数组名传递, 相当于传递地址, 所以是可以修改主调函数里面的值的.</p>
<p>通过测试, 将主函数里面的 String 数组传递到函数内部, 在函数内部修改数组元素, 主函数中数组的元素也被修改了.</p>
<h2 id="2-传递数组元素"><a href="#2-传递数组元素" class="headerlink" title="2. 传递数组元素"></a>2. 传递数组元素</h2><h3 id="A-原始数据类型元素"><a href="#A-原始数据类型元素" class="headerlink" title="A. 原始数据类型元素"></a>A. 原始数据类型元素</h3><p>例如传递 int 数组的某个元素, 是不会改变主调函数里面的值.</p>
<h3 id="B-引用类型元素"><a href="#B-引用类型元素" class="headerlink" title="B. 引用类型元素"></a>B. 引用类型元素</h3><p>对象类型数组的元素都是引用类型, 它们类似于指针(猜的), 所以传递过去是可以修改主调函数里面的值.</p>
<h1 id="四-数组的赋值"><a href="#四-数组的赋值" class="headerlink" title="四. 数组的赋值"></a>四. 数组的赋值</h1><p>a, b 是两个数组, 当执行 a = b 的时候, 此时 a, b 指向相同的内存. 也就是说, a 和 b 代表同一个数组.</p>
<h1 id="五-数组的拷贝"><a href="#五-数组的拷贝" class="headerlink" title="五. 数组的拷贝"></a>五. 数组的拷贝</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(a, <span class="number">0</span>, b, <span class="number">0</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>上面这行代码的含义是把 a 中的元素的值赋给 b.</p>
<p><strong>需要注意两点:</strong></p>
<ul>
<li>数组拷贝时长度不能超出范围, 否则会报错</li>
<li>数组的赋值使两个数组指向同一块内存, 而数组的拷贝只是将拷贝元素的值.</li>
</ul>
<p>并且, 对对象数组进行拷贝之后, 两个数组对应的值相等, 但是对象的元素并不指向相同的内存.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String[] string1 = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">string1[<span class="number">0</span>] = <span class="string">"我是一个字符串"</span>;</span><br><span class="line">String[] string = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//string1 的 0 号元素赋值给 string 的 0 号元素</span></span><br><span class="line">System.arraycopy(string1, <span class="number">0</span>, string, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//string 中 0 号元素的值已经被修改</span></span><br><span class="line">print(string);</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试修改 string 中 0 号元素的值</span></span><br><span class="line">string[<span class="number">0</span>] = <span class="string">"这个元素已经被修改了"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发现 string1[0] 的值没有被修改, 说明两个引用指向的不是同一块内存</span></span><br><span class="line">print(string1);  <span class="comment">//输出"我是一个字符串"</span></span><br></pre></td></tr></table></figure></p>
<h1 id="六-数组的常用操作"><a href="#六-数组的常用操作" class="headerlink" title="六. 数组的常用操作"></a>六. 数组的常用操作</h1><p>数组的常见操作:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">//给数组排序</span><br><span class="line">Arrays.sort(b);</span><br><span class="line"></span><br><span class="line">//以字符串的形式输出整型数组</span><br><span class="line">System.out.println(Arrays.toString(b));</span><br><span class="line"></span><br><span class="line">//比较两个数组, 如果元素完全一样则返回 true</span><br><span class="line">System.out.println(Arrays.equals(a, b));</span><br></pre></td></tr></table></figure>
<h1 id="七-注意事项"><a href="#七-注意事项" class="headerlink" title="七. 注意事项:"></a>七. 注意事项:</h1><ul>
<li>使用对象数组的元素之前要让它先指向一个对象, 否则会出现异常</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 中的正则表达式]]></title>
      <url>/2017/12/articles/Java%20%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>第七篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="一-正则表达式的历史"><a href="#一-正则表达式的历史" class="headerlink" title="一. 正则表达式的历史"></a>一. 正则表达式的历史</h1><p>//看不懂, 不明觉厉</p>
<p>(正则表达式可能就是一个用来匹配字符串的 “模式串”)</p>
<h1 id="二-正则表达式的组成"><a href="#二-正则表达式的组成" class="headerlink" title="二. 正则表达式的组成"></a>二. 正则表达式的组成</h1><h2 id="1-普通字符和元字符"><a href="#1-普通字符和元字符" class="headerlink" title="1. 普通字符和元字符"></a>1. 普通字符和元字符</h2><ul>
<li>普通字符也就是平时使用的字符, 它们出现的时候就代表它们本身</li>
<li>元字符是具有特殊含义的字符, 有些元字符可以代表某些字符, 比如 . 可以匹配任意字符</li>
</ul>
<h2 id="2-字符串字面量-literal-匹配"><a href="#2-字符串字面量-literal-匹配" class="headerlink" title="2. 字符串字面量(literal)匹配"></a>2. 字符串字面量(literal)匹配</h2><ul>
<li>/abc/ 匹配 “abc”, 但不匹配 “abc d”, 这说明, 空格会影响到字符串匹配.</li>
<li>当一个文档有多个 “/abc/“ 匹配的字符串时, 标准模式选择最前面那个, 如果选择了 global 模式, 则会选中所有的字符串.</li>
</ul>
<h1 id="3-“元字符”匹配"><a href="#3-“元字符”匹配" class="headerlink" title="3. “元字符”匹配"></a>3. “元字符”匹配</h1><ul>
<li>“元字符”即有着特殊含义的字符, 有: \ . * + - {} [] ^ $ | ? () : ! =</li>
<li>. 可以匹配任意单个字符, 在 s 模式下, 还可以匹配 “h换行t”. </li>
</ul>
<h1 id="4-使用转义法匹配”元字符”"><a href="#4-使用转义法匹配”元字符”" class="headerlink" title="4. 使用转义法匹配”元字符”"></a>4. 使用转义法匹配”元字符”</h1><ul>
<li>比如想匹配 . 就要加上 \ 变成 \.</li>
</ul>
<h2 id="5-匹配特殊字符"><a href="#5-匹配特殊字符" class="headerlink" title="5. 匹配特殊字符"></a>5. 匹配特殊字符</h2><table>
<thead>
<tr>
<th>含义</th>
<th>表格形式</th>
</tr>
</thead>
<tbody>
<tr>
<td>空格</td>
<td>在表达式直接敲空格就行了</td>
</tr>
<tr>
<td>Tab</td>
<td>\t</td>
</tr>
<tr>
<td>回车, 换行</td>
<td>\r(回车), \n(换行), \r\n(回车换行)</td>
</tr>
<tr>
<td>ESC</td>
<td>\e</td>
</tr>
<tr>
<td>ASC 码字符</td>
<td>比如 0xA9, 正则表达式要写成: \xA9</td>
</tr>
<tr>
<td>Unicode 字符</td>
<td>比如 4e00, 正则表达式要写成: \u4e00</td>
</tr>
</tbody>
</table>
<h2 id="6-定义可选字符集合"><a href="#6-定义可选字符集合" class="headerlink" title="6. 定义可选字符集合"></a>6. 定义可选字符集合</h2><ul>
<li>在正则表达式中都是一个一个字符来匹配的, 这里定义的可选字符集合, 也是匹配一个字符而已. </li>
<li>定义可选字符集合使用: []</li>
<li><ul>
<li>可定义一个字符区间</li>
</ul>
</li>
<li>[0-9] 表示 10 个阿拉伯数字, [A-Z]表示大写的 26 个字符</li>
<li><strong>在 [] 中, “]”, “-“, “^” 和 “\” 需要转义. 比如需要匹配 ]或者) : [\])]</strong></li>
</ul>
<h2 id="7-字符集合的简写"><a href="#7-字符集合的简写" class="headerlink" title="7. 字符集合的简写"></a>7. 字符集合的简写</h2><table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\d</td>
<td>匹配单个数字字符, 相当于[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>匹配单个非数字字符, 相当于 [^0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>匹配单个数字, 大小写字母字符, 相当于 [0-9a-zA-Z]</td>
</tr>
<tr>
<td>\W</td>
<td>匹配单个非数字, 大小写字母字符, 相当于 [^0-9a-zA-Z]</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空白符, 空白符包括 Tab, 回车(\r), 换行(\n)</td>
</tr>
<tr>
<td>\S</td>
<td>匹配空白符之外的字符</td>
</tr>
</tbody>
</table>
<h1 id="三-处理重复"><a href="#三-处理重复" class="headerlink" title="三. 处理重复"></a>三. 处理重复</h1><p>遇到单个或者某一类字符重复问题, 就要看下面的符号表了, 这些符号用来确定前面一个字符出现的次数, 这些符号也被称为 “贪婪量词”.</p>
<h2 id="1-符号表"><a href="#1-符号表" class="headerlink" title="1. 符号表"></a>1. 符号表</h2><table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>指定字符出现 0 或 n 次</td>
</tr>
<tr>
<td>+</td>
<td>指定字符出现 1 或 n 次</td>
</tr>
<tr>
<td>?</td>
<td>指定字符出现 0 或 1 次 </td>
</tr>
</tbody>
</table>
<h2 id="2-指定次数的重复"><a href="#2-指定次数的重复" class="headerlink" title="2. 指定次数的重复"></a>2. 指定次数的重复</h2><ul>
<li>使用 {min, max} 指定重复次数</li>
<li>min 是必填的, 最小是 0, 表示重复次数</li>
<li>max 是可选的, 表示最多重复次数. 如 {3,} 表示至少三个</li>
</ul>
<h1 id="四-分组"><a href="#四-分组" class="headerlink" title="四. 分组"></a>四. 分组</h1><ul>
<li>使用 () 可以把若干个字符当成一个整体处理.</li>
</ul>
<h1 id="五-多选一"><a href="#五-多选一" class="headerlink" title="五. 多选一"></a>五. 多选一</h1><ul>
<li>使用 | 从多个可选项中选择一个. 左边的选项拥有高的优先级</li>
</ul>
<h1 id="六-字符串的开头和结尾"><a href="#六-字符串的开头和结尾" class="headerlink" title="六. 字符串的开头和结尾"></a>六. 字符串的开头和结尾</h1><h2 id="1-符号表-1"><a href="#1-符号表-1" class="headerlink" title="1. 符号表"></a>1. 符号表</h2><table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>指定起始字符</td>
</tr>
<tr>
<td>$</td>
<td>指定结束字符</td>
</tr>
</tbody>
</table>
<h2 id="2-Singleline-和-Multline"><a href="#2-Singleline-和-Multline" class="headerlink" title="2. Singleline 和 Multline"></a>2. Singleline 和 Multline</h2><ul>
<li>^ 和 $ 的 Singleline 模式是正则匹配表达式引擎的默认设置, 也就是说多行文本, 只针对第一行和最后一行的字符进行匹配, 中间的行会自动无视.</li>
<li>如果希望 ^ 和 $ 在匹配时也能处理中间的行, 则需要进入 “Multline anchors” 模式. (Java 中 Pattern.MULTILINE)</li>
</ul>
<h1 id="七-边界处理"><a href="#七-边界处理" class="headerlink" title="七. 边界处理"></a>七. 边界处理</h1><ul>
<li>\b 匹配单词的边界位置</li>
<li>\B 所有不是单词边界的位置</li>
</ul>
<h1 id="八-反向引用"><a href="#八-反向引用" class="headerlink" title="八. 反向引用"></a>八. 反向引用</h1><ul>
<li>利用 () 定义了多个字符串组时, 可以用 \1 到 \9 来引用它们. 比如: (apple) to \1</li>
<li>由于最多有 9 个反向引用, 所以可以使用 ?: 指明特定字符组合不参加反向引用. 比如: (?:oranges) and (apple) to \1</li>
</ul>
<h1 id="九-断言"><a href="#九-断言" class="headerlink" title="九. 断言"></a>九. 断言</h1><p>我们可以使用 ?= 给字符组加上判断条件, 从而对匹配结果施加影响.</p>
<ul>
<li>(?=seashore)sea 先看看字符串是否有 seashore 出现, 为真时, <strong>回到开</strong>头, 再匹配后面的内容 sea, 两者都为 true 则匹配结果为真.</li>
<li>sea(?=shore) 先匹配 sea 在看后面是否跟着 shore (<strong>无需回到起点</strong>), 都为 true 则结果为匹配.</li>
<li>注意出现 “?=” 后面的正则表达式中的字符不会出现在最终匹配的字符串中, 它们仅仅用来影响匹配过程.</li>
</ul>
<h1 id="十-多断言判断"><a href="#十-多断言判断" class="headerlink" title="十. 多断言判断"></a>十. 多断言判断</h1><ul>
<li>利用前置 “?=” 可以回到起点的特点, 我们可以对一个字符串依据多个标准进行匹配判断. 比如: (?=^[0-5-]+$)(?=.*4321) 含义: 可以是 - 或者数字, 数字必须是 0-5 之间, 而且必须有 4321 出现.</li>
</ul>
<h1 id="十一-“否”断言"><a href="#十一-“否”断言" class="headerlink" title="十一. “否”断言"></a>十一. “否”断言</h1><ul>
<li>“?=” 用于定义为 true 的条件, “?!” 则用于定义为 false 的条件. 例如, 要求字符串中不包容 4321: (?!.*4321)</li>
</ul>
<h1 id="十二-自动回退的断言-看不懂-2017年12月10日-12-42-06"><a href="#十二-自动回退的断言-看不懂-2017年12月10日-12-42-06" class="headerlink" title="十二. 自动回退的断言(看不懂 2017年12月10日 12:42:06)"></a>十二. 自动回退的断言(看不懂 2017年12月10日 12:42:06)</h1><ul>
<li>默认情况下, 正则表达式引擎在处理 “?=” 和 “?!” 时都是从当前位置开始, 仅在必要时回退.</li>
<li>但有些情况下, 明确通知正则表达式引擎 “回退” 则会带来更高的效率.</li>
<li>编写自动回退的断言很简单, 只需要使用 “?&lt;=” 和 “?\&lt;!“ 就行了.</li>
<li>例如: /(?&lt;=base)ball/ 告诉正则表达式引擎, 如果发现了 ball 就回退回去看前面是不是 base, 如果确实是 base 则匹配.</li>
</ul>
<h1 id="十三-关于断言"><a href="#十三-关于断言" class="headerlink" title="十三. 关于断言"></a>十三. 关于断言</h1><ul>
<li>要注意断言并不影响正则表达式引擎的 “位置”, 引擎发现一个断言之后, 它评估它的值, 之后, 会回到评估断言之前的位置.</li>
<li>不同的编程语言和平台可能并不支持特定的语法, 需要查询相应文档或进行师弟测试.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 字符串]]></title>
      <url>/2017/12/articles/java%20%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<p>第六篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="1-String-类的-9-中构造方法"><a href="#1-String-类的-9-中构造方法" class="headerlink" title="1. String 类的 9 中构造方法"></a>1. String 类的 9 中构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> charArray[] = &#123; <span class="string">'b'</span>, <span class="string">'i'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">' '</span>,</span><br><span class="line">                   <span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'y'</span> &#125;;</span><br><span class="line"><span class="keyword">byte</span> byteArray[] = &#123; (<span class="keyword">byte</span>) <span class="string">'n'</span>, (<span class="keyword">byte</span>) <span class="string">'e'</span>, (<span class="keyword">byte</span>) <span class="string">'w'</span>,</span><br><span class="line">                   (<span class="keyword">byte</span>) <span class="string">' '</span>, (<span class="keyword">byte</span>) <span class="string">'y'</span>, (<span class="keyword">byte</span>) <span class="string">'e'</span>,</span><br><span class="line">                   (<span class="keyword">byte</span>) <span class="string">'a'</span>, (<span class="keyword">byte</span>) <span class="string">'r'</span> &#125;;</span><br><span class="line">StringBuffer buffer;</span><br><span class="line">String s, s1, s2, s3, s4, s5, s6, s7, output;</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">new</span> String( <span class="string">"hello"</span> );</span><br><span class="line">buffer =  <span class="keyword">new</span> StringBuffer( <span class="string">"Welcome to Java Programming!"</span> );  <span class="comment">//分配缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use the String constructors</span></span><br><span class="line">s1 = <span class="keyword">new</span> String();    <span class="comment">//缺省构造函数</span></span><br><span class="line">s2 = <span class="keyword">new</span> String( s ); <span class="comment">//拷贝构造函数        </span></span><br><span class="line">s3 = <span class="keyword">new</span> String( charArray ); <span class="comment">//以字符数组初始化字串</span></span><br><span class="line">s4 = <span class="keyword">new</span> String( charArray, <span class="number">6</span>, <span class="number">3</span> );   <span class="comment">//从字符数组第6个元素起取3个字符</span></span><br><span class="line">s5 = <span class="keyword">new</span> String( byteArray, <span class="number">4</span>, <span class="number">4</span> );   <span class="comment">//从字节数组第4个元素起取4个字节  </span></span><br><span class="line">s6 = <span class="keyword">new</span> String( byteArray );</span><br><span class="line">s7 = <span class="keyword">new</span> String( buffer );    <span class="comment">//从缓冲区中提取字符创建字串,注意,是复制</span></span><br></pre></td></tr></table></figure>
<h1 id="2-代码分析"><a href="#2-代码分析" class="headerlink" title="2. 代码分析"></a>2. 代码分析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String s0 = <span class="string">"Hello"</span>;</span><br><span class="line">String s1 = <span class="string">"Hello"</span>;</span><br><span class="line">String s2 = <span class="string">"He"</span> + <span class="string">"llo"</span>;</span><br><span class="line">System.out.println(s0 == s1);  <span class="comment">//true</span></span><br><span class="line">System.out.println(s0 == s2);  <span class="comment">//ture</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(<span class="string">"Hello"</span>) == <span class="keyword">new</span> String(<span class="string">"Hello"</span>));  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在 Java 中, 内容相同的字符串常量(“Hello”)只保存一份以节约空间, 所以 s0, s1, s2 实际上引用的是同一个对象. (“Hello” 就是创建了一个对象, 这样理解? 2017年12月8日 16:57:34)</li>
<li>编译器在编译 s2 一句时, 会去掉 “+” 号, 直接把两个字符串连接起来得到一个字符串(“Hello”). 这种优化工作由 Java 编译器自动完成.</li>
<li>当直接使用 new 关键字创建字符串对象时, 虽然值一致(都是”Hello”), 但仍然是两个独立的对象. (== 判断的是地址吧)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"a"</span>;</span><br><span class="line">String s2 = s1;</span><br><span class="line">System.out.println(s1 == s2);  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">s1 += <span class="string">"b"</span>;</span><br><span class="line">System.out.println(s1 == s2);  <span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == <span class="string">"ab"</span>);  <span class="comment">//false</span></span><br><span class="line">System.out.println(s1.equals(<span class="string">"ab"</span>));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>String 对象的内容是只读的</strong>, 使用 “+” 修改 s1 变量的值, 实际上 s1 原来指向的内存没有被修改, 只是指向了一块新的内存. 所以 s1 指向新的内存, 而 s2 指向原来的内存, 所以 s1==s2 返回 false.</li>
<li>代码中的 “ab” 字符串是一个常量, 它所引用的字符串与 s1 所引用的 “ab” 对象无关.(不理解 2017年12月8日 17:09:57)</li>
<li>String.equals() 方法可以比较两个字符串的内容</li>
</ul>
<h1 id="3-字符串的比较"><a href="#3-字符串的比较" class="headerlink" title="3. 字符串的比较"></a>3. 字符串的比较</h1><ul>
<li>使用 equals() 和 equalsIgnoreCase() 方法比较两个字符串<strong>内容</strong>是否相等, 使用 == 比较两个字符串变量引用同一个字符串变量.</li>
<li>compareTo: 使用字典法(??)进行比较, 返回 0 表示两个字符串相等, 小于返回负值, 大于返回正值.</li>
<li>regionMatches: 比较两个字符串的某一部分是否相等.</li>
</ul>
<h2 id="A-String-equals-是如何实现的"><a href="#A-String-equals-是如何实现的" class="headerlink" title="A. String.equals() 是如何实现的"></a>A. String.equals() 是如何实现的</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先比较两个指针是否相等, 如果指向了同一块内存, 那肯定相等</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//然后看看 anObject 是不是 String 类的实例化(这里可能说错了)</span></span><br><span class="line">    <span class="comment">//总不能拿一个不是字符串的对象来比较吧</span></span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把形参转换成 String, (不知道为什么要这步 2017年12月8日 17:33:45)</span></span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串长度</span></span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果长度不同返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//逐个比较字符</span></span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-字符串查找"><a href="#4-字符串查找" class="headerlink" title="4. 字符串查找"></a>4. 字符串查找</h1><ul>
<li>查询字符串是否以某字符串开头和结尾: startsWith() 和 endWith()</li>
<li>在字符串查找字符串或子串, 调用 indexOf() 和 lastIndexOf() 方法</li>
</ul>
<h1 id="5-字符串的哈希定位"><a href="#5-字符串的哈希定位" class="headerlink" title="5. 字符串的哈希定位"></a>5. 字符串的哈希定位</h1><ul>
<li>String 已经内置了 Hash 码的方法</li>
</ul>
<h1 id="6-字符串常用功能示例"><a href="#6-字符串常用功能示例" class="headerlink" title="6. 字符串常用功能示例"></a>6. 字符串常用功能示例</h1><ul>
<li>提取子串: subString()</li>
<li>字符连接: concat()</li>
<li>将其他类型的数据转为字符串类型: valueOf()</li>
<li>获取字符串长度: length()</li>
<li>获取指定位置的字符: charAt()</li>
<li>获取从指定位置起的子串, 复制到字符数组: getchars()</li>
<li>子串替换: replace()</li>
<li>大小写转换: toUpperCase(), toLowerCase()</li>
<li>去除头尾空格: trim()</li>
<li>将字符串对象转换为字符数组: toCharArray()</li>
</ul>
<h1 id="7-可以修改的字符串"><a href="#7-可以修改的字符串" class="headerlink" title="7. 可以修改的字符串"></a>7. 可以修改的字符串</h1><ul>
<li>StringBuffer 对象创建以后, 它的内容是可以修改的.</li>
<li>StringBuffer 对象其内容可以修改, 其占用的空间能自动增长</li>
<li>可以使用 “+” 和 “+=” 运算符连接字符串</li>
<li>可用方法: length, capacity, setLength, ensureCapacity, charAt, setCharAt, getChars, reverse, append, insert, delete.</li>
<li>除了 StringBuffer 之外, JDK 1.5 新增了一个 StringBuffer 类, 它的功能与 StringBuffer 一样, 只不过 StringBuffer 是线程安全的. 由于不需要加锁, 所以 StringBuilder 性能更高, 但是在多线程环境下一定要小心使用.</li>
</ul>
<h1 id="8-Character-类"><a href="#8-Character-类" class="headerlink" title="8. Character 类"></a>8. Character 类</h1><ul>
<li>这是字符数据类型 char 的包装类, 它提供了一些与字符处理相关的方法</li>
</ul>
<h1 id="9-StringTokenizer-类"><a href="#9-StringTokenizer-类" class="headerlink" title="9. StringTokenizer 类"></a>9. StringTokenizer 类</h1><ul>
<li>token 是语法分析的基本单位, 以 “定界符” (delimiter) 区分</li>
<li>使用 StringTokenizer 类可以使用指定的定界符将一个字符串为多个 token</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 包]]></title>
      <url>/2017/12/articles/Java%20%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>第五篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="1-包的概述"><a href="#1-包的概述" class="headerlink" title="1. 包的概述"></a>1. 包的概述</h1><h2 id="A-什么是包"><a href="#A-什么是包" class="headerlink" title="A. 什么是包"></a>A. 什么是包</h2><ul>
<li>包由一个个 .java 文件组成, 或者说是一个个类组成了包.</li>
<li>一个包里面还可以包含多个包</li>
<li>包的具体体现就是文件夹</li>
</ul>
<h2 id="B-包的作用"><a href="#B-包的作用" class="headerlink" title="B. 包的作用"></a>B. 包的作用</h2><ul>
<li>解决类的同名问题</li>
<li>便于代码复用与维护</li>
</ul>
<h1 id="2-包的创建和使用"><a href="#2-包的创建和使用" class="headerlink" title="2. 包的创建和使用"></a>2. 包的创建和使用</h1><h2 id="A-如何使用包"><a href="#A-如何使用包" class="headerlink" title="A. 如何使用包"></a>A. 如何使用包</h2><ul>
<li>导入特定的类或接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.类型名;</span><br></pre></td></tr></table></figure>
<ul>
<li>导入指定包中所有类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.*;</span><br></pre></td></tr></table></figure>
<ul>
<li>Java 编译器会将 import 语句引入的包字符串拼接到标识符前(不懂 2017年12月7日 16:45:37)</li>
</ul>
<h2 id="B-将类放入自定义包中"><a href="#B-将类放入自定义包中" class="headerlink" title="B. 将类放入自定义包中"></a>B. 将类放入自定义包中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.mp;</span><br></pre></td></tr></table></figure>
<h2 id="C-编译运行"><a href="#C-编译运行" class="headerlink" title="C. 编译运行"></a>C. 编译运行</h2><p>在 Temp.java 文件目录下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Temp.java</span><br></pre></td></tr></table></figure>
<p>会在当前目录产生一个 Temp.class 文件. 但是执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Temp</span><br></pre></td></tr></table></figure>
<p>得到的结果是<em>错误: 找不到或无法加载主类 top.mp.Temp</em></p>
<p>正确的做法是: 在编译时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -d . Temp.java</span><br></pre></td></tr></table></figure>
<p>执行时 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java top.mp.Temp</span><br></pre></td></tr></table></figure>
<h2 id="D-Java-编程须知"><a href="#D-Java-编程须知" class="headerlink" title="D. Java 编程须知"></a>D. Java 编程须知</h2><ul>
<li>Java 从一开始就规定了代码的命名规范, 比如, 所有用户开发的包, 都不能以 java 和 javax 打头, 另外, <strong>声明为 public 的类, 应该放到与其类名一致的文件中(也就是说, 如果 Temp 类声明为 public, 但是这个类所在的文件名字不是 Temp.java,  就会就无法编译)</strong>, 与此同时, <strong>以点号分隔的包名, 其实对应着响应的文件夹结构</strong>, 这样一来, 给定一个完整的类型名, 就可以很快定位到其编译后的 .class 文件</li>
<li>当使用 java 命令运行一个 .class 文件时, <strong>此文件必须放在与它所在的包名一致的文件夹层次结构之下</strong>(如果例子中的 Temp.class 不是在 top/mp 下就无法运行, 而且运行的时候必须处于 top 的父级目录中, 使用 java top.mp.Temp 运行)</li>
<li>当使用 java 命令运行一个 .class 文件时, JVM 会默默地加载 JRE 中的多个包(通过 java -verbose Temp 命令可以看到)</li>
</ul>
<h1 id="3-jar-包"><a href="#3-jar-包" class="headerlink" title="3. jar 包"></a>3. jar 包</h1><blockquote>
<p><a href="http://jinxuliang.com/course2/ppt/show/5412dd3c137e430e98768373" target="_blank" rel="noopener">jar 包的创建与使用</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 类与对象]]></title>
      <url>/2017/12/articles/Java%20%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>第四篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="1-类的模版"><a href="#1-类的模版" class="headerlink" title="1. 类的模版"></a>1. 类的模版</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>/<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>/<span class="keyword">private</span> 数据类型 变量名;</span><br><span class="line">    <span class="keyword">public</span>/<span class="keyword">private</span> 数据类型 方法名(参数列表)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>public 存取与访问不受限制</li>
<li>private 只有类自己的方法可以存取和访问</li>
</ul>
<h1 id="2-引用类型-VS-原始数据类型"><a href="#2-引用类型-VS-原始数据类型" class="headerlink" title="2. 引用类型 VS 原始数据类型"></a>2. 引用类型 VS 原始数据类型</h1><ul>
<li>“引用” 一个对象的变量称为 “引用类型” 的变量, 有时又简称为 “<strong>对象变量</strong>“</li>
<li>诸如 int, float 之类的变量称为 “<strong>原始数据类型</strong>“ 的变量.</li>
</ul>
<h1 id="3-变量与内存"><a href="#3-变量与内存" class="headerlink" title="3. 变量与内存"></a>3. 变量与内存</h1><h2 id="A．变量与内存的分配"><a href="#A．变量与内存的分配" class="headerlink" title="Ａ．变量与内存的分配"></a>Ａ．变量与内存的分配</h2><ul>
<li>声明一个 <strong>对象变量</strong> 时, 实际上并没有创建一个对象, 此变量 = null</li>
<li>定义一个 <strong>原始类型变量</strong> 时, 会马上给其分配内存.<br>(对象变量就是指针? 创建之后为 null?)</li>
</ul>
<h2 id="B-变量初始化"><a href="#B-变量初始化" class="headerlink" title="B. 变量初始化"></a>B. 变量初始化</h2><ul>
<li>任何变量在使用之前都必须初始化</li>
<li>如果要使用一个对象变量又没办法引用一个真实的对象, 就必须声明为 null</li>
</ul>
<h2 id="C-引用对象后的对象变量"><a href="#C-引用对象后的对象变量" class="headerlink" title="C. 引用对象后的对象变量"></a>C. 引用对象后的对象变量</h2><ul>
<li>对象变量保存的是对象的内存地址值</li>
<li>当对象不再使用, JVM 会回收对象所占用的内存, 这个过程称为 “垃圾回收” (GC: Garbage Collection)</li>
</ul>
<h2 id="D-理解赋值-“-”-的含义"><a href="#D-理解赋值-“-”-的含义" class="headerlink" title="D. 理解赋值 “=” 的含义"></a>D. 理解赋值 “=” 的含义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Myclass obj = new Myclass();</span><br><span class="line">Myclass other = obj;</span><br></pre></td></tr></table></figure>
<p>这里的 “=” 是把 obj 保存的内存地址值赋给 other, 这两个对象变量指向的实际是同一个对象.</p>
<h2 id="E-独特的对象引用-this"><a href="#E-独特的对象引用-this" class="headerlink" title="E. 独特的对象引用: this"></a>E. 独特的对象引用: this</h2><ul>
<li>对象中的所有数据字段都是通过 this 指针间接引用的<br>(不是很懂. 2017年12月6日 20:31:40)</li>
</ul>
<h2 id="F-作为常量的对象变量"><a href="#F-作为常量的对象变量" class="headerlink" title="F. 作为常量的对象变量"></a>F. 作为常量的对象变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final Myclass obj = new Myclass();</span><br></pre></td></tr></table></figure>
<p>“常量” 对象不能指向另一个对象, 但可以修改对象, 比如设置它所引用对象的某公有字段值.</p>
<h2 id="G-对象判等"><a href="#G-对象判等" class="headerlink" title="G. 对象判等"></a>G. 对象判等</h2><ul>
<li>对于基本类型变量, 通过 “==” 可以判断它们的值是否相等, 比如 int.</li>
<li>对于对象变量, “==” 比较的是这两个对象变量是否引用同一对象. (这就是这两个变量的指针是否相等?)</li>
<li>我们比较两个变量, 通常是希望比较它们的”内容”是否相等. 在 Java 中要比较两个对象的字段值, 可以 “重写(override)” 基类的 equals() 方法.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((foo)obj).Value == <span class="keyword">this</span>.Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>@Override 指明此方法是 “重写基类的同名方法”, Java 中, 这种以 “@” 打头的标记被称为 “Annotation”</em></p>
<p><em>上面重写 equals() 的方法是简化的, 实际中不应该这么写.</em></p>
<ul>
<li>自定义 equals() 方法<br>除了重写基类的 equals() 方法, 我们也可以 “重载(overload)” equals():<br>(重载: 参数类型或者参数个数不同. 此时不用附加 @Override)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(foo obj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.Value == <span class="keyword">this</span>.Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-构造函数"><a href="#4-构造函数" class="headerlink" title="4. 构造函数"></a>4. 构造函数</h1><h2 id="A-特点"><a href="#A-特点" class="headerlink" title="A. 特点"></a>A. 特点</h2><ul>
<li>部分特点和 C++ 一模一样<h2 id="B-多构造函数"><a href="#B-多构造函数" class="headerlink" title="B. 多构造函数"></a>B. 多构造函数</h2></li>
<li>一个类可以有多个构造函数, 多个构造函数之间通过参数来区分</li>
<li><strong>构造函数之间可以互相调用</strong></li>
</ul>
<h2 id="C-类的初始化块"><a href="#C-类的初始化块" class="headerlink" title="C. 类的初始化块"></a>C. 类的初始化块</h2><ul>
<li>可以在类中使用 “{“ 和 “}” 将语句包围起来, 这部分称为<em>类的初始化块</em>, 里面的语句通常用来初始化类的属性</li>
<li>调用顺序: 从上往下执行初始化语句, 然后执行构造函数里面的语句.</li>
<li>初始化块适合封装那些 “对象创建时必须执行的代码”</li>
<li>创建子类对象会导致基类初始化块的执行</li>
</ul>
<h1 id="5-类的静态字段"><a href="#5-类的静态字段" class="headerlink" title="5. 类的静态字段"></a>5. 类的静态字段</h1><h2 id="A-访问"><a href="#A-访问" class="headerlink" title="A. 访问"></a>A. 访问</h2><ul>
<li>可以通过对象名和类名作为前缀访问静态数据</li>
<li>推荐使用类名来直接访问静态字段(因为静态字段不属于任何一个对象)</li>
</ul>
<h2 id="B-初始化"><a href="#B-初始化" class="headerlink" title="B. 初始化"></a>B. 初始化</h2><ul>
<li><strong>静态初始化块</strong>只会执行一次, 并且优先于一般的初始化</li>
<li>创建子类型对象时, 也会导致父类型的<strong>静态初始化块</strong>的执行</li>
</ul>
<h2 id="C-访问权限"><a href="#C-访问权限" class="headerlink" title="C. 访问权限"></a>C. 访问权限</h2><p><strong>类的静态方法只能访问类的静态成员.</strong></p>
<h1 id="6-包装类"><a href="#6-包装类" class="headerlink" title="6. 包装类"></a>6. 包装类</h1><h2 id="A-含义"><a href="#A-含义" class="headerlink" title="A. 含义"></a>A. 含义</h2><ul>
<li>基本数据类型仅仅提供了数据, 却缺少一些常用的功能, 为此, Java 提供了包装类.<ul>
<li><strong>包装类 = 基本数据类型的数据 + 扩充的一些方法和字段</strong></li>
</ul>
</li>
<li>包装类是引用类型, 可以创建相应的对象.</li>
</ul>
<h2 id="B-Java-中的包装类"><a href="#B-Java-中的包装类" class="headerlink" title="B. Java 中的包装类"></a>B. Java 中的包装类</h2><ul>
<li>byte -&gt; Byte</li>
<li>short -&gt;Short</li>
<li>int -&gt;Int</li>
<li>long -&gt;Long</li>
<li>char -&gt;Char</li>
<li>float -&gt;Float</li>
<li>double -&gt;Double</li>
<li>boolean -&gt;Boolean</li>
</ul>
<h2 id="C-使用"><a href="#C-使用" class="headerlink" title="C. 使用"></a>C. 使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer obj = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">int</span> value = obj.intValue();</span><br></pre></td></tr></table></figure>
<h2 id="D-装箱和拆箱"><a href="#D-装箱和拆箱" class="headerlink" title="D. 装箱和拆箱"></a>D. 装箱和拆箱</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Value = <span class="number">100</span>;</span><br><span class="line">Integer obj = value;  <span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">int</span> result = obj*<span class="number">2</span>;  <span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure>
<p>//不懂</p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 中的方法]]></title>
      <url>/2017/12/articles/Java%2012-5/</url>
      <content type="html"><![CDATA[<p>第二篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="1-静态导入"><a href="#1-静态导入" class="headerlink" title="1. 静态导入"></a>1. 静态导入</h1><p>从 JDK 5.0 开始, 支持一种称为 “静态导入” 的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br></pre></td></tr></table></figure>
<p>从而允许在 Java 代码中省略类名只写静态方法名:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(abs(-<span class="number">100</span>));</span><br></pre></td></tr></table></figure>
<p>上述方法完全等价于:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Math.abs(-<span class="number">100</span>));</span><br></pre></td></tr></table></figure>
<p>(一般的导入方法是导入类, 而就算导入了 Math 类, 想要使用它里面的静态方法还是使用 <strong>类名+方法名</strong> 的方法. 而通过静态导入, 就可以只写静态方法名.)</p>
<h1 id="2-Java-生成真正的随机数"><a href="#2-Java-生成真正的随机数" class="headerlink" title="2. Java 生成真正的随机数"></a>2. Java 生成真正的随机数</h1><p>//不会</p>
<h1 id="3-参数可变的方法"><a href="#3-参数可变的方法" class="headerlink" title="3. 参数可变的方法"></a>3. 参数可变的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableArguments</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span>...values)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> largest = Double.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> v: values)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v &gt; largest)&#123;</span><br><span class="line">                largest = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> largest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Max: "</span> + max(<span class="number">1</span>, <span class="number">11</span>, <span class="number">300</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"Max: "</span> + max(<span class="number">1</span>, <span class="number">11</span>, <span class="number">300</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">800</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="A-特点"><a href="#A-特点" class="headerlink" title="A. 特点"></a>A. 特点</h2><ul>
<li>只能出现在方法参数表列的最后</li>
<li>“…” 位于变量类型和变量名之间, 前后有无空格均可.</li>
<li>调用可变参数方法时, 编译器为该可变参数隐含创建一个数组u在方法体以数组的形式访问可变参数.</li>
</ul>
<h1 id="4-方法重载-overload"><a href="#4-方法重载-overload" class="headerlink" title="4. 方法重载( overload )"></a>4. 方法重载( overload )</h1><h2 id="A-要点"><a href="#A-要点" class="headerlink" title="A. 要点"></a>A. 要点</h2><p>要满足以下条件:</p>
<ul>
<li>方法名相同</li>
<li>参数类型不同, 参数个数不同, 或者是参数类型的顺序不同</li>
<li>注意: <strong>方法的返回值不作为方法重载的判断条件</strong></li>
</ul>
<h1 id="5-递归"><a href="#5-递归" class="headerlink" title="5. 递归"></a>5. 递归</h1><h2 id="A-递归的模式"><a href="#A-递归的模式" class="headerlink" title="A. 递归的模式"></a>A. 递归的模式</h2><ul>
<li>每个递归函数的开头一定是判断递归是否结束的语句(一般是 if 语句)</li>
<li>函数体至少有一句是 “自己调用自己” 的.</li>
<li>每个递归函数一定有一个控制递归可以终结的变量(通常作为函数的参数而存在). 每次调用自己时, 此变量会变化, 并传给被调用的函数.</li>
</ul>
<h1 id="6-处理大数字"><a href="#6-处理大数字" class="headerlink" title="6. 处理大数字"></a>6. 处理大数字</h1><h2 id="A-数字的范围"><a href="#A-数字的范围" class="headerlink" title="A. 数字的范围"></a>A. 数字的范围</h2><ul>
<li>Java 中 int 类型的数值占 32 位, 是有符号的, 第一位是 0 代表正数, 第一位是 1 代表负数. 剩下 31 位, 最小是 0, 最大是 2,147,483,647. 所以 int 类型的范围是 -2,147,483,647 ~ 2,147,483,647.</li>
<li>同理, long 类型的数值占 64 位, 能表示的范围是 2 的 63 次方减 1;</li>
<li>计算机使用固定的位数来保存数值, 因此, 能处理的数值大小是有限的, 当超过一定范围, 数值就会被截断, 这将导致错误的产生.</li>
</ul>
<h2 id="B-解决方法"><a href="#B-解决方法" class="headerlink" title="B. 解决方法"></a>B. 解决方法</h2><p>使用 BigInteger.<br>eg: 求 50! </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recursive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        BigInteger sum;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"请输入 N: "</span>);</span><br><span class="line">        </span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        sum = calculateN(n);</span><br><span class="line">        </span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        </span><br><span class="line">        in.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title">calculateN</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> BigInteger.valueOf(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BigInteger.valueOf(n).multiply(calculateN(n-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="7-浮点数"><a href="#7-浮点数" class="headerlink" title="7. 浮点数"></a>7. 浮点数</h1><p>下面的代码会出错</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> i = <span class="number">0.0001</span>;</span><br><span class="line"><span class="keyword">double</span> j = <span class="number">0.000100000000000000000001</span>;</span><br><span class="line">System.out.println(i == j);  <span class="comment">//输出 true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>原因: 计算机不能精确地表达浮点数(特殊形式的除外), 因此, 当需要比较两个浮点数是否相等时, 应该比较其差的绝对值是否在某个允许范围之内即可.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Math.Abs(i - j) &lt; <span class="number">1e-10</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"false"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(还是输出 true ? 是我写错还是在这个范围内算是相等的.)</p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 中处理日期和时间]]></title>
      <url>/2017/12/articles/Java%E4%B8%AD%E5%A4%84%E7%90%86%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<p>第三篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="1-Instant-和-Duration"><a href="#1-Instant-和-Duration" class="headerlink" title="1. Instant 和 Duration"></a>1. Instant 和 Duration</h1><ul>
<li>Instant 类的实例代表时间轴中的一个时刻, 它有静态方法 now() 可以取出当前时间.</li>
<li>Duration 则代表一个时间段 (比如 “10 秒长的一段时间”)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Instant start = Instant.now();</span><br><span class="line">System.out.println(start);</span><br><span class="line"></span><br><span class="line">Instant end = Instant.now();</span><br><span class="line">System.out.println(end);</span><br><span class="line"></span><br><span class="line">Duration elapse = Duration.between(start, end);</span><br><span class="line">System.out.println(elapse.toMillis());</span><br></pre></td></tr></table></figure>
<h1 id="2-本地时间和日期"><a href="#2-本地时间和日期" class="headerlink" title="2. 本地时间和日期"></a>2. 本地时间和日期</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">LocalDate currentDate = LocalDate.now();</span><br><span class="line">System.out.println(currentDate);  <span class="comment">//2017-12-5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在月份是基于 1 的了</span></span><br><span class="line">LocalDate specificDate = LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(specificDate);</span><br><span class="line"></span><br><span class="line">LocalTime currentTime = LocalTime.now();</span><br><span class="line">System.out.println(currentTime);</span><br><span class="line"></span><br><span class="line">LocalTime specificTime = LocalTime.of(<span class="number">14</span>, <span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">System.out.println(specificTime);</span><br><span class="line"></span><br><span class="line">LocalDateTime currentDT = LocalDateTime.now();</span><br><span class="line"><span class="comment">//输出 ISO 格式的日期时间: 2014-08-31T18:52:20.321</span></span><br><span class="line">System.out.println(currentDT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//日期时间的合成</span></span><br><span class="line">LocalDateTime specificDt = LocalDateTime.of(specificDate, specificTime);</span><br><span class="line"><span class="comment">//2000-01-01T14:10:12</span></span><br><span class="line">System.out.println(specificDT);</span><br></pre></td></tr></table></figure>
<h1 id="3-日期格式化-1"><a href="#3-日期格式化-1" class="headerlink" title="3. 日期格式化-1"></a>3. 日期格式化-1</h1><p>使用 DateTimeFormatter 格式化日期<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">LocalDate currentDate1 = LocalDate.now();</span><br><span class="line">DateTimeFormatter dt = DateTimeFormatter.ISO_DATE;</span><br><span class="line"><span class="comment">//输出样例: 2014-08-31</span></span><br><span class="line">System.out.println(dt.format(currentDate1));</span><br><span class="line"></span><br><span class="line">LocalTime currentTime1 = LocalTime.now();</span><br><span class="line">DateTimeFormatter tf = DateTimeFormatter.ISO_TIME;</span><br><span class="line"><span class="comment">//输出样例: 23:01:02.706</span></span><br><span class="line">System.out.println(tf.format(currentTime1));</span><br><span class="line"></span><br><span class="line">LocalDateTime currentDateTime = LocalDateTime.now();</span><br><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE_TIME;</span><br><span class="line"><span class="comment">//输出样例: 2014-08-31T21:28:48.147</span></span><br><span class="line">System.out.println(dtf.format(currentDateTime));</span><br><span class="line"></span><br><span class="line">DateTimeFormatter f_long = DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG);</span><br><span class="line"><span class="comment">//输出样例: 2014年8月31日</span></span><br><span class="line">System.out.println(f_long.format(currentDateTime));</span><br><span class="line"></span><br><span class="line">DateTimeFormatter f_short = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);</span><br><span class="line"><span class="comment">//输出样例: 14-8-31</span></span><br><span class="line">System.out.println(f_short.format(currentDateTime));</span><br></pre></td></tr></table></figure></p>
<h1 id="4-日期格式化-2"><a href="#4-日期格式化-2" class="headerlink" title="4. 日期格式化-2"></a>4. 日期格式化-2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatterBuilder b = <span class="keyword">new</span> DateTimeFormatterBuilder()</span><br><span class="line">.appendValue(ChronoField.MONTH_OF_YEAR)</span><br><span class="line">.appendLiteral(<span class="string">"||"</span>)</span><br><span class="line">.appendValue(ChronoField.DAY_OF_MONTH)</span><br><span class="line">.appendLiteral(<span class="string">"||"</span>)</span><br><span class="line">.appendValue(ChronoField.YEAR);</span><br><span class="line"><span class="comment">//输出: 8||31||2014</span></span><br><span class="line">DateTimeFormatter f = b.toFormatter();</span><br><span class="line">System.out.println(f.format(currentDateTime));</span><br></pre></td></tr></table></figure>
<h1 id="5-处理时区"><a href="#5-处理时区" class="headerlink" title="5. 处理时区"></a>5. 处理时区</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);</span><br><span class="line">LocalDateTime dt = LocalDateTime.now();</span><br><span class="line"><span class="comment">//14-8-31 下午10:21</span></span><br><span class="line">System.out.println(dtf.format(dt));</span><br><span class="line"></span><br><span class="line">ZonedDateTime gmt = ZonedDateTime.now(ZoneId.of(<span class="string">"GMT+0"</span>));</span><br><span class="line"><span class="comment">//14-8-31 上午10:25</span></span><br><span class="line"></span><br><span class="line">ZonedDateTime ny = ZonedDateTime.now(ZoneId.of(<span class="string">"America/New_York"</span>));</span><br><span class="line"><span class="comment">//14-8-31 上午10:25</span></span><br><span class="line">System.out.println(dtf.format(ny));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出所有的 ZoneId</span></span><br><span class="line">set&lt;String&gt; zones = ZoneId.getAvailableZoneIds();</span><br><span class="line">zones.forEach(z-&gt;System.out.println(z));</span><br></pre></td></tr></table></figure>
<h1 id="6-完整代码"><a href="#6-完整代码" class="headerlink" title="6. 完整代码"></a>6. 完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatterBuilder;</span><br><span class="line"><span class="keyword">import</span> java.time.format.FormatStyle;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoField;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTime</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//      Instant 类的实例代表时间轴中的一个时刻, 它有静态方法 now() 可以取出当前时间.</span></span><br><span class="line">        Instant start = Instant.now();</span><br><span class="line">        System.out.println(start);</span><br><span class="line"></span><br><span class="line">        Instant end = Instant.now();</span><br><span class="line">        System.out.println(end);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      Duration 则代表一个时间段 (比如 "10 秒长的一段时间")</span></span><br><span class="line">        Duration elapse = Duration.between(start, end);</span><br><span class="line">        System.out.println(elapse.toMillis());</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="comment">//本地日期(上面那个不知道是哪里的时间)</span></span><br><span class="line">        LocalDate currentDate = LocalDate.now();</span><br><span class="line">        System.out.println(currentDate);  <span class="comment">//2017-12-5</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//现在月份是基于 1 的了</span></span><br><span class="line">        LocalDate specificDate = LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(specificDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//本地时间</span></span><br><span class="line">        LocalTime currentTime = LocalTime.now();</span><br><span class="line">        System.out.println(currentTime);</span><br><span class="line"></span><br><span class="line">        LocalTime specificTime = LocalTime.of(<span class="number">14</span>, <span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(specificTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//本地时间 + 日期</span></span><br><span class="line">        LocalDateTime currentDT = LocalDateTime.now();</span><br><span class="line">        <span class="comment">//输出 ISO 格式的日期时间: 2014-08-31T18:52:20.321</span></span><br><span class="line">        System.out.println(currentDT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//日期时间的合成</span></span><br><span class="line">        LocalDateTime specificDT = LocalDateTime.of(specificDate, specificTime);</span><br><span class="line">        <span class="comment">//2000-01-01T14:10:12</span></span><br><span class="line">        System.out.println(specificDT);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="comment">//时间的输出样式</span></span><br><span class="line">        </span><br><span class="line">        LocalDate currentDate1 = LocalDate.now();</span><br><span class="line">        DateTimeFormatter dt = DateTimeFormatter.ISO_DATE;</span><br><span class="line">        <span class="comment">//输出样例: 2014-08-31</span></span><br><span class="line">        System.out.println(dt.format(currentDate1));</span><br><span class="line"></span><br><span class="line">        LocalTime currentTime1 = LocalTime.now();</span><br><span class="line">        DateTimeFormatter tf = DateTimeFormatter.ISO_TIME;</span><br><span class="line">        <span class="comment">//输出样例: 23:01:02.706</span></span><br><span class="line">        System.out.println(tf.format(currentTime1));</span><br><span class="line"></span><br><span class="line">        LocalDateTime currentDateTime = LocalDateTime.now();</span><br><span class="line">        DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE_TIME;</span><br><span class="line">        <span class="comment">//输出样例: 2014-08-31T21:28:48.147</span></span><br><span class="line">        System.out.println(dtf.format(currentDateTime));</span><br><span class="line"></span><br><span class="line">        DateTimeFormatter f_long = DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG);</span><br><span class="line">        <span class="comment">//输出样例: 2014年8月31日</span></span><br><span class="line">        System.out.println(f_long.format(currentDateTime));</span><br><span class="line"></span><br><span class="line">        DateTimeFormatter f_short = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);</span><br><span class="line">        <span class="comment">//输出样例: 14-8-31</span></span><br><span class="line">        System.out.println(f_short.format(currentDateTime));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        String fr_short = f_short.withLocale(Locale.ENGLISH).format(currentDateTime);</span><br><span class="line">        String fr_long = f_long.withLocale(Locale.ENGLISH).format(currentDateTime);</span><br><span class="line">        <span class="comment">//输出样例: 8/31/14</span></span><br><span class="line">        System.out.println(fr_short);</span><br><span class="line">        <span class="comment">//输出样例: August 31, 2014</span></span><br><span class="line">        System.out.println(fr_long);</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="comment">//自定义日期输出格式</span></span><br><span class="line">        DateTimeFormatterBuilder b = <span class="keyword">new</span> DateTimeFormatterBuilder()</span><br><span class="line">        .appendValue(ChronoField.MONTH_OF_YEAR)</span><br><span class="line">        .appendLiteral(<span class="string">"||"</span>)</span><br><span class="line">        .appendValue(ChronoField.DAY_OF_MONTH)</span><br><span class="line">        .appendLiteral(<span class="string">"||"</span>)</span><br><span class="line">        .appendValue(ChronoField.YEAR);</span><br><span class="line">        <span class="comment">//输出: 8||31||2014</span></span><br><span class="line">        DateTimeFormatter f = b.toFormatter();</span><br><span class="line">        System.out.println(f.format(currentDateTime));</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------------</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//处理时区</span></span><br><span class="line">        </span><br><span class="line">        DateTimeFormatter dtf1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);</span><br><span class="line">        LocalDateTime dt1 = LocalDateTime.now();</span><br><span class="line">        <span class="comment">//14-8-31 下午10:21</span></span><br><span class="line">        System.out.println(dtf1.format(dt1));</span><br><span class="line"></span><br><span class="line">        ZonedDateTime gmt = ZonedDateTime.now(ZoneId.of(<span class="string">"GMT+0"</span>));</span><br><span class="line">        <span class="comment">//14-8-31 上午10:25</span></span><br><span class="line"></span><br><span class="line">        ZonedDateTime ny = ZonedDateTime.now(ZoneId.of(<span class="string">"America/New_York"</span>));</span><br><span class="line">        <span class="comment">//14-8-31 上午10:25</span></span><br><span class="line">        System.out.println(dtf1.format(ny));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出所有的 ZoneId</span></span><br><span class="line"><span class="comment">//      Set&lt;String&gt; zones = ZoneId.getAvailableZoneIds();</span></span><br><span class="line"><span class="comment">//      zones.forEach(z-&gt;System.out.println(z));</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 语法基础]]></title>
      <url>/2017/12/articles/Java%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>第一篇关于 Java 的笔记.<br><a id="more"></a></p>
<h1 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1. 标识符:"></a>1. 标识符:</h1><ul>
<li>开头: 字母, _ 和 $</li>
<li>不能以数字开头, 不能包含空白字符: Tab, 空格, 回车, 换行</li>
<li>不能使用关键字;</li>
</ul>
<h1 id="2-标识符的规范"><a href="#2-标识符的规范" class="headerlink" title="2. 标识符的规范"></a>2. 标识符的规范</h1><ul>
<li>类名首字母大写</li>
<li>方法名首字母小写</li>
<li>常量全大写.</li>
</ul>
<h1 id="3-Java-的常用数据类型"><a href="#3-Java-的常用数据类型" class="headerlink" title="3. Java 的常用数据类型:"></a>3. Java 的常用数据类型:</h1><ul>
<li>整型 byte, short, int, long</li>
<li>浮点型 float, double(123.456 = 1.23456e+2)</li>
<li>布尔型 true, false</li>
<li>字符型 ‘a’, ‘A’</li>
<li>字符串: “Hello, China”;</li>
</ul>
<h1 id="4-Java-7-新特性"><a href="#4-Java-7-新特性" class="headerlink" title="4. Java 7 新特性"></a>4. Java 7 新特性</h1><ul>
<li>允许使用下划线分隔多个数位. 使用当前区域语言特性格式化数字: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number1 = <span class="number">1_000_000</span>;</span><br><span class="line">NumberFormat format = NumberFormat.getInstance(); </span><br><span class="line">System.out.println(format.format(number1));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="5-final-关键字"><a href="#5-final-关键字" class="headerlink" title="5. final 关键字"></a>5. final 关键字</h1><ul>
<li>final 用于定义常量. 对于在整个项目中使用的常量, 通常按以下模式声明: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> - <span class="keyword">final</span> <span class="keyword">int</span> MAX_VALUE = <span class="number">512</span>; <span class="comment">//常量名通常采用大写.</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="6-原始数据类型"><a href="#6-原始数据类型" class="headerlink" title="6. 原始数据类型"></a>6. 原始数据类型</h1><ul>
<li>Java 中除了 int, float 等少数几个数据类型, 其余的数据类型都用来引用数据. int float 等这些数据类型称为”原始数据类型(primitive type)”;</li>
</ul>
<h1 id="7-枚举类型"><a href="#7-枚举类型" class="headerlink" title="7. 枚举类型"></a>7. 枚举类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">enum</span> Size&#123;SMALL, MEDIUM, LARGE&#125;;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Size s = Size.SMALL;</span><br><span class="line"><span class="comment">//从字符串转换为枚举</span></span><br><span class="line">Size t = Size.valueof(<span class="string">"SMALL"</span>);</span><br></pre></td></tr></table></figure>
<p><em>JDK 5 及以上才可用枚举类型.</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举值的 foreach 迭代</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> MyEnum&#123;</span><br><span class="line">    ONE, TWO, THREE</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(MyEnum value: MyEnum.values())&#123;</span><br><span class="line">        System.out.prinln(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员枚举MyEnum只能在顶级类或接口或静态上下文中定义???</span></span><br></pre></td></tr></table></figure></p>
<p><em>枚举可用于 switch 语句</em></p>
<ul>
<li>枚举类型是引用类型. 枚举不属于原始数据类型, 它的每个具体值都引用一个特定的对象. 相同的值则引用一个对象. 可以用 “==” 和 equals() 方法直接对比枚举类型的值, 换句话说, 对于枚举类型的变量, “==” 和 equals() 方法执行的结果是等价的. (2017年12月4日 19:20:38, 看不懂)</li>
</ul>
<h1 id="8-运算符结合性"><a href="#8-运算符结合性" class="headerlink" title="8. 运算符结合性"></a>8. 运算符结合性</h1><ul>
<li>除了赋值运算符 =, 所有的结合性都是从左到右, 例如: x = y = z 相当于 x = (y = z); 像 x = y =z 这样可能引起误解的代码应该尽量避免, 至少要加上括号, 或者添加注释.</li>
</ul>
<h1 id="9-Java-中的变量"><a href="#9-Java-中的变量" class="headerlink" title="9. Java 中的变量"></a>9. Java 中的变量</h1><p>变量可看成某内存单元(区域)的名字. 每个变量都有:</p>
<ul>
<li>名字(对应于内存中的位置)</li>
<li>数据类型(决定了它所占用的内存单元数量)</li>
<li>值(表示变量所占用的内存单元中所保存的数据.)</li>
<li>变量的读写: 当新值被赋给变量时, 老值将被取代, 仅从内存中读数据不会破坏数据.</li>
<li>(这个变量说的是那块内存还是那个名字? 2017年12月4日 20:46:42)</li>
</ul>
<h1 id="10-变量的使用准则"><a href="#10-变量的使用准则" class="headerlink" title="10. 变量的使用准则"></a>10. 变量的使用准则</h1><ul>
<li>在实际开发中,  一般使用变量来存储用户在程序运行时输入的数据.</li>
<li><strong>变量在使用之前应 保证它有确切的值.</strong></li>
<li>Java 变量遵循 <strong>“同名变量的屏蔽原则”</strong>.</li>
</ul>
<h1 id="11-在运行时读取用户输入"><a href="#11-在运行时读取用户输入" class="headerlink" title="11. 在运行时读取用户输入"></a>11. 在运行时读取用户输入</h1><ul>
<li>方法一</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String firstNumber = JOptionPane.showInputDialog(<span class="string">"Enter: "</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>方法二</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanners(System.in);</span><br><span class="line">System.out.print(<span class="string">"What is your name? "</span>);</span><br><span class="line">String name = in.nextLine();</span><br></pre></td></tr></table></figure>
<h1 id="12-变量间的类型转换"><a href="#12-变量间的类型转换" class="headerlink" title="12. 变量间的类型转换"></a>12. 变量间的类型转换</h1><ul>
<li>自动类型转换是安全的(不精确的-&gt;更精确的, 不用强制类型转换)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intValue = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">long</span> longValue = intValue;</span><br></pre></td></tr></table></figure>
<ul>
<li>强制类型转换可能会引起信息的损失</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> doubleValue = <span class="number">1234567890</span>;</span><br><span class="line"><span class="keyword">float</span> floatValue = (<span class="keyword">float</span>)doubleValue;</span><br><span class="line">System.out.println(floatValue);  <span class="comment">//1.234567894E9</span></span><br></pre></td></tr></table></figure>
<h1 id="13-另一种数据类型转换的方法"><a href="#13-另一种数据类型转换的方法" class="headerlink" title="13. 另一种数据类型转换的方法"></a>13. 另一种数据类型转换的方法</h1><ul>
<li>通过原始类型的包装类完成类型转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> doubleValue = <span class="number">156.5</span>d;</span><br><span class="line">Double doubleObj = <span class="keyword">new</span> Double(doubleValue);</span><br><span class="line"><span class="keyword">byte</span> myByteValue = doubleObj.byteValue();</span><br><span class="line"><span class="keyword">int</span> myIntValue = doubleObj.intValue();</span><br><span class="line"><span class="keyword">float</span> myFloatValue = doubleObj.floatValue();</span><br><span class="line">String myString = doubleObj.toString();</span><br></pre></td></tr></table></figure>
<h1 id="14-精度损失问题"><a href="#14-精度损失问题" class="headerlink" title="14. 精度损失问题"></a>14. 精度损失问题</h1><ul>
<li>double 类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"0.05 + 0.01 = "</span> + (<span class="number">0.05</span> + <span class="number">0.01</span>));</span><br><span class="line">System.out.println(<span class="string">"1.0 - 0.42 = "</span> + (<span class="number">1.0</span> - <span class="number">0.42</span>));</span><br><span class="line">System.out.println(<span class="string">"4.015 * 100 = "</span> + (<span class="number">4.015</span> * <span class="number">100</span>));</span><br><span class="line">System.out.println(<span class="string">"123.3 / 1000 = "</span> + (<span class="number">123.3</span> / <span class="number">100</span>));</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 BigDecimal 解决该问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal f1 = <span class="keyword">new</span> BigDecimal(<span class="string">"0.05"</span>);</span><br><span class="line">BigDecimal f2 = BigDecimal.valueOf(<span class="number">0.01</span>);</span><br><span class="line">BigDecimal f3 = <span class="keyword">new</span> BigDecimal(<span class="number">0.05</span>);</span><br><span class="line">System.out.println(<span class="string">"下面使用String作为BigDecimal构造器参数的计算结果："</span>);</span><br><span class="line">System.out.println(<span class="string">"0.05 + 0.01 = "</span> + f1.add(f2));</span><br><span class="line">System.out.println(<span class="string">"0.05 - 0.01 = "</span> + f1.subtract(f2));</span><br><span class="line">System.out.println(<span class="string">"0.05 * 0.01 = "</span> + f1.multiply(f2));</span><br><span class="line">System.out.println(<span class="string">"0.05 / 0.01 = "</span> + f1.divide(f2));</span><br></pre></td></tr></table></figure>
<p>(在构建 BigDecimal 对象时应该使用字符串而不是 double 数值, 否则, 仍可能引发计算精度问题. (不知为何 2017年12月4日 21:43:20))</p>
<h1 id="15-有关字符串"><a href="#15-有关字符串" class="headerlink" title="15. 有关字符串"></a>15. 有关字符串</h1><h2 id="A-字符串转为数字"><a href="#A-字符串转为数字" class="headerlink" title="A. 字符串转为数字"></a>A. 字符串转为数字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = Integer.parseInt(numberString);</span><br></pre></td></tr></table></figure>
<p>类 Integer 属于包 java.lang, 它 “封装” 了一个 int 类型的整数, 因此, 它是原始数据类型 int 的 “包装类”. (这个封装是什么意思? 2017年12月4日 21:46:21)</p>
<h2 id="B-字符串转为浮点数"><a href="#B-字符串转为浮点数" class="headerlink" title="B. 字符串转为浮点数"></a>B. 字符串转为浮点数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number1 = Double.parseDouble(firstNumber);</span><br><span class="line">number2 = Double.parseDouble(secondNumber);</span><br></pre></td></tr></table></figure>
<p>Double.parseDouble 是一个 Double 类所定义的静态方法, 作用是将 String 数据转为 double 类型的, 返回值是 double 类型的数值. Double 是原始数据类型 double 的 “包装类”, 属于引用类型.(这句话看不懂, 包装类是什么???2017年12月4日 22:03:19)</p>
<h2 id="C-字符串联接操作"><a href="#C-字符串联接操作" class="headerlink" title="C. 字符串联接操作"></a>C. 字符串联接操作</h2><p>使用运算符 + 联接字符串. <strong>将 String 和其他数据类型相加, 结果是一个新的 String.</strong></p>
<h1 id="16-两种类型的变量"><a href="#16-两种类型的变量" class="headerlink" title="16. 两种类型的变量"></a>16. 两种类型的变量</h1><ul>
<li>引用类型的变量, 引用一个对象(变量本身用于存放对象在内存中的位置, 可以看成是一个指针), 故又被称为 “对象变量”.</li>
<li>原始数据类型的变量.</li>
<li>两者的区分: 如果变量的数据类型是一个类的名字, 就是引用类型的变量, 它将引用一个对象. 如果变量的数据类型是一个原始类型(其名称由小写字母组成), 这种类型的变量将直接保存一个原始数据类型的值.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[赫夫曼树编码]]></title>
      <url>/2017/12/articles/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>一棵树是如何跟编码联系起来的呢?<br><a id="more"></a></p>
<p>前一篇讲了赫夫曼树可以得到最优的编码, 也说了给定叶子结点之后, 如何构造出一棵赫夫曼树, 但是还没有说赫夫曼树是如何跟编码联系起来的.</p>
<h1 id="一-赫夫曼树与编码的关系"><a href="#一-赫夫曼树与编码的关系" class="headerlink" title="一. 赫夫曼树与编码的关系"></a>一. 赫夫曼树与编码的关系</h1><p>当我们要对一系列字符进行编码, 首先根据字符出现的频率构造一棵赫夫曼树, 然后规定: <strong>从根结点开始, 往左走一步编码添加一个 1, 往右走编码添加一个 0, 一直到叶子结点.</strong></p>
<p>将每个叶子结点都进行这样的操作, 就得到了它们对应的编码.<br>(此处并没有证明为什么赫夫曼树编码是最优的, 因为我看不懂文档上面说的.)</p>
<h1 id="二-赫夫曼树编码的算法"><a href="#二-赫夫曼树编码的算法" class="headerlink" title="二. 赫夫曼树编码的算法"></a>二. 赫夫曼树编码的算法</h1><p>直觉上应该是从上往下, 将 0 或 1 拼凑起来, 但是貌似先中后序遍历和层次遍历都没办法依次遍历到每个叶子结点(至少我是不知道.)</p>
<p>所以赫夫曼树编码的算法是从叶子结点开始的, 往上走求出赫夫曼编码的. </p>
<p>(没办法从根节点按顺序的走到叶子结点, 但是通过赫夫曼树的前 N 个元素, 我们可以直接访问到叶子结点, 而且通过找双亲, 肯定能够走回根节点的, 这样就得到了完整的编码)</p>
<p>两个点:</p>
<ul>
<li><p>从下往上得到的是倒过来的编码, 如何得到正确的编码呢?<br>实际的代码中, 添加一个 0 或 1 都是在末尾添加, 这样到最后得到的其实是正确的编码.</p>
</li>
<li><p>怎么知道当前结点是左分支还是右分支?<br>在赫夫曼树中, 可以访问到双亲结点, 看看当前结点是否等于双亲结点的左孩子, 是的话就是左分支, 反之是右分支.</p>
</li>
</ul>
<h1 id="三-赫夫曼树编码代码"><a href="#三-赫夫曼树编码代码" class="headerlink" title="三. 赫夫曼树编码代码"></a>三. 赫夫曼树编码代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过编码之后, 每个字符得到其对应编码, 这些编码是 0 和 1 组成的字符串.</span></span><br><span class="line"><span class="comment">//所以这里用字符指针数组来保存这些字符串</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> * HuffmanCode[N+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//传入赫夫曼树, 存储赫夫曼编码的数组, 需要编码的个数</span></span><br><span class="line">    <span class="keyword">int</span> i, c, p, start;</span><br><span class="line">    <span class="keyword">char</span> * cd;<span class="comment">/*cd 作为临时指针, 指向编码过程中得到的字符串*/</span></span><br><span class="line">    cd = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));<span class="comment">/*光有一个指针只能存一个地址, 字符串都没地方放, 所以需要动态分配一块内存存放字符串(n 个字符是有备无患的意思吗???)*/</span></span><br><span class="line">    cd[n] = <span class="string">'\0'</span>;<span class="comment">/*最后一位添加一个字符串结束标志*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*从赫夫曼树第一个元素开始(1-n 存储的是叶子结点), c 指向当前结点, p 指向双亲结点*/</span></span><br><span class="line">        c = i;</span><br><span class="line">        p = ht[i].parent;</span><br><span class="line">        start = n;<span class="comment">/*start 是 cd 指向的数组的内部指针*/</span></span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="number">0</span>)<span class="comment">/*只要当前结点不是根节点(只有根节点的双亲为 0), 就一直循环*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            start--;</span><br><span class="line">            <span class="keyword">if</span>(ht[p].LChild == c)<span class="comment">/*如果双亲的左孩子指向当前结点, 说明往左走走到当前结点.(c 是一个数组下标)*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                cd[start] = <span class="string">'1'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cd[start] = <span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*向上移动*/</span></span><br><span class="line">            c = p;</span><br><span class="line">            p = ht[p].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*得到某个叶子结点的编码之后, 为其指针分配内存空间(长度根据实际情况决定)*/</span></span><br><span class="line">        hc[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((n+<span class="number">1</span>-start)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(hc[i], &amp;cd[start]);<span class="comment">/*取 start 位置的字符的指针, 通过 strcpy 复制*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下面这个代码有逻辑错误, 在判断之前 start 就已经指向下一个位置.</span></span><br><span class="line"><span class="comment">循环结束时, start 指向的不是编码结果的第一个字符, 而是前一个.</span></span><br><span class="line"><span class="comment">这样会造成最后调用 strcpy() 的结果不正确</span></span><br><span class="line"><span class="comment">start = n-1;</span></span><br><span class="line"><span class="comment">while(p!=0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(ht[p].left == c)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cd[start] = '1';</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cd[start] = '0';</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    start--;</span></span><br><span class="line"><span class="comment">    c = p;</span></span><br><span class="line"><span class="comment">    p = ht[p].parent;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="四-完整代码"><a href="#四-完整代码" class="headerlink" title="四. 完整代码"></a>四. 完整代码</h1><p>有一部分来自上一篇的代码, 为了与文档上的结果一致, 做出了一些修改.<br>逻辑上面说了, 只不过细节还有些需要注意的地方, 比如字符串的内部指针, 以及挑选最小的两个元素.<br>(还有很多可以优化的地方.)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20  <span class="comment">/*叶子结点的最大值*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2*N-1  <span class="comment">/*所有结点的最大值*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> * HuffmanCode[N+<span class="number">1</span>];<span class="comment">/*存放编码的结果*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> parent;</span><br><span class="line">    <span class="keyword">int</span> LChild;</span><br><span class="line">    <span class="keyword">int</span> RChild;</span><br><span class="line">&#125;HuffmanTree[M+<span class="number">1</span>];  <span class="comment">/*HuffmanTree 是一个结构体数组类型, 0 号单元不用.*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n, <span class="keyword">int</span> * s1, <span class="keyword">int</span> * s2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> w[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ScanW</span><span class="params">(<span class="keyword">int</span> w[], <span class="keyword">int</span> * n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintHuffmanCode</span><span class="params">(HuffmanCode hc, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HuffmanTree ht;</span><br><span class="line">    HuffmanCode hc;</span><br><span class="line">    <span class="keyword">int</span> w[N], n;</span><br><span class="line"></span><br><span class="line">    ScanW(w, &amp;n);</span><br><span class="line"></span><br><span class="line">    CrtHuffmanTree(ht, w, n);</span><br><span class="line"></span><br><span class="line">    PrintHuffmanTree(ht, n);</span><br><span class="line"></span><br><span class="line">    CrtHuffmanCode(ht, hc, n);</span><br><span class="line"></span><br><span class="line">    PrintHuffmanCode(hc, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出赫夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"赫夫曼树如下: \n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;<span class="number">2</span>*n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"权重: %2d, 双亲: %2d, 左子树: %2d, 右子树 %2d .\n"</span>, ht[i].weight, ht[i].parent, ht[i].LChild, ht[i].RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入个数和权重</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ScanW</span><span class="params">(<span class="keyword">int</span> w[], <span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入叶子结点的个数: \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入各结点的权重: \n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;(*n); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选出最小的两个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n, <span class="keyword">int</span> * s1, <span class="keyword">int</span> * s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这个函数是为了找出 ht[1]~ht[n] 中 parent 等于 0, 而且最小的两个数, 同时保证 s1 小于 s2.</span></span><br><span class="line"><span class="comment">        思路: s2 等于第一个 parent 为 0 的数的下标, s1 等于第二个 parent 为 0 的下标, s1 往后找最小的数, s2 也往后找最小的数.</span></span><br><span class="line"><span class="comment">        这样就保证了 s2 和 s1 不会是同一个数. 最后保证 s1 对应的值 小于 s2对应的值.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i, first, second, min;</span><br><span class="line">    *s1 = <span class="number">0</span>;</span><br><span class="line">    *s2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[i].parent != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            first = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *s2 = first;  <span class="comment">/*确保它们不会指向同一个元素*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=first+<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[i].parent != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            second = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *s1 = second;</span><br><span class="line">    <span class="keyword">for</span>(i=second+<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[i].parent != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ht[i].weight &lt;= ht[*s1].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                *s1 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=first+<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[i].parent != <span class="number">0</span> || i == (*s1))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ht[i].weight &lt;= ht[*s2].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                *s2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*判断的是 ht[*s1].weight 和 ht[*s2].weight, 而不是 s1 和 s2*/</span></span><br><span class="line">    <span class="keyword">if</span>(ht[*s1].weight &gt; ht[*s2].weight)</span><br><span class="line">    &#123;</span><br><span class="line">        min = *s1;</span><br><span class="line">        *s1 = *s2;</span><br><span class="line">        *s2 = min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*此处是为了跟文档上面的编码结果一致*/</span></span><br><span class="line">    <span class="keyword">if</span>(ht[*s1].LChild==<span class="number">0</span> &amp;&amp; ht[*s2].LChild!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        min = *s1;</span><br><span class="line">        *s1 = *s2;</span><br><span class="line">        *s2 = min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*两个 if 保证了赫夫曼树中, 左子树小于右子树, 同时叶子结点在右子树(除最底层)*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"本次选出: %d %d\n"</span>, ht[*s1].weight, ht[*s2].weight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造赫夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> w[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, s1, s2;</span><br><span class="line">    <span class="comment">/*构造赫夫曼树 ht[M+1], w[] 存放 n 个权值. */</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*1~n 号单元存放叶子结点, 初始化*/</span></span><br><span class="line">        ht[i].weight = w[i<span class="number">-1</span>];</span><br><span class="line">        ht[i].parent = <span class="number">0</span>;</span><br><span class="line">        ht[i].LChild = <span class="number">0</span>;</span><br><span class="line">        ht[i].RChild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=n+<span class="number">1</span>; i&lt;<span class="number">2</span>*n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*n+1~2*n-1 号单元存放非叶子结点, 初始化*/</span></span><br><span class="line">        ht[i].weight = <span class="number">0</span>;</span><br><span class="line">        ht[i].parent = <span class="number">0</span>;</span><br><span class="line">        ht[i].LChild = <span class="number">0</span>;</span><br><span class="line">        ht[i].RChild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始创建赫夫曼树</span></span><br><span class="line">    <span class="keyword">for</span>(i=n+<span class="number">1</span>; i&lt;<span class="number">2</span>*n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从 ht[1]~ht[i-1] 中选两个 parent 为 0 而且权值最小的两个数, 赋给 s1, s2</span></span><br><span class="line">        select(ht, i<span class="number">-1</span>, &amp;s1, &amp;s2);</span><br><span class="line">        ht[i].weight = ht[s1].weight + ht[s2].weight;</span><br><span class="line">        ht[i].LChild = s1;</span><br><span class="line">        ht[i].RChild = s2;</span><br><span class="line">        ht[s1].parent = i;</span><br><span class="line">        ht[s2].parent = i;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">/*赫夫曼树建立完毕*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对赫夫曼树编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree ht, HuffmanCode hc, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//传入赫夫曼树, 存储赫夫曼编码的数组, 需要编码的个数</span></span><br><span class="line">    <span class="keyword">int</span> i, c, p, start;</span><br><span class="line">    <span class="keyword">char</span> * cd;<span class="comment">/*cd 作为临时指针, 指向编码过程中得到的字符串*/</span></span><br><span class="line">    cd = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));<span class="comment">/*光有一个指针只能存一个地址, 字符串都没地方放, 所以需要动态分配一块内存存放字符串(n 个字符是有备无患的意思吗???)*/</span></span><br><span class="line">    cd[n] = <span class="string">'\0'</span>;<span class="comment">/*最后一位添加一个字符串结束标志*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*从赫夫曼树第一个元素开始(1-n 存储的是叶子结点), c 指向当前结点, p 指向双亲结点*/</span></span><br><span class="line">        c = i;</span><br><span class="line">        p = ht[i].parent;</span><br><span class="line">        start = n;<span class="comment">/*start 是 cd 指向的数组的内部指针*/</span></span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="number">0</span>)<span class="comment">/*只要当前结点不是根节点(只有根节点的双亲为 0), 就一直循环*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            start--;</span><br><span class="line">            <span class="keyword">if</span>(ht[p].LChild == c)<span class="comment">/*如果双亲的左孩子指向当前结点, 说明往左走走到当前结点.(c 是一个数组下标)*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                cd[start] = <span class="string">'1'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cd[start] = <span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*向上移动*/</span></span><br><span class="line">            c = p;</span><br><span class="line">            p = ht[p].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*得到某个叶子结点的编码之后, 为其指针分配内存空间(长度根据实际情况决定)*/</span></span><br><span class="line">        hc[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((n+<span class="number">1</span>-start)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">        <span class="built_in">strcpy</span>(hc[i], &amp;cd[start]);<span class="comment">/*取 start 位置的字符的指针, 通过 strcpy 复制*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintHuffmanCode</span><span class="params">(HuffmanCode hc, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"赫夫曼编码: \n"</span>);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, hc[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[赫夫曼树]]></title>
      <url>/2017/11/articles/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>赫夫曼(Huffman)树, 又称最优树.<br><a id="more"></a></p>
<h1 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一. 基本概念"></a>一. 基本概念</h1><p>赫夫曼树又称最优树. 最优树是一类带权路径长度最短的树, 所有先要知道什么是最优树就要先知道什么是<strong>带权</strong>以及<strong>路径</strong>.</p>
<h2 id="1-路径"><a href="#1-路径" class="headerlink" title="1. 路径"></a>1. 路径</h2><p>两个结点之间的距离称为路径, 可以看成是中间那条线.</p>
<h2 id="2-路径长度"><a href="#2-路径长度" class="headerlink" title="2. 路径长度"></a>2. 路径长度</h2><p>树结点 A 的路径长度是从根结点到 A 的距离, 比如根节点的子节点的路径长度就是 1. (可以数从根节点到当前结点经过了几条线)</p>
<h2 id="3-树的路径长度"><a href="#3-树的路径长度" class="headerlink" title="3. 树的路径长度"></a>3. 树的路径长度</h2><p>将所有叶子结点的路径长度相加就得到了树的路径长度.</p>
<h2 id="4-结点的权"><a href="#4-结点的权" class="headerlink" title="4. 结点的权"></a>4. 结点的权</h2><p>“权”也就是权重, 表示结点的重要程度.</p>
<h2 id="5-带权路径长度"><a href="#5-带权路径长度" class="headerlink" title="5. 带权路径长度"></a>5. 带权路径长度</h2><p>其实就是将权和路径长度相乘.</p>
<h2 id="6-树的带权路径长度"><a href="#6-树的带权路径长度" class="headerlink" title="6. 树的带权路径长度"></a>6. 树的带权路径长度</h2><p>把所有叶子结点的带权路径长度加起来就是树的带权路径长度.</p>
<h1 id="二-什么是最优树"><a href="#二-什么是最优树" class="headerlink" title="二. 什么是最优树"></a>二. 什么是最优树</h1><p>最优树就是<strong>带权路径长度最短</strong>的树. </p>
<p>问题: 指定 n 个结点, 如何构造出最优树呢?<br>已知带权路径长度是权值乘以路径长度, 那么理想状况是<strong>权值大</strong>的结点<strong>路径长度小一些</strong>, 这样得到<strong>带权路径长度的相对较小</strong>. (我瞎编的, 推导过程我没看懂)</p>
<p>赫夫曼树就是这种带权长度路径最小的树.</p>
<h1 id="三-赫夫曼树的作用"><a href="#三-赫夫曼树的作用" class="headerlink" title="三. 赫夫曼树的作用"></a>三. 赫夫曼树的作用</h1><p>通过最优树可以知道赫夫曼树是带权长度路径最小的树, 那么赫夫曼树有什么用?(后面再谈论如何构造出一棵赫夫曼树)</p>
<h2 id="1-实际问题"><a href="#1-实际问题" class="headerlink" title="1. 实际问题"></a>1. 实际问题</h2><p>假设一段文本要通过网络发送出去, 发送数据出去肯定是要转换成二进制码, 这里就产生了一个问题: 怎么编码呢? </p>
<h2 id="2-方法一"><a href="#2-方法一" class="headerlink" title="2. 方法一"></a>2. 方法一</h2><p>用固定长度来表示一个字符, 比如 00000001 表示字母 a, 00000010 表示字母 b…这种方式可行, 缺点是太长了, 我为什么不用 1 表示 a, 10 表示 b 呢?</p>
<h2 id="3-方法二"><a href="#3-方法二" class="headerlink" title="3. 方法二"></a>3. 方法二</h2><p>正因定长编码的缺点, 所以有了变长编码, 假设用 1 表示 a, 10 表示 b, 11 表示 c. 问题在于解码的时候遇到两个 1 怎么办? 这是两个 a 还是一个 c ?</p>
<h2 id="4-问题一"><a href="#4-问题一" class="headerlink" title="4. 问题一"></a>4. 问题一</h2><p>如何避免遇到两个 1 不知道是什么意思的情况 ?<br>只要保证一个字符的编码不是其他编码的前缀, 比如 a 的编码是 01, 那么就不存在以 01 开头的编码, 例如 0101 这种是不能存在的.</p>
<h2 id="5-问题二"><a href="#5-问题二" class="headerlink" title="5. 问题二"></a>5. 问题二</h2><p>既然使用变长编码, 不同字符的编码长度也就不一定相同, 那么那个字符的编码长度最短(编码自然是越短越好)?<br>答案是: 出现次数最多的那个字符, 出现次数越多的字符使用越短的编码, 就可以减少编码之后的总长度.</p>
<p>变长编码具有优势, 也具有两个问题, 而赫夫曼树就能完美解决这两个问题: 既可以保证一个字符的编码不是另一个字符编码的前缀, 又能保证出现次数最多的字符是使用最短的编码.</p>
<h1 id="四-如何构造赫夫曼树"><a href="#四-如何构造赫夫曼树" class="headerlink" title="四. 如何构造赫夫曼树"></a>四. 如何构造赫夫曼树</h1><p>这里先用人话说一遍:</p>
<h2 id="1-第一步"><a href="#1-第一步" class="headerlink" title="1. 第一步"></a>1. 第一步</h2><p>把给定权值的多个结点都看成是一棵二叉树, 组成森林 F</p>
<h2 id="2-第二步"><a href="#2-第二步" class="headerlink" title="2. 第二步"></a>2. 第二步</h2><p>找出 F 中根结点权值最小的两棵树.</p>
<h2 id="3-第三步"><a href="#3-第三步" class="headerlink" title="3. 第三步"></a>3. 第三步</h2><p>将这两棵树分别作为左子树和右子树, 创建一棵新的二叉树, 新的二叉树的根结点的权值就是左右子树权值之和. 将这棵新的树加入到 F 中去.</p>
<h2 id="4-第四步"><a href="#4-第四步" class="headerlink" title="4. 第四步"></a>4. 第四步</h2><p>重复第二, 第三步, 一直到 F 只有一棵树为止.</p>
<h1 id="五-赫夫曼树的存储结构"><a href="#五-赫夫曼树的存储结构" class="headerlink" title="五. 赫夫曼树的存储结构"></a>五. 赫夫曼树的存储结构</h1><p>赫夫曼树是用一个结构体数组表示的, 每个数组元素存放一个结点, 结点包括左子树, 右子树, 双亲, 权重, 所以数据类型定义如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20  <span class="comment">/*叶子结点的最大值*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2*N-1  <span class="comment">/*所有结点的最大值*/</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> parent;</span><br><span class="line">    <span class="keyword">int</span> LChild;</span><br><span class="line">    <span class="keyword">int</span> RChild;</span><br><span class="line">&#125;HuffmanTree[M+<span class="number">1</span>];  <span class="comment">/*HuffmanTree 是一个结构体数组类型, 0 号单元不用.*/</span></span><br></pre></td></tr></table></figure></p>
<p>(二叉树有 n 个叶子结点, 那么总结点最多有 2*n-1 个结点)</p>
<h1 id="六-构造赫夫曼树"><a href="#六-构造赫夫曼树" class="headerlink" title="六. 构造赫夫曼树"></a>六. 构造赫夫曼树</h1><p>将自然语言转换成代码, 如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> w[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*构造赫夫曼树 ht[M+1], w[] 存放 n 个权值. */</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ht[i] = &#123;w[i], <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;  <span class="comment">/*1~n 号单元存放叶子结点, 初始化*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=n+<span class="number">1</span>; i&lt;<span class="number">2</span>*n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ht[i] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;  <span class="comment">/*n+1~2*n-1 号单元存放非叶子结点, 初始化*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始创建赫夫曼树</span></span><br><span class="line">    <span class="keyword">for</span>(i=n+<span class="number">1</span>; i&lt;<span class="number">2</span>*n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从 ht[1]~ht[i-1] 中选两个 parent 为 0 而且权值最小的两个数, 赋给 s1, s2</span></span><br><span class="line">        select(ht, i<span class="number">-1</span>, &amp;s1, &amp;s2);</span><br><span class="line">        ht[i].weight = ht[s1].weight + ht[s2].weight;</span><br><span class="line">        ht[i].LChild = s1;</span><br><span class="line">        ht[i].RChild = s2;</span><br><span class="line">        ht[s1].parent = i;</span><br><span class="line">        ht[s2].parent = i;</span><br><span class="line">    &#125;<span class="comment">/*赫夫曼树建立完毕*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="七-完整代码"><a href="#七-完整代码" class="headerlink" title="七. 完整代码"></a>七. 完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20  <span class="comment">/*叶子结点的最大值*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2*N-1  <span class="comment">/*所有结点的最大值*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> parent;</span><br><span class="line">    <span class="keyword">int</span> LChild;</span><br><span class="line">    <span class="keyword">int</span> RChild;</span><br><span class="line">&#125;HuffmanTree[M+<span class="number">1</span>];  <span class="comment">/*HuffmanTree 是一个结构体数组类型, 0 号单元不用.*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n, <span class="keyword">int</span> * s1, <span class="keyword">int</span> * s2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> w[], <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ScanW</span><span class="params">(<span class="keyword">int</span> w[], <span class="keyword">int</span> * n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HuffmanTree ht;</span><br><span class="line">    <span class="keyword">int</span> w[N], n;</span><br><span class="line"></span><br><span class="line">    ScanW(w, &amp;n);</span><br><span class="line"></span><br><span class="line">    CrtHuffmanTree(ht, w, n);</span><br><span class="line"></span><br><span class="line">    PrintHuffmanTree(ht, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"赫夫曼树如下: \n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;<span class="number">2</span>*n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"权重: %2d, 双亲: %2d, 左子树: %2d, 右子树 %2d .\n"</span>, ht[i].weight, ht[i].parent, ht[i].LChild, ht[i].RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ScanW</span><span class="params">(<span class="keyword">int</span> w[], <span class="keyword">int</span> *n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入叶子结点的个数: \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入各结点的权重: \n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;(*n); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> n, <span class="keyword">int</span> * s1, <span class="keyword">int</span> * s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这个函数是为了找出 ht[1]~ht[n] 中 parent 等于 0, 而且最小的两个数, 同时保证 s1 小于 s2.</span></span><br><span class="line"><span class="comment">        思路: s2 等于第一个 parent 为 0 的数的下标, s1 等于第二个 parent 为 0 的下标, s1 往后找最小的数, s2 也往后找最小的数.</span></span><br><span class="line"><span class="comment">        这样就保证了 s2 和 s1 不会是同一个数. 最后保证 s1 对应的值 小于 s2对应的值.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i, first, second, min;</span><br><span class="line">    *s1 = <span class="number">0</span>;</span><br><span class="line">    *s2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[i].parent != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            first = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *s2 = first;  <span class="comment">/*确保它们不会指向同一个元素*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=first+<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[i].parent != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            second = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *s1 = second;</span><br><span class="line">    <span class="keyword">for</span>(i=second+<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[i].parent != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ht[i].weight &lt;= ht[*s1].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                *s1 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=first+<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ht[i].parent != <span class="number">0</span> || i == (*s1))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ht[i].weight &lt;= ht[*s2].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                *s2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*判断的是 ht[*s1].weight 和 ht[*s2].weight, 而不是 s1 和 s2*/</span></span><br><span class="line">    <span class="keyword">if</span>(ht[*s1].weight &gt; ht[*s2].weight)</span><br><span class="line">    &#123;</span><br><span class="line">        min = *s1;</span><br><span class="line">        *s1 = *s2;</span><br><span class="line">        *s2 = min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"本次选出: %d %d\n"</span>, ht[*s1].weight, ht[*s2].weight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree ht, <span class="keyword">int</span> w[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, s1, s2;</span><br><span class="line">    <span class="comment">/*构造赫夫曼树 ht[M+1], w[] 存放 n 个权值. */</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*1~n 号单元存放叶子结点, 初始化*/</span></span><br><span class="line">        ht[i].weight = w[i<span class="number">-1</span>];</span><br><span class="line">        ht[i].parent = <span class="number">0</span>;</span><br><span class="line">        ht[i].LChild = <span class="number">0</span>;</span><br><span class="line">        ht[i].RChild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=n+<span class="number">1</span>; i&lt;<span class="number">2</span>*n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*n+1~2*n-1 号单元存放非叶子结点, 初始化*/</span></span><br><span class="line">        ht[i].weight = <span class="number">0</span>;</span><br><span class="line">        ht[i].parent = <span class="number">0</span>;</span><br><span class="line">        ht[i].LChild = <span class="number">0</span>;</span><br><span class="line">        ht[i].RChild = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始创建赫夫曼树</span></span><br><span class="line">    <span class="keyword">for</span>(i=n+<span class="number">1</span>; i&lt;<span class="number">2</span>*n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从 ht[1]~ht[i-1] 中选两个 parent 为 0 而且权值最小的两个数, 赋给 s1, s2</span></span><br><span class="line">        select(ht, i<span class="number">-1</span>, &amp;s1, &amp;s2);</span><br><span class="line">        ht[i].weight = ht[s1].weight + ht[s2].weight;</span><br><span class="line">        ht[i].LChild = s1;</span><br><span class="line">        ht[i].RChild = s2;</span><br><span class="line">        ht[s1].parent = i;</span><br><span class="line">        ht[s2].parent = i;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">/*赫夫曼树建立完毕*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[二叉树的存储与基本操作]]></title>
      <url>/2017/11/articles/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>主要是二叉树的链式存储和初始化等操作.<br><a id="more"></a></p>
<h1 id="一-二叉树的顺序存储"><a href="#一-二叉树的顺序存储" class="headerlink" title="一. 二叉树的顺序存储"></a>一. 二叉树的顺序存储</h1><h2 id="1-含义"><a href="#1-含义" class="headerlink" title="1. 含义"></a>1. 含义</h2><p>用一个数组依次存放二叉树的结点, 如果是满二叉树或者完全二叉树还可以, 如果是其他的二叉树, 为了确定元素在树中的位置, 需要将其转换为完全二叉树, 存储结点的时候, 如果原本没有这个结点, 那么就用 0 来表示.</p>
<h1 id="二-二叉树的链式存储"><a href="#二-二叉树的链式存储" class="headerlink" title="二. 二叉树的链式存储"></a>二. 二叉树的链式存储</h1><h2 id="1-含义-二叉链表存储"><a href="#1-含义-二叉链表存储" class="headerlink" title="1. 含义(二叉链表存储)"></a>1. 含义(二叉链表存储)</h2><p>用结构体表示一个结点, 每个结点有数据域存放数据, 还有两个指针分别指向左右子树.</p>
<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> * <span class="title">lchild</span>, * <span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br></pre></td></tr></table></figure>
<h2 id="3-改进"><a href="#3-改进" class="headerlink" title="3. 改进"></a>3. 改进</h2><p>如果希望方便的找到结点的双亲, 可以在结点结构体里添加一个双亲域.</p>
<h1 id="三-二叉树的基本操作"><a href="#三-二叉树的基本操作" class="headerlink" title="三. 二叉树的基本操作"></a>三. 二叉树的基本操作</h1><h2 id="1-建立一棵空二叉树"><a href="#1-建立一棵空二叉树" class="headerlink" title="1. 建立一棵空二叉树"></a>1. 建立一棵空二叉树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Initate</span><span class="params">(BiTree bt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode))==<span class="literal">NULL</span>)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    bt-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">    bt-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(???主函数是什么样的?传个指针过来是否可行)</p>
<h2 id="2-生成一棵树"><a href="#2-生成一棵树" class="headerlink" title="2. 生成一棵树"></a>2. 生成一棵树</h2><p>这个函数可以通过画图理解, 注意这样生成一棵树是通过多次调用函数, 从下往上生成的.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BiTree <span class="title">Create</span><span class="params">(elemtype x, BiTree lbt, BiTree rbt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree p;</span><br><span class="line">    <span class="keyword">if</span>(p=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode))==<span class="literal">NULL</span>)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;lchild = lbt;</span><br><span class="line">    p-&gt;rchild = rbt;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-将-x-插入二叉树-并作为-parent-的左子树"><a href="#3-将-x-插入二叉树-并作为-parent-的左子树" class="headerlink" title="3. 将 x 插入二叉树, 并作为 parent 的左子树"></a>3. 将 x 插入二叉树, 并作为 parent 的左子树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BiTree <span class="title">InsertL</span><span class="params">(BiTree bt, elemtype x, BiTree parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree p;</span><br><span class="line">    <span class="keyword">if</span>(parent==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入出错!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode))==<span class="literal">NULL</span>)  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(parent-&gt;lchild == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        parent-&gt;lchild = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;lchild = parent-&gt;lchild;</span><br><span class="line">        parent-&gt;lchild = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-将-x-插入二叉树-并作为-parent-的右子树"><a href="#4-将-x-插入二叉树-并作为-parent-的右子树" class="headerlink" title="4. 将 x 插入二叉树, 并作为 parent 的右子树"></a>4. 将 x 插入二叉树, 并作为 parent 的右子树</h2><p>跟上面的代码类似. (略)</p>
<h2 id="5-删除二叉树中-parent-的左子树"><a href="#5-删除二叉树中-parent-的左子树" class="headerlink" title="5. 删除二叉树中 parent 的左子树"></a>5. 删除二叉树中 parent 的左子树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BiTree <span class="title">DeleteL</span><span class="params">(BiTree bt, BiTree parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree p;</span><br><span class="line">    <span class="keyword">if</span>(parent==<span class="literal">NULL</span> || parent-&gt;lchild==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除出错!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = parent-&gt;lchild;</span><br><span class="line">    <span class="built_in">free</span>(p);  <span class="comment">//实际上还要遍历的释放所有元素</span></span><br><span class="line">    parent-&gt;lchild = <span class="literal">NULL</span>;  <span class="comment">//避免成为野指针</span></span><br><span class="line">    <span class="keyword">return</span> bt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-删除二叉树中-parent-的右子树"><a href="#6-删除二叉树中-parent-的右子树" class="headerlink" title="6. 删除二叉树中 parent 的右子树"></a>6. 删除二叉树中 parent 的右子树</h2><p>和上面类似. (略)</p>
<h2 id="7-Search-bt-x-在二叉树中查找-x"><a href="#7-Search-bt-x-在二叉树中查找-x" class="headerlink" title="7. Search(bt, x) 在二叉树中查找 x"></a>7. Search(bt, x) 在二叉树中查找 x</h2><p>(略)</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[二叉树的广度优先遍历]]></title>
      <url>/2017/11/articles/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<p>实际上也就是二叉树的层次遍历.<br><a id="more"></a><br>二叉树的遍历分为深度优先遍历(分别是: 先中后序遍历), 而广度优先遍历则是层次遍历.</p>
<h1 id="一-功能"><a href="#一-功能" class="headerlink" title="一. 功能"></a>一. 功能</h1><p>从上往下, 一层一层的遍历每个结点.</p>
<h1 id="二-算法思想"><a href="#二-算法思想" class="headerlink" title="二. 算法思想"></a>二. 算法思想</h1><p>首先将根指针(注意不是根节点)放进数组中, 输出它的内容, 然后将它的左孩子和右孩子放入数组中.<br>数组内部指针向后移动, 此时指向它的左孩子, 输出左孩子的内容, 并把左孩子的左孩子和右孩子放进数组中.<br>…<br>以此类推, 知道处理完数组中的最后一个元素.</p>
<h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree bt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree Queue[MAXNODE];</span><br><span class="line">    <span class="keyword">int</span> front, rear;</span><br><span class="line">    front = <span class="number">-1</span>;</span><br><span class="line">    rear = <span class="number">0</span>;</span><br><span class="line">    Queue[rear] = bt;</span><br><span class="line">    <span class="keyword">while</span>(front != rear)</span><br><span class="line">    &#123;</span><br><span class="line">        front++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,Queue[front]-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(Queue[front]-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rear++;</span><br><span class="line">            Queue[rear] = Queue[front]-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Queue[front]-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rear++;</span><br><span class="line">            Queue[rear] = Queue-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这里可以看出, 队列不一定要用链表实现, 甚至可以用数组实现一个假队列.</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[树和森林]]></title>
      <url>/2017/11/articles/%E6%A0%91%E5%92%8C%E6%A3%AE%E6%9E%97/</url>
      <content type="html"><![CDATA[<p>二叉树、树和森林之间是可以转换的.<br><a id="more"></a></p>
<h1 id="一-树的存储结构"><a href="#一-树的存储结构" class="headerlink" title="一. 树的存储结构"></a>一. 树的存储结构</h1><h2 id="1-双亲表示法"><a href="#1-双亲表示法" class="headerlink" title="1. 双亲表示法"></a>1. 双亲表示法</h2><h3 id="a-含义"><a href="#a-含义" class="headerlink" title="a. 含义"></a>a. 含义</h3><p>用一个结构体数组表示一棵树, 每个数组元素由数据域和双亲域组成, 保存着当前结点的数据, 以及该结点双亲在数组中的位置. </p>
<h3 id="b-代码"><a href="#b-代码" class="headerlink" title="b. 代码"></a>b. 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DataNode</span>  //结点的结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TypeData data;  <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">int</span> parent;  <span class="comment">//记录双亲在数组中的位置</span></span><br><span class="line">&#125;DataNode;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PTree</span>  //树的结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataNode nodes[<span class="number">100</span>];  <span class="comment">//树中最多有一百个元素</span></span><br><span class="line">    <span class="keyword">int</span> r, n;  <span class="comment">//根的位置和结点数 </span></span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure>
<h3 id="c-优缺点"><a href="#c-优缺点" class="headerlink" title="ｃ. 优缺点"></a>ｃ. 优缺点</h3><p>给出某个位置的结点, 方便找到它的双亲, 但是不方便找到它的孩子结点.</p>
<h2 id="2-孩子表示法"><a href="#2-孩子表示法" class="headerlink" title="2. 孩子表示法"></a>2. 孩子表示法</h2><h3 id="a-含义-1"><a href="#a-含义-1" class="headerlink" title="a. 含义"></a>a. 含义</h3><p>用一个结构体数组表示一棵树, 每棵树都有数据域和孩子域. 数据域保存当前结点的数据, 孩子域指向当前结点的第一个孩子, 如果不止一个孩子, 则第一个孩子的指针域又指向下一个孩子.</p>
<h3 id="b-代码-1"><a href="#b-代码-1" class="headerlink" title="b. 代码"></a>b. 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>  //孩子结点的结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;  <span class="comment">//孩子结点在数组中的位置</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> * <span class="title">next</span>;</span>  <span class="comment">//下一个孩子的位置</span></span><br><span class="line">&#125;CTNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>  //结点的结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;  <span class="comment">//结点的数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> * <span class="title">firstchild</span>;</span>  <span class="comment">//指向当前结点的第一个孩子</span></span><br><span class="line">&#125;TNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>  //树的结构</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TNode nodes[<span class="number">100</span>];  <span class="comment">//树中最多有一百个元素</span></span><br><span class="line">    <span class="keyword">int</span> r, n;  <span class="comment">//根的位置和结点数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="c-优缺点-1"><a href="#c-优缺点-1" class="headerlink" title="c. 优缺点"></a>c. 优缺点</h3><p>方便找出某个结点的所有孩子, 但是不能方便地得到某个结点的双亲. 可以通过在数组元素中加入一个属性, 保存双亲在数组中的位置.</p>
<h2 id="3-孩子兄弟表示法"><a href="#3-孩子兄弟表示法" class="headerlink" title="3. 孩子兄弟表示法"></a>3. 孩子兄弟表示法</h2><h3 id="a-含义-2"><a href="#a-含义-2" class="headerlink" title="a. 含义"></a>a. 含义</h3><p>用链表表示一棵树, 其中的每个结点由数据域和两个指针组成, 这两个指针分别指向当前结点的第一个孩子和当前结点的下一个兄弟. 由此将一个树连接起来.</p>
<h3 id="b-代码-2"><a href="#b-代码-2" class="headerlink" title="b. 代码"></a>b. 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> * <span class="title">firstchild</span>, * <span class="title">nextsibling</span>;</span></span><br><span class="line">&#125;TNode, * PTNode;</span><br></pre></td></tr></table></figure>
<h3 id="c-优缺点-2"><a href="#c-优缺点-2" class="headerlink" title="c. 优缺点"></a>c. 优缺点</h3><p>存储更加灵活, 比较常用.</p>
<h1 id="二-森林和二叉树的转换"><a href="#二-森林和二叉树的转换" class="headerlink" title="二. 森林和二叉树的转换"></a>二. 森林和二叉树的转换</h1><h2 id="1-树和二叉树之间的转换"><a href="#1-树和二叉树之间的转换" class="headerlink" title="1. 树和二叉树之间的转换"></a>1. 树和二叉树之间的转换</h2><p>二叉树中的结点指向左右子树, 而树中的结点指向第一个孩子和下一个兄弟, 虽然在理解上不一样, 但是在物理存储上, 两种方式是一样的. 也就是说, 树和二叉树之间不用做任何转换, 只需要将树结点的第一个孩子看成二叉树结点的左子树, 树结点的下一个兄弟看成二叉树结点的右子树即可.</p>
<h2 id="2-森林转换为二叉树"><a href="#2-森林转换为二叉树" class="headerlink" title="2. 森林转换为二叉树"></a>2. 森林转换为二叉树</h2><ul>
<li>如果森林为空, 则二叉树也为空.</li>
<li>如果森林不为空, 则森林的第一棵树的根结点作为二叉树的根节点, 第一棵树的子树作为二叉树的左子树, 剩下的树作为二叉树的右子树, 以此类推.</li>
</ul>
<h2 id="3-二叉树转换为森林"><a href="#3-二叉树转换为森林" class="headerlink" title="3. 二叉树转换为森林"></a>3. 二叉树转换为森林</h2><ul>
<li>如果二叉树为空, 森林也为空.</li>
<li>如果二叉树不为空, 二叉树的根以及左子树作为森林的第一棵树, 右子树继续转换为森林, 以此类推.</li>
</ul>
<h1 id="三-树和森林的遍历"><a href="#三-树和森林的遍历" class="headerlink" title="三. 树和森林的遍历"></a>三. 树和森林的遍历</h1><h2 id="1-树的遍历"><a href="#1-树的遍历" class="headerlink" title="1. 树的遍历"></a>1. 树的遍历</h2><h3 id="a-先根遍历"><a href="#a-先根遍历" class="headerlink" title="a. 先根遍历"></a>a. 先根遍历</h3><p>先访问根节点, 然后<strong>依次访问根的每棵子树</strong>.</p>
<h3 id="b-后根遍历"><a href="#b-后根遍历" class="headerlink" title="b. 后根遍历"></a>b. 后根遍历</h3><p>先<strong>遍历根的每棵子树</strong>, 然后再访问根.<br>(注意是结点和结点之间是父子关系还是兄弟关系)</p>
<p>##　２. 森林的遍历</p>
<h3 id="a-先序遍历森林"><a href="#a-先序遍历森林" class="headerlink" title="a. 先序遍历森林"></a>a. 先序遍历森林</h3><ul>
<li>先访问第一棵树的根</li>
<li>先序遍历第一棵树的根结点的子树森林</li>
<li>先序遍历除第一棵树以外的树组成的森林</li>
</ul>
<h3 id="b-中序遍历森林"><a href="#b-中序遍历森林" class="headerlink" title="b. 中序遍历森林"></a>b. 中序遍历森林</h3><ul>
<li>先遍历第一棵树的根结点的子树森林</li>
<li>访问第一棵树的根节点</li>
<li>中序遍历除第一棵树以外的树组成的森林</li>
</ul>
<p>(森林的遍历即多棵树的遍历)</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[线索二叉树]]></title>
      <url>/2017/11/articles/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>可以找到任意结点前驱或后继的二叉树.<br><a id="more"></a></p>
<h1 id="一-线索二叉树结构的设计"><a href="#一-线索二叉树结构的设计" class="headerlink" title="一. 线索二叉树结构的设计"></a>一. 线索二叉树结构的设计</h1><p>叶子结点的左右指针为空, 可以利用这里<strong>空链域</strong>记录它们前驱和后继结点, 如果 Ltag 或 Rtag 为 1, 说明左右指针指向的不是子树, 而是前驱和后继.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">bitree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Ltag, Rtag;</span><br><span class="line">    bitree LChild, RChild;</span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">&#125;BiTree;</span><br></pre></td></tr></table></figure></p>
<h1 id="二-二叉树的线索化"><a href="#二-二叉树的线索化" class="headerlink" title="二. 二叉树的线索化"></a>二. 二叉树的线索化</h1><p>分类: 先序线索二叉树, 中序线索二叉树, 后序线索二叉树<br>思想: </p>
<ul>
<li>类似于二叉树的遍历, 只不过在遍历的过程中, 对结点的访问改成: 修改结点为 NULL<br>的指针域.</li>
<li>需要有两个结点, pre(前一个结点) 和 root (当前结点)</li>
<li>①如果当前遍历结点 root 的左子域为空，则让左子域指向 pre ；<br>②如果前驱 pre 的右子域为空，则让右子域指向当前遍历结点 root；<br>③为下次做准备，当前访问结点 root 作为下一个访问结点的前驱 pre。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先序线索化二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inthread</span><span class="params">(BiTree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)    <span class="comment">//当前结点存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        Inthread(root-&gt;LChild);    <span class="comment">//线索化左子树</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;LChild==<span class="literal">NULL</span>)    <span class="comment">//如果当前结点的左子树为空, 当前结点的前驱为遍历过程中的前一个结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;Ltag = <span class="number">1</span>;</span><br><span class="line">            root-&gt;LChild = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">NULL</span> &amp;&amp; pre-&gt;RChild==<span class="literal">NULL</span>)    <span class="comment">//不知为何, 2017年11月19日 12:27:26</span></span><br><span class="line">        &#123;</span><br><span class="line">            pre-&gt;RChild=root;</span><br><span class="line">            pre-&gt;Rtag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root;</span><br><span class="line">        Inthread(root-&gt;RChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="三-线索二叉树结点前驱后继的查找"><a href="#三-线索二叉树结点前驱后继的查找" class="headerlink" title="三. 线索二叉树结点前驱后继的查找"></a>三. 线索二叉树结点前驱后继的查找</h1><p>功能:给一个结点, 找到它的前驱和后继, 前提是二叉树已经被线索化.<br>根据先中后的不同, 查找方式也不相同, 这里只是中序线索二叉树的例子:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在中序线索二叉树中查找 p 的前驱, 并用 pre 指针返回结果</span></span><br><span class="line"><span class="function">BiTree * <span class="title">InPre</span><span class="params">(BiTree * p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;Ltag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pre = p-&gt;LChild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//Ltag 不为 1, 说明 p 的左子树一定不为空.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(q=p-&gt;LChild; q-&gt;Rtag==<span class="number">0</span>; q=q-&gt;Rtag);</span><br><span class="line">        pre = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在中序线索二叉树中查找 p 的后继, 并用 pre 指针返回结果</span></span><br><span class="line"><span class="function">BiTree * <span class="title">InNext</span><span class="params">(BiTree * p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;Rtag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pre = p-&gt;RChild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;RChild!=<span class="literal">NULL</span>)    <span class="comment">//可能有右子树, 也可能没有右子树</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(q=p-&gt;RChild; q-&gt;Ltag==<span class="number">0</span>; q=q-&gt;LChild);</span><br><span class="line">                Next = q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="四-遍历线索二叉树"><a href="#四-遍历线索二叉树" class="headerlink" title="四. 遍历线索二叉树"></a>四. 遍历线索二叉树</h1><p>功能: 取树中的一个结点, 找出它后面的结点.</p>
<p>这里只是以中序线索二叉树为例子:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历中序线索二叉树</span></span><br><span class="line"><span class="comment">//第一步, 找出一棵二叉树中序遍历使的第一个结点</span></span><br><span class="line"><span class="function">BiTree * <span class="title">InFirst</span><span class="params">(BiTree Bt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree * p = Br;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> (<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;Ltag==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;LChild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二步, 不断找出其后继结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TInOrder</span><span class="params">(BiTree Bt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree * p;</span><br><span class="line">    p = InFirst(Bt);</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        Visit(p);</span><br><span class="line">        p = InNext(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><p>线索二叉树存储某个结点的前驱和后继, 可以做到: 取其中任意一个结点, 都可以遍历出它后面的结点. 如果是一般的二叉树, 只能从根完整地遍历一次.</p>
<p>操作有: </p>
<ul>
<li>线索化二叉树, 也就是把原本的空指针域用来指向前驱或后继结点. 有先序线索二叉树, 中序线索二叉树, 后序线索二叉树三种类型, 它们线索化的方式是不同的.</li>
<li>查找某个结点的前驱或后继结点. 如果该结点的指针域是线索, 那么就可以马上找到前驱或后继结点. 否则, 需要通过规律来找到前驱或后继结点. 而三类线索树的规律又是不同的, 所以查找方式是不同的.</li>
</ul>
<p>线索二叉树的缺点是: 太难了, 让我搞不懂. 三种序列索化二叉树的操作不同, 查找前驱和后继结点的操作也不同, 甚至这些操作可以用递归实现也可以用非递归实现…</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[十字链表存储稀疏矩阵]]></title>
      <url>/2017/11/articles/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/</url>
      <content type="html"><![CDATA[<p>除了三元组之外, 还可以用十字链表存储稀疏矩阵.<br><a id="more"></a></p>
<h1 id="一-十字链表的本质"><a href="#一-十字链表的本质" class="headerlink" title="一. 十字链表的本质"></a>一. 十字链表的本质</h1><ul>
<li>首先十字链表有<strong>一行头指针</strong>(RHead), 和<strong>一列头指针</strong>(CHead), 它们都可以保存一个结点的<strong>地址</strong>(PointPtr)</li>
<li>每个结点保存以下信息: 行号(i), 列号(j), 值(v), 下方结点(down), 右方结点(right)</li>
<li>初始化的时候, 各头指针的值都是 NULL</li>
<li>可以把每一行, 每一列都看成是一个<strong>链表</strong></li>
<li>当插入元素的时候, 假设元素的位置是(i, j), 先确定它在第 i 行链表的位置, 再确定它在第 j 列链表的位置</li>
<li>这样就构造出了一个十字链表</li>
</ul>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1510235237713&amp;di=c55b3048e0eac5b3c168ef79f6ef1f9e&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D3523101907%2C2436196837%26fm%3D214%26gp%3D0.jpg" alt></p>
<h1 id="二-结点和整个矩阵的设计"><a href="#二-结点和整个矩阵的设计" class="headerlink" title="二. 结点和整个矩阵的设计"></a>二. 结点和整个矩阵的设计</h1><h2 id="1-结点的设计"><a href="#1-结点的设计" class="headerlink" title="1. 结点的设计"></a>1. 结点的设计</h2><p>根据每个结点需要保存的信息, 可以知道结点应该如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设计结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j, v;    <span class="comment">//行号, 列号, 值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> * <span class="title">right</span>, * <span class="title">down</span>;</span>    <span class="comment">//右侧元素, 下方元素</span></span><br><span class="line">&#125;Point, *PointPtr;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-矩阵的设计"><a href="#2-矩阵的设计" class="headerlink" title="2. 矩阵的设计"></a>2. 矩阵的设计</h2><p>矩阵肯定包括<strong>行数(mu)</strong>, <strong>列数(nu)</strong>, <strong>非零元素个数(tu)</strong>, 而且还需要<strong>一行(RHead)和一列头指针(CHead)</strong>, 每个头指针所包含的元素类型都是一样的, 所以一行和一列头指针可以分别用数组保存起来.</p>
<p>由于事先不知道数组的长度, 所以这两个数组应该是动态分配的.</p>
<p>动态分配之后肯定是赋值给指针, 那么是什么类型的指针呢?<br>答案是: 因为元素类型是 PointPtr , 所以是 PointPtr * 类型的.</p>
<p>那么问题又来了, 为什么元素类型是 PointPtr 的呢?<br>因为结点是 Point 类型的, 而动态分配结点的返回值是 PointPtr 类型的.<br>(头指针保存一个结点的地址, 结点又保存下一个结点的地址)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mu, nu, tu;    <span class="comment">//稀疏矩阵的行数, 列数, 元素个数</span></span><br><span class="line">    PointPtr * Rhead, * Chead;    <span class="comment">//两个指针数组</span></span><br><span class="line">&#125;TenList;</span><br></pre></td></tr></table></figure></p>
<h1 id="三-矩阵的初始化"><a href="#三-矩阵的初始化" class="headerlink" title="三. 矩阵的初始化"></a>三. 矩阵的初始化</h1><h2 id="1-输入矩阵的信息"><a href="#1-输入矩阵的信息" class="headerlink" title="1. 输入矩阵的信息"></a>1. 输入矩阵的信息</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入行数, 列数, 非零元素个数: \n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;mu, &amp;nu, &amp;tu);</span><br><span class="line">        <span class="comment">//输入行数, 列数, 个数, 保证输入无误</span></span><br><span class="line">        <span class="keyword">if</span>(mu&lt;<span class="number">0</span> || nu&lt;<span class="number">0</span> || tu&lt;<span class="number">0</span> || tu&gt;mu*nu)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(flag);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存稀疏矩阵的行数, 列数, 非零元素个数</span></span><br><span class="line">    T-&gt;mu = mu;</span><br><span class="line">    T-&gt;nu = nu;</span><br><span class="line">    T-&gt;tu = tu;</span><br></pre></td></tr></table></figure>
<h2 id="2-初始化各头指针"><a href="#2-初始化各头指针" class="headerlink" title="2. 初始化各头指针"></a>2. 初始化各头指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分配两个指针数组</span></span><br><span class="line">T-&gt;Rhead = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PointPtr)*(mu+<span class="number">1</span>));    <span class="comment">//Rhead 是竖的</span></span><br><span class="line"><span class="keyword">if</span>(!T-&gt;Rhead)    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">T-&gt;Chead = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PointPtr)*(nu+<span class="number">1</span>));    <span class="comment">//Chead 是横的</span></span><br><span class="line"><span class="keyword">if</span>(!T-&gt;Chead)    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化每个头指针</span></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=mu; k++)</span><br><span class="line">&#123;</span><br><span class="line">    T-&gt;Rhead[k] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=nu; k++)</span><br><span class="line">&#123;</span><br><span class="line">    T-&gt;Chead[k] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-插入元素"><a href="#3-插入元素" class="headerlink" title="3. 插入元素"></a>3. 插入元素</h2><p>根据元素个数循环:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=tu; k++)</span><br></pre></td></tr></table></figure></p>
<p>然后输入元素, 确保元素的行号, 列号无误之后, 动态分配一个新结点<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入结点的行号, 列号与值: \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;i, &amp;j, &amp;v);</span><br><span class="line">    <span class="comment">//确保行号, 列号无误</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;=<span class="number">0</span> || j&lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态分配一个结点, 并给结点赋值</span></span><br><span class="line">temp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Point));</span><br><span class="line">temp-&gt;i = i;</span><br><span class="line">temp-&gt;j = j;</span><br><span class="line">temp-&gt;v = v;</span><br></pre></td></tr></table></figure></p>
<p>至此, 得到了一个新的结点, 然后就到了重点: <strong>在十字链表中插入这个结点</strong>.<br>插入一个结点(i, j), 首先在第 i 行链表中插入, 然后在第 j 列链表中插入. 对我而言还是有点难理解, 但就是这样做的. </p>
<p>在某一行链表中插入, 有两种情况, 一种是链表还<strong>没有结点</strong>, <strong>直接插入</strong>. 还有一种是链表已经<strong>有了结点</strong>, 在<strong>合适的地方插入</strong>新结点.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先确定新结点在某一行中的位置</span></span><br><span class="line"><span class="comment">//如果头指针保存的是 NULL, 说明这一行还没有元素, 则进行 if 里面的操作</span></span><br><span class="line"><span class="comment">//如果头指针已经指向某个元素, 并且该元素的列号大于新元素的列号</span></span><br><span class="line"><span class="comment">//说明新元素应该放在它的前面, 同样进行 if 里面的操作 </span></span><br><span class="line"><span class="keyword">if</span>(T-&gt;Rhead[i]==<span class="literal">NULL</span> || T-&gt;Rhead[i]-&gt;j&gt;j)</span><br><span class="line">&#123;</span><br><span class="line">    temp-&gt;right = T-&gt;Rhead[i];    <span class="comment">//新结点指向头结点的所指向的元素</span></span><br><span class="line">    T-&gt;Rhead[i] = temp;    <span class="comment">//头结点就指向新结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果新结点不是插在行首, 那么就寻找合适的位置</span></span><br><span class="line">    <span class="comment">//从行首元素开始查看, 如果遍历到了行尾就插在最后</span></span><br><span class="line">    <span class="comment">//遍历的过程中如果发现某个元素的下一个元素的列号比新结点的小</span></span><br><span class="line">    <span class="comment">//那么就插在这两个元素中间</span></span><br><span class="line">    <span class="comment">//插入的方式都是: 新结点的右指针等于 p 元素的右指针</span></span><br><span class="line">    <span class="comment">//然后 p 元素的右指针等于新结点, 完成插入</span></span><br><span class="line">    <span class="keyword">for</span>(p=T-&gt;Rhead[i]; p-&gt;right!=<span class="literal">NULL</span>&amp;&amp;p-&gt;right-&gt;j&lt;j; p=p-&gt;right);</span><br><span class="line">    temp-&gt;right = p-&gt;right;</span><br><span class="line">    p-&gt;right = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在某一列中插入结点的方法跟上面很相似:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(T-&gt;Chead[j]==<span class="literal">NULL</span> || T-&gt;Chead[j]-&gt;i&gt;i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp-&gt;down = T-&gt;Chead[j];</span><br><span class="line">            T-&gt;Chead[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(p=T-&gt;Chead[j]; p-&gt;down!=<span class="literal">NULL</span> &amp;&amp; p-&gt;down-&gt;i&lt;i; p=p-&gt;down);</span><br><span class="line">            temp-&gt;down = p-&gt;down;</span><br><span class="line">            p-&gt;down = temp;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="四-完整代码"><a href="#四-完整代码" class="headerlink" title="四. 完整代码"></a>四. 完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设计结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j, v;    <span class="comment">//行号, 列号, 值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> * <span class="title">right</span>, * <span class="title">down</span>;</span>    <span class="comment">//右侧元素, 下方元素</span></span><br><span class="line">&#125;Point, *PointPtr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先数组的元素保存的是结点的地址(结点是动态分配的, 通过地址来访问)</span></span><br><span class="line"><span class="comment">//数组元素是 PointPtr, 而这个数组又是动态分配的(因为事先不知道数组有多长), 动态分配返回的类型应该是 PointPtr *.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> mu, nu, tu;    <span class="comment">//稀疏矩阵的行数, 列数, 元素个数</span></span><br><span class="line">    PointPtr * Rhead, * Chead;    <span class="comment">//一行头指针, 一列头指针, 它们都是两个数组</span></span><br><span class="line">&#125;TenList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateTenList</span><span class="params">(TenList * T)</span></span>;    <span class="comment">//创建十字链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTenList</span><span class="params">(TenList * T)</span></span>;    <span class="comment">//输出非零元素的位置与值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TenList T;</span><br><span class="line">    CreateTenList(&amp;T);</span><br><span class="line">    PrintTenList(&amp;T);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateTenList</span><span class="params">(TenList * T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mu, nu, tu, flag, k, i, j, v;</span><br><span class="line">    <span class="comment">//mu:行数; nu:列数; tu:个数; flag:保证输入无误; k:用于循环; i,j,v:元素的行号, 列号, 值</span></span><br><span class="line">    PointPtr temp, p;</span><br><span class="line">    <span class="comment">//temp:新结点; P:用来遍历链表的行或列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入行数, 列数, 非零元素个数: \n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;mu, &amp;nu, &amp;tu);</span><br><span class="line">        <span class="comment">//输入行数, 列数, 个数, 保证输入无误</span></span><br><span class="line">        <span class="keyword">if</span>(mu&lt;<span class="number">0</span> || nu&lt;<span class="number">0</span> || tu&lt;<span class="number">0</span> || tu&gt;mu*nu)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(flag);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存稀疏矩阵的行数, 列数, 非零元素个数</span></span><br><span class="line">    T-&gt;mu = mu;</span><br><span class="line">    T-&gt;nu = nu;</span><br><span class="line">    T-&gt;tu = tu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分配一行/列头指针</span></span><br><span class="line">    T-&gt;Rhead = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PointPtr)*(mu+<span class="number">1</span>));    <span class="comment">//Rhead 是竖的</span></span><br><span class="line">    <span class="keyword">if</span>(!T-&gt;Rhead)    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    T-&gt;Chead = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PointPtr)*(nu+<span class="number">1</span>));    <span class="comment">//Chead 是横的</span></span><br><span class="line">    <span class="keyword">if</span>(!T-&gt;Chead)    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化每个头指针</span></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=mu; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        T-&gt;Rhead[k] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=nu; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        T-&gt;Chead[k] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入结点, 并插入矩阵中</span></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=tu; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"请输入结点的行号, 列号与值: \n"</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;i, &amp;j, &amp;v);</span><br><span class="line">            <span class="comment">//确保行号, 列号无误</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;=<span class="number">0</span> || j&lt;=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态分配一个结点, 并给结点赋值</span></span><br><span class="line">        temp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Point));</span><br><span class="line">        temp-&gt;i = i;</span><br><span class="line">        temp-&gt;j = j;</span><br><span class="line">        temp-&gt;v = v;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先确定新结点在行中的位置</span></span><br><span class="line">        <span class="comment">//如果头指针保存的是 NULL, 说明这一行还没有元素, 则进行以下操作</span></span><br><span class="line">        <span class="comment">//如果头指针指向某个元素, 并且该元素的列号大于新元素的列号</span></span><br><span class="line">        <span class="comment">//说明新元素应该放在它的前面, 同样进行以下操作 </span></span><br><span class="line">        <span class="keyword">if</span>(T-&gt;Rhead[i]==<span class="literal">NULL</span> || T-&gt;Rhead[i]-&gt;j&gt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            temp-&gt;right = T-&gt;Rhead[i];    <span class="comment">//新结点指向头结点的所指向的元素</span></span><br><span class="line">            T-&gt;Rhead[i] = temp;    <span class="comment">//头结点就指向新结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果新结点不是插在行首, 那么就寻找合适的位置</span></span><br><span class="line">            <span class="comment">//从行首元素开始查看, 如果遍历到了行尾就插在最后</span></span><br><span class="line">            <span class="comment">//遍历的过程中如果发现某个元素的下一个元素的列号比新结点的小</span></span><br><span class="line">            <span class="comment">//那么就插在这两个元素中间</span></span><br><span class="line">            <span class="comment">//插入过程都是 新结点的右指针等于 p 元素的右指针</span></span><br><span class="line">            <span class="comment">//然后 p 元素的右指针等于新结点, 完成插入</span></span><br><span class="line">            <span class="keyword">for</span>(p=T-&gt;Rhead[i]; p-&gt;right!=<span class="literal">NULL</span>&amp;&amp;p-&gt;right-&gt;j&lt;j; p=p-&gt;right);</span><br><span class="line">            temp-&gt;right = p-&gt;right;</span><br><span class="line">            p-&gt;right = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(T-&gt;Chead[j]==<span class="literal">NULL</span> || T-&gt;Chead[j]-&gt;i&gt;i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp-&gt;down = T-&gt;Chead[j];</span><br><span class="line">            T-&gt;Chead[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(p=T-&gt;Chead[j]; p-&gt;down!=<span class="literal">NULL</span> &amp;&amp; p-&gt;down-&gt;i&lt;i; p=p-&gt;down);</span><br><span class="line">            temp-&gt;down = p-&gt;down;</span><br><span class="line">            p-&gt;down = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTenList</span><span class="params">(TenList * T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    PointPtr temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=T-&gt;mu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = T-&gt;Rhead[i];</span><br><span class="line">        <span class="keyword">while</span>(temp!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d %2d %2d\n"</span>, temp-&gt;i, temp-&gt;j, temp-&gt;v);</span><br><span class="line">            temp = temp-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五-参考文章"><a href="#五-参考文章" class="headerlink" title="五. 参考文章"></a>五. 参考文章</h1><blockquote>
<p><a href="http://blog.csdn.net/zhuyi2654715/article/details/6729783" target="_blank" rel="noopener">稀疏矩阵的十字链表存储的思路</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[特殊矩阵的压缩存储]]></title>
      <url>/2017/11/articles/%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<p>特殊矩阵有对称矩阵, 上三角, 下三角矩阵.<br><a id="more"></a></p>
<h1 id="一-对称矩阵的压缩存储"><a href="#一-对称矩阵的压缩存储" class="headerlink" title="一. 对称矩阵的压缩存储"></a>一. 对称矩阵的压缩存储</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年11月8日 21:00:38</span></span><br><span class="line"><span class="comment">对称矩阵的压缩存储:</span></span><br><span class="line"><span class="comment">    矩阵应该是用二维数组存储, 但是由于对称矩阵的特殊性, 有一些元素是重复的.</span></span><br><span class="line"><span class="comment">    所以根据对称矩阵的特点, 把部分元素存储起来即可.</span></span><br><span class="line"><span class="comment">    这里是打印出该矩阵, 主要是想体现:</span></span><br><span class="line"><span class="comment">        当要取矩阵中某个元素的时候, 根据公式可以知道该元素在数组中的位置, 即还原出对称矩阵. </span></span><br><span class="line"><span class="comment">        (推导过程用到等差数列的知识)</span></span><br><span class="line"><span class="comment">        k = i(i+1)/2+j;   --&gt; i&gt;=j</span></span><br><span class="line"><span class="comment">        k = j(j+1)/2+i;   --&gt; i&lt;j</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//用一个一维数组存储二维矩阵. i, j 是对称矩阵的行和列</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;, i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i*(i+<span class="number">1</span>)/<span class="number">2</span>+j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[j*(j+<span class="number">1</span>)/<span class="number">2</span>+i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二-上三角矩阵的压缩存储"><a href="#二-上三角矩阵的压缩存储" class="headerlink" title="二. 上三角矩阵的压缩存储"></a>二. 上三角矩阵的压缩存储</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年11月8日 21:22:05</span></span><br><span class="line"><span class="comment">上三角矩阵的压缩存储:</span></span><br><span class="line"><span class="comment">    与对称矩阵一样, 为了节省空间, 用一个一维数组存储上三角矩阵.</span></span><br><span class="line"><span class="comment">    一维数组第一个元素是下方重复出现的元素, 其余是上三角中的元素.</span></span><br><span class="line"><span class="comment">    通过输出矩阵来体现上三角矩阵的还原, 同样是用公式(我并不知道公式怎么来的):</span></span><br><span class="line"><span class="comment">    k = 0;   --&gt; i&gt;j</span></span><br><span class="line"><span class="comment">    k = i(2n-i+1)/2+j-i+1;   --&gt; i&lt;=j  (n 是阶数)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//用一个一维数组存储上三角矩阵. i, j 是对称矩阵的行和列</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">11</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;, i, j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;=j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i*(<span class="number">2</span>*<span class="number">4</span>-i+<span class="number">1</span>)/<span class="number">2</span>+j-i+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三-下三角矩阵的压缩存储"><a href="#三-下三角矩阵的压缩存储" class="headerlink" title="三. 下三角矩阵的压缩存储"></a>三. 下三角矩阵的压缩存储</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年11月8日 21:33:09</span></span><br><span class="line"><span class="comment">下三角矩阵的压缩存储:</span></span><br><span class="line"><span class="comment">    同样使用是公式, 同样是不会求公式.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">11</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;, i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[(i*(i+<span class="number">1</span>)/<span class="number">2</span>+j+<span class="number">1</span>)]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul>
<li>压缩存储的目的<strong>都是为了节省存储空间.</strong></li>
<li>上面三种矩阵的压缩存储<strong>都是将元素放入一维数组中</strong>, 当要还原矩阵的时候, <strong>根据公式</strong>, 取出一维数组中对应位置的元素. </li>
<li>公式比较<strong>特殊的是上三角矩阵</strong>, 其他是用到等差数列求和公式来推导.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[稀疏矩阵的乘法]]></title>
      <url>/2017/11/articles/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>太太太太太太太太太太难了.<br><a id="more"></a><br>严蔚敏书上的算法, 我只是写出来, 我这辈子估计都理解不了.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 12500    <span class="comment">//非零元素最大个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;    <span class="comment">//矩阵元素类型, 这里是整型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j;      <span class="comment">//元素的坐标</span></span><br><span class="line">    ElemType e;    <span class="comment">//元素的值</span></span><br><span class="line">&#125;Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> * rpos;    <span class="comment">//这个指针会指向一个动态数组, 存储各行第一个元素的位置</span></span><br><span class="line">    Triple data[MAXSIZE];    <span class="comment">//非零元素数组, 0 号元素未使用</span></span><br><span class="line">    <span class="keyword">int</span> mu, nu, tu;    <span class="comment">//行数, 列数, 非零元个数</span></span><br><span class="line">&#125;TSMatrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(TSMatrix * TSM)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入非零元素的个数, 行数, 列数: \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;TSM-&gt;tu, &amp;TSM-&gt;mu, &amp;TSM-&gt;nu);    <span class="comment">//输入非零元素的个数</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=TSM-&gt;tu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入坐标(从 1 开始), 值: \n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;TSM-&gt;data[i].i, &amp;TSM-&gt;data[i].j, &amp;TSM-&gt;data[i].e);</span><br><span class="line">    &#125;</span><br><span class="line">    TSM-&gt;rpos = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(TSM-&gt;mu+<span class="number">1</span>));    <span class="comment">//根据矩阵的行数生成一个数组, 存储各行第一个元素出现的位置</span></span><br><span class="line">    TSM-&gt;rpos[<span class="number">1</span>] = <span class="number">1</span>;    <span class="comment">//第一行第一个元素在非零数组第一位</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=TSM-&gt;mu; i++)    <span class="comment">//从第二行开始, 每行第一个元素的位置 = 前一行第一个元素的位置 + 前一行元素的个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        j=<span class="number">1</span>;    <span class="comment">//用 j 遍历整个非零数组</span></span><br><span class="line">        num=<span class="number">0</span>;  <span class="comment">//用 num 统计某一行元素个数</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=TSM-&gt;tu)    <span class="comment">//遍历非零数组</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(TSM-&gt;data[j].i == i<span class="number">-1</span>)    <span class="comment">//如果元素是前一行的</span></span><br><span class="line">            &#123;</span><br><span class="line">                num++;    <span class="comment">//元素个数 ++</span></span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        TSM-&gt;rpos[i] = TSM-&gt;rpos[i<span class="number">-1</span>] + num;    <span class="comment">//前一行第一个元素的位置 + 前一行元素的个数</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果前一行没有元素, 那么这一行第一个元素的位置 = 前一行第一个元素的位置</span></span><br><span class="line"><span class="comment">        而在做某些操作的时候, 是读取到非零元素, 然后根据它的行号, 通过 rpos[行号] 来确定位置</span></span><br><span class="line"><span class="comment">        某一行没有元素, 在那一行读取不到元素, 也就不会做什么事情</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(TSMatrix * TSM)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"矩阵信息如下: \n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=TSM-&gt;tu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-2d %-2d %-2d\n"</span>, TSM-&gt;data[i].i, TSM-&gt;data[i].j, TSM-&gt;data[i].e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n矩阵首行元素位置如下: \n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=TSM-&gt;mu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-2d : %-2d \t"</span>, i, TSM-&gt;rpos[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mult</span><span class="params">(TSMatrix M, TSMatrix N, TSMatrix *Q)</span>    <span class="comment">//矩阵 M 乘矩阵 N 得到矩阵 Q</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arow, brow, ccol, p, tp, t, q;</span><br><span class="line">    <span class="keyword">int</span> * ctemp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(N.nu+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(M.nu != N.mu)    <span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">//如果 M 的列不等于 N 的行, 不符合矩阵相乘的条件</span></span><br><span class="line">    Q-&gt;rpos = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(M.mu+<span class="number">1</span>));</span><br><span class="line">    Q-&gt;mu = M.mu; Q-&gt;nu = N.nu; Q-&gt;tu = <span class="number">0</span>;    <span class="comment">//Q 初始化, 相乘后, Q 的行等于 M 的行, Q 的列等于 N 的列</span></span><br><span class="line">    <span class="keyword">if</span>(M.tu * N.tu != <span class="number">0</span>)    <span class="comment">//这里确保有一个矩阵不为空, 如果是全为 0 的矩阵, 相乘的结果肯定是空矩阵</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(arow=<span class="number">1</span>; arow&lt;=M.mu; ++arow)    <span class="comment">//处理 M 的每一行</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(p=<span class="number">1</span>; p&lt;=N.nu+<span class="number">1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                ctemp[p] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Q-&gt;rpos[arow] = Q-&gt;tu + <span class="number">1</span>;    <span class="comment">//记录 Q 各行首元素的位置</span></span><br><span class="line">            <span class="keyword">if</span>(arow&lt;M.mu)</span><br><span class="line">            &#123;</span><br><span class="line">                tp = M.rpos[arow+<span class="number">1</span>];</span><br><span class="line">                <span class="comment">//tp 下一行首元素的位置, 遍历本行元素时(下一个 for 循环)用到</span></span><br><span class="line">                <span class="comment">//如果不是最后一行, tp 可以从 rpos 数组中得到</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tp = M.tu + <span class="number">1</span>;    <span class="comment">//如果是最后一行, 那么 tp 等于总个数加一</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(p=M.rpos[arow]; p&lt;tp; p++)    <span class="comment">//遍历当前行, p 从本行首元素开始, 大于等于 tp 时跳出循环</span></span><br><span class="line">            &#123;</span><br><span class="line">                brow = M.data[p].j;    <span class="comment">//矩阵相乘是 M列号==N行号 的元素</span></span><br><span class="line">                <span class="keyword">if</span>(brow&lt;N.mu)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//这个 if 跟上面的作用相似, t 用于循环 N 中的列</span></span><br><span class="line">                    t = N.rpos[brow+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    t = N.tu + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(q=N.rpos[brow]; q&lt;t; q++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ccol = N.data[q].j;    <span class="comment">//乘积元素在 Q 中的列号</span></span><br><span class="line">                    ctemp[ccol] += M.data[p].e * N.data[q].e;    <span class="comment">//Q(arow,ccol) 元素的值    //懵逼...</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(ccol=<span class="number">1</span>; ccol&lt;=Q-&gt;nu; ccol++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ctemp[ccol])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(++Q-&gt;tu &gt; MAXSIZE)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    Q-&gt;data[Q-&gt;tu].i = arow;</span><br><span class="line">                    Q-&gt;data[Q-&gt;tu].j = ccol;</span><br><span class="line">                    Q-&gt;data[Q-&gt;tu].e = ctemp[ccol];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TSMatrix a, b, c;</span><br><span class="line">    Init(&amp;a);</span><br><span class="line">    Show(&amp;a);</span><br><span class="line">    Init(&amp;b);</span><br><span class="line">    Show(&amp;b);</span><br><span class="line"></span><br><span class="line">    Mult(a, b, &amp;c);</span><br><span class="line">    Show(&amp;c);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[稀疏矩阵的转置]]></title>
      <url>/2017/11/articles/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BD%AC%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>数组还能玩出花来.<br><a id="more"></a></p>
<h1 id="一-稀疏矩阵的存储"><a href="#一-稀疏矩阵的存储" class="headerlink" title="一. 稀疏矩阵的存储"></a>一. 稀疏矩阵的存储</h1><p>稀疏矩阵顾名思义就是元素很少的矩阵, 如果采取一般的存储方式会导致空间的浪费, 因为要存储很多没有意义的元素.<br>稀疏矩阵存储一个非零元素就要存储这个元素的行列坐标和值(通过结构体实现), 非零元素这么存储, 而整个稀疏矩阵就要存储数组的行数, 列数, 非零元素的个数, 以及非零元素数组.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 12500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j;    <span class="comment">//非零元素的坐标</span></span><br><span class="line">    ElemType e;    <span class="comment">//非零元素元素的值</span></span><br><span class="line">&#125;Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Triple data[MAXSIZE+<span class="number">1</span>];    <span class="comment">//非零元素数组, 0 号元素未使用</span></span><br><span class="line">    <span class="keyword">int</span> mu, nu, tu;    <span class="comment">//行数, 列数, 非零元个数</span></span><br><span class="line">&#125;TSMatrix;</span><br></pre></td></tr></table></figure></p>
<h1 id="二-稀疏矩阵的转置"><a href="#二-稀疏矩阵的转置" class="headerlink" title="二. 稀疏矩阵的转置"></a>二. 稀疏矩阵的转置</h1><p>稀疏矩阵的初始化就不谈了.<br>一般的二维数组的转置: a[i][j] = b[j][i] 即可.<br>如果是稀疏矩阵, 非零元素数组里面的数据可能是这样的: (1,2,12), (1,3,9), (3,1,-3), (3,6,14). 假设把每个元素的坐标交换, 就变成了: (2,1,12), (3,1,9), (1,3,-3), (6,3,14).<br>转置的确是这么干的, 第 i 行 j 列的值转置后就变成了第 j 行 i 列. 问题是这么做了之后, 我原来是一行一行来存储的, 现在存了一个第二行的, 存了一个第三行的, 又存了一个第一行的, 显然乱了.</p>
<h2 id="转置算法一"><a href="#转置算法一" class="headerlink" title="转置算法一"></a>转置算法一</h2><ul>
<li>构造新矩阵的时候, 先构造第一行, 然后第二行, 以此类推.</li>
<li>每构造一行, 我都遍历原来的矩阵, 遇到列数等于我行数的就存起来. 相当于我要构造第一行, 我就找到原数组的第一列, 把这一列的元素以此保存起来. 这样子是为了保证新矩阵的顺序是对的.</li>
<li>存的时候, 非零元素行变成列, 列变成行, 值相等. 使得 a[i][j] = b[j][i];  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TransposeSMatrix</span><span class="params">(TSMatrix M, TSMatrix *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, n;</span><br><span class="line">    T-&gt;tu = M.tu; T-&gt;mu = M.nu; T-&gt;nu = M.mu;    <span class="comment">//新矩阵的行数(列数)=原矩阵的列数(行数), 并且个数相同</span></span><br><span class="line">    <span class="keyword">if</span>(T-&gt;tu)    <span class="comment">//确保原矩阵不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="number">1</span>;    <span class="comment">//n 是新矩阵非零元素的序号, 从 1 开始(也可以从 0 开始, 并不重要)</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=T-&gt;mu; i++)    <span class="comment">//遍历新矩阵的每一行, 从第一行开始</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=M.tu; j++)    <span class="comment">//遍历原数组的每一个元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(M.data[j].j == i)    <span class="comment">//遇到原数组 i 列的元素, 就保存起来</span></span><br><span class="line">                &#123;</span><br><span class="line">                    T-&gt;data[n].i = M.data[j].j;    <span class="comment">//行=列</span></span><br><span class="line">                    T-&gt;data[n].j = M.data[j].i;    <span class="comment">//列=行</span></span><br><span class="line">                    T-&gt;data[n].e = M.data[j].e;    <span class="comment">//值相等</span></span><br><span class="line">                    n++;    <span class="comment">//下面准备给新数组的下一个非零元素赋值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>普通的二维数组转置的时间复杂度是 mu*nu .(也就是行数乘以列数, 因为只要遍历矩阵一遍. 第 i 行 j 列的元素用新矩阵第 j 行 i 列的元素存储即可.)<br>而上面这个算法, 首先遍历原矩阵每一列(也就是新矩阵的每一列) nu, 然后遍历原矩阵 tu. 如果 tu 接近于 mu*nu, 那么时间复杂度就是: O(mu*nu^2), 时间复杂度比一般情况要高, 所以, 这个算法只适用于 tu 远远小于 mu*nu 的情况.</p>
<h2 id="转置算法二"><a href="#转置算法二" class="headerlink" title="转置算法二"></a>转置算法二</h2><ul>
<li>先求出原来每一列有多少个元素</li>
<li>再求出每一列的第一个元素在新矩阵中出现的位置, 很显然, 第一列的第一个元素出现在新矩阵的一号位置. 然后第二列的第一个元素出现在位置是 1 加上第一列元素的个数. 比如第一行有 4 个元素, 1+4=5 , 所以第二列第一个元素的位置就是 5. 此后, 每一列的第一个元素在新矩阵中的位置都等于: 前一列第一个元素的位置加上前一列元素的个数. </li>
<li>然后从头开始取原矩阵的元素, 看它是第几列的, 我们已经知道某一列的第一个元素应该出现在新矩阵中的什么位置, 所以进行赋值即可, 记得交换行号列号. 同时记录一下, 再次遇到这一列的元素时候, 就放到下一个位置.<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FastTransposeSMatrix</span><span class="params">(TSMatrix M, TSMatrix *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, n, col;</span><br><span class="line">    T-&gt;tu = M.tu; T-&gt;nu = M.mu; T-&gt;mu = M.nu;</span><br><span class="line">    <span class="keyword">int</span> * num = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(M.nu+<span class="number">1</span>));    <span class="comment">//动态生成数组, 存储原矩阵每列的元素个数(0 号不使用)</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=M.nu; i++)    num[i] = <span class="number">0</span>;     <span class="comment">//每列元素个数初始化为 0</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=M.tu; i++)    num[M.data[i].j]++;    <span class="comment">//计算出每列有多少个元素</span></span><br><span class="line">    <span class="keyword">int</span> * cpot = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(M.nu+<span class="number">1</span>));    <span class="comment">//用来存储每列第一个元素在新矩阵中出现的位置的数组</span></span><br><span class="line">    cpot[<span class="number">1</span>] = <span class="number">1</span>;    <span class="comment">//第一列第一个元素肯定是新矩阵的一号元素</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=M.nu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cpot[i] = cpot[i<span class="number">-1</span>] + num[i<span class="number">-1</span>];    <span class="comment">//每列第一个元素的位置都是前一列的位置加上前一列的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=M.tu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        col = M.data[i].j;    <span class="comment">//遇到某一列的元素</span></span><br><span class="line">        n = cpot[col];        <span class="comment">//看看这一列的元素应该存放到哪一个位置</span></span><br><span class="line">        T-&gt;data[n].i = M.data[i].j;</span><br><span class="line">        T-&gt;data[n].j = M.data[i].i;</span><br><span class="line">        T-&gt;data[n].e = M.data[i].e;</span><br><span class="line">        cpot[col]++;          <span class="comment">//加一是为了: 下次遇到这一列的元素时, 放到下一个位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为 O(nu+tu), 当 tu 和 mu*nu 等数量级的时候, 复杂度为 O(mu*nu), 和经典算法的时间复杂度相同.</p>
<h1 id="三-完整代码"><a href="#三-完整代码" class="headerlink" title="三. 完整代码"></a>三. 完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 12500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j;    <span class="comment">//元素的坐标</span></span><br><span class="line">    ElemType e;    <span class="comment">//元素的值</span></span><br><span class="line">&#125;Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Triple data[MAXSIZE];    <span class="comment">//非零元素数组, 0 号元素未使用</span></span><br><span class="line">    <span class="keyword">int</span> mu, nu, tu;    <span class="comment">//行数, 列数, 非零元个数</span></span><br><span class="line">&#125;TSMatrix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(TSMatrix * TSM)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入非零元素的个数, 行数, 列数: \n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;TSM-&gt;tu, &amp;TSM-&gt;mu, &amp;TSM-&gt;nu);    <span class="comment">//输入非零元素的个数</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=TSM-&gt;tu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入坐标(从 1 开始), 值: \n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;TSM-&gt;data[i].i, &amp;TSM-&gt;data[i].j, &amp;TSM-&gt;data[i].e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(TSMatrix * TSM)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=TSM-&gt;tu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-2d %-2d %-2d\n"</span>, TSM-&gt;data[i].i, TSM-&gt;data[i].j, TSM-&gt;data[i].e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TransposeSMatrix</span><span class="params">(TSMatrix M, TSMatrix *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, n;</span><br><span class="line">    T-&gt;tu = M.tu; T-&gt;mu = M.nu; T-&gt;nu = M.mu;    <span class="comment">//新矩阵的行数(列数)=原矩阵的列数(行数), 并且个数相同</span></span><br><span class="line">    <span class="keyword">if</span>(T-&gt;tu)    <span class="comment">//确保原矩阵不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="number">1</span>;    <span class="comment">//n 是新矩阵非零元素的序号, 从 1 开始(也可以从 0 开始, 并不重要)</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=T-&gt;mu; i++)    <span class="comment">//遍历新矩阵的每一行, 从第一行开始</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=M.tu; j++)    <span class="comment">//遍历原数组的每一个元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(M.data[j].j == i)    <span class="comment">//遇到原数组 i 列的元素, 就保存起来</span></span><br><span class="line">                &#123;</span><br><span class="line">                    T-&gt;data[n].i = M.data[j].j;    <span class="comment">//行=列</span></span><br><span class="line">                    T-&gt;data[n].j = M.data[j].i;    <span class="comment">//列=行</span></span><br><span class="line">                    T-&gt;data[n].e = M.data[j].e;    <span class="comment">//值相等</span></span><br><span class="line">                    n++;    <span class="comment">//下面准备给新数组的下一个非零元素赋值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FastTransposeSMatrix</span><span class="params">(TSMatrix M, TSMatrix *T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, n, col;</span><br><span class="line">    T-&gt;tu = M.tu; T-&gt;nu = M.mu; T-&gt;mu = M.nu;</span><br><span class="line">    <span class="keyword">int</span> * num = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(M.nu+<span class="number">1</span>));    <span class="comment">//动态生成数组, 存储原矩阵每列的元素个数(0 号不使用)</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=M.nu; i++)    num[i] = <span class="number">0</span>;     <span class="comment">//每列元素个数初始化为 0</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=M.tu; i++)    num[M.data[i].j]++;    <span class="comment">//计算出每列有多少个元素</span></span><br><span class="line">    <span class="keyword">int</span> * cpot = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(M.nu+<span class="number">1</span>));    <span class="comment">//用来存储每列第一个元素在新矩阵中出现的位置的数组</span></span><br><span class="line">    cpot[<span class="number">1</span>] = <span class="number">1</span>;    <span class="comment">//第一列第一个元素肯定是新矩阵的一号元素</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=M.nu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cpot[i] = cpot[i<span class="number">-1</span>] + num[i<span class="number">-1</span>];    <span class="comment">//每列第一个元素的位置都是前一列的位置加上前一列的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=M.tu; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        col = M.data[i].j;    <span class="comment">//遇到某一列的元素</span></span><br><span class="line">        n = cpot[col];        <span class="comment">//看看这一列的元素应该存放到哪一个位置</span></span><br><span class="line">        T-&gt;data[n].i = M.data[i].j;</span><br><span class="line">        T-&gt;data[n].j = M.data[i].i;</span><br><span class="line">        T-&gt;data[n].e = M.data[i].e;</span><br><span class="line">        cpot[col]++;          <span class="comment">//加一是为了: 下次遇到这一列的元素时, 放到下一个位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TSMatrix a, b;</span><br><span class="line"></span><br><span class="line">    Init(&amp;a);</span><br><span class="line">    Show(&amp;a);</span><br><span class="line"></span><br><span class="line">    FastTransposeSMatrix(a, &amp;b);</span><br><span class="line">    Show(&amp;b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>严蔚敏的书是好书, 但是有一点不好: 没有考虑到我的智商.</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[BF 算法]]></title>
      <url>/2017/11/articles/BF%20%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>一种相对简单的串匹配算法.<br><a id="more"></a><br>说着简单, 写起来难..</p>
<h1 id="一-串的定义"><a href="#一-串的定义" class="headerlink" title="一. 串的定义"></a>一. 串的定义</h1><p>BF 算法用于串的匹配, 串就是字符串. 这里的字符串跟字符数组稍有不同, 定义如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSTRLEN 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> SString[MAXSTRLEN+<span class="number">1</span>];</span><br></pre></td></tr></table></figure></p>
<p>数组每个元素存储一个字符, 但是和之前学的字符数组不一样, 这里第一个元素不用于存放字符, 而是用于<strong>存放串的长度</strong>.</p>
<h1 id="二-串的初始化"><a href="#二-串的初始化" class="headerlink" title="二. 串的初始化"></a>二. 串的初始化</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitString</span><span class="params">(SString S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, len;</span><br><span class="line">    <span class="keyword">char</span> temp[MAXSTRLEN];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入字符串: \n"</span>);</span><br><span class="line">    <span class="comment">// scanf("%s", temp);    //通过 scanf 输入字符串, 遇到空格会结束, 所以不能用这个</span></span><br><span class="line">    gets(temp);</span><br><span class="line">    len = <span class="built_in">strlen</span>(temp);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>, j=<span class="number">1</span>; i&lt;len; i++, j++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[j] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    S[<span class="number">0</span>] = len;    <span class="comment">//用 0 号元素存放串长</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三-串的匹配"><a href="#三-串的匹配" class="headerlink" title="三. 串的匹配"></a>三. 串的匹配</h1><p>代码如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IndexString</span><span class="params">(SString S, SString T, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=pos, j=<span class="number">1</span>, num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S[<span class="number">0</span>] &amp;&amp; j&lt;=T[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span>(S[i] == T[j]) &#123; i++; j++; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; i = i-j+<span class="number">2</span>; j = <span class="number">1</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"总共进行了 %d 次匹配.\n"</span>, num);</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T[<span class="number">0</span>]) <span class="keyword">return</span> i-T[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>首先看形参, 两个用来匹配的串, 和 pos. pos 是指定从哪个位置开始匹配.</li>
<li>其次初始化的时候, i=pos 之后则 S[i] 就指向了指定元素, 而 j=1 是因为模式串(也就是短的串)是从第一个字符开始匹配的. </li>
<li>然后跳出条件是 i 小于 S 串的长度或者 j 小于 T 串的长度.</li>
<li>如果 S[i] 和 T[j] 指向的字符相同, 那么 i++, j++ ,使他们指向下一个.</li>
<li>如果不同, i 就回退到本次匹配位置的下一位.<strong>如果 i=i-j 会使 i 退到原来位置的前一位</strong>(这是因为 j 从 1 开始, 假设移动了一次, j 就已经是 2 了, 所以减去 j 会退到前一位.)<strong>, i=i-j+1 刚好使 i 指向本次匹配开始的位置, 所以 i=i-j+2 就是下一轮要匹配的起始位置.</strong> </li>
<li>跳出 while 的条件要么是 S 串到头了, 要么是 T 串到头了, 如果是 T 串到头, 说明匹配成功. T 串到头也就是 if 里面的条件: j&gt;T[0].</li>
<li>为什么是 return i-T[0] 呢? 因为要求的是 T 串在 S 串中出现的位置, 匹配成功时, i 往前移动了一位, 此时减去 T 串的长度刚好是 T 串在 S 串中出现的位置.</li>
</ul>
<h1 id="四-完整代码"><a href="#四-完整代码" class="headerlink" title="四. 完整代码"></a>四. 完整代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSTRLEN 255</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> SString[MAXSTRLEN+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitString</span><span class="params">(SString S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, len;</span><br><span class="line">    <span class="keyword">char</span> temp[MAXSTRLEN];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入字符串: \n"</span>);</span><br><span class="line">    <span class="comment">// scanf("%s", temp);    //通过 scanf 输入字符串, 遇到空格会结束, 所以不能用这个</span></span><br><span class="line">    gets(temp);</span><br><span class="line">    len = <span class="built_in">strlen</span>(temp);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>, j=<span class="number">1</span>; i&lt;len; i++, j++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[j] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    S[<span class="number">0</span>] = len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IndexString</span><span class="params">(SString S, SString T, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=pos, j=<span class="number">1</span>, num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S[<span class="number">0</span>] &amp;&amp; j&lt;=T[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span>(S[i] == T[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = i-j+<span class="number">2</span>;</span><br><span class="line">            j = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"总共进行了 %d 次匹配.\n"</span>, num);</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> i-T[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SString S, T;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    InitString(S);</span><br><span class="line">    InitString(T);</span><br><span class="line"></span><br><span class="line">    index = IndexString(S, T, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"子串在 %d 位置出现.\n"</span>, index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 异常处理]]></title>
      <url>/2017/11/articles/C++%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>这本书的模板和 I/O 流类库只是随便看了下, 这篇可能是最后一篇笔记了.<br><a id="more"></a><br>以前写过简单的 Python , 那时候感觉异常处理只是<strong>防止程序出错而异常终止</strong>, 只要把可能出错的代码放到 try 里面就行了, 并不会对异常做什么处理. 更不知道把异常看作一个对象. </p>
<p>看到有人说不推荐 C++ 的异常处理, 但是那又如何, 我都不会用.</p>
<h1 id="一-错误导致异常"><a href="#一-错误导致异常" class="headerlink" title="一. 错误导致异常"></a>一. 错误导致异常</h1><p>发生异常是因为产生了错误, 错误有两种, 一种是编译错误, 也就是语法错误, 编译通不过更没法运行. 另一种是运行错误, 运行错误又包括两种, 一种是逻辑错误, 这种是代码写得不好, 有逻辑漏洞, 比如考虑不周到, 另一个种是运行异常. 这种情况通常是可以预料但<strong>无法避免</strong>, 比如你知道空间分配可能失败, 但是你的程序怎么能保证一定可以分配空间?</p>
<h1 id="二-异常处理的思想"><a href="#二-异常处理的思想" class="headerlink" title="二. 异常处理的思想"></a>二. 异常处理的思想</h1><p>我明知道有些事会出错, 所以我就抱着试一试的态度去做, 如果成功了就好. 如果没成功我就向领到报告, 把异常情况告诉他, 同时把我做的半成品都给扔掉.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//试着做某事</span></span><br><span class="line">    <span class="keyword">if</span>(发生了错误)</span><br><span class="line">        抛出异常</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(某个问题)    <span class="comment">//领导收到某个问题</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//想办法解决问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="三-异常处理的例子"><a href="#三-异常处理的例子" class="headerlink" title="三. 异常处理的例子"></a>三. 异常处理的例子</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月31日 16:58:28</span></span><br><span class="line"><span class="comment">使用异常处理来处理错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dive</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"5/2 = "</span>&lt;&lt;dive(<span class="number">5</span>, <span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"8/0 = "</span>&lt;&lt;dive(<span class="number">8</span>, <span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;    </span><br><span class="line">        <span class="comment">//这里抛出了一个 int 类型的异常, try 后面的就不执行了, 直接捕获异常</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"7/1 = "</span>&lt;&lt;dive(<span class="number">7</span>, <span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="keyword">int</span>)    <span class="comment">//捕获异常</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Except of deviding zero."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"End of program"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dive</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> y;    <span class="comment">//抛出异常</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x/y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果:<br>    5/2 = 2<br>    Except of deviding zero.<br>    End of program<br>    请按任意键继续. . .</p>
<h1 id="四-异常接口声明"><a href="#四-异常接口声明" class="headerlink" title="四. 异常接口声明"></a>四. 异常接口声明</h1><p>调用可能会抛出异常的函数是危险的, 所以最好能列出函数可能会抛出的异常.<br>异常接口声明也称为抛出表列, 给出了并限制了可能抛出的异常.</p>
<ul>
<li><p>&lt;返回类型&gt; funname(&lt;形参表列&gt;)throw(T1, T2, T3..);<br>这个函数原型指定了 funname 可以抛出的类型为 T1, T2, T3..也可以抛出它们的子类, 如果抛出其他异常, 系统将调用 abort 函数终止程序.</p>
</li>
<li><p>&lt;返回类型&gt; funname(&lt;形参表列&gt;)throw();<br>函数原型的抛出列表是一个空表, 表示该函数不抛出任何类型的异常.</p>
</li>
<li><p>&lt;返回类型&gt; funname(&lt;形参表列&gt;);<br>如果函数原型没有 throw 说明, 表示该函数可以抛出任意类型的异常.</p>
</li>
</ul>
<h1 id="五-定义自己的异常类"><a href="#五-定义自己的异常类" class="headerlink" title="五. 定义自己的异常类"></a>五. 定义自己的异常类</h1><p>C++ 标准库中定义了异常类, 我们可以根据需要定义自己的异常类.<br>异常类也是类, 可以用成员变量保存错误信息, 通过成员函数返回错误信息.<br>(书上的例子不够简单, 不给了)</p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 运算符重载(一)]]></title>
      <url>/2017/10/articles/C++%20%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>简单了解运算符重载.<br><a id="more"></a></p>
<h1 id="一-为什么会有-「运算符重载」"><a href="#一-为什么会有-「运算符重载」" class="headerlink" title="一. 为什么会有 「运算符重载」?"></a>一. 为什么会有 「运算符重载」?</h1><p>简单的运算符包括加减乘除, 对于系统自带的类型, 比如<br><em>int</em> <em>float</em><br>我们可以直接相加减, 比如<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>, b=<span class="number">2</span>, c; </span><br><span class="line">c=a+b;</span><br></pre></td></tr></table></figure></p>
<p>如果希望我们自定义的类型也可以用 “+” 运算, 就需要到 「运算符重载」 .</p>
<p>(实际上很多运算符都可以重载.)</p>
<h1 id="二-什么是-「运算符重载」"><a href="#二-什么是-「运算符重载」" class="headerlink" title="二. 什么是 「运算符重载」?"></a>二. 什么是 「运算符重载」?</h1><p>运算符的重载就是在类中<strong>定义一个函数</strong>, 对某个运算符进行重载.<br>比如:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义绳子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rope</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        rope(<span class="keyword">int</span> i=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重载 + 运算符</span></span><br><span class="line">        rope <span class="keyword">operator</span> + (rope&amp; r)</span><br><span class="line">        &#123;</span><br><span class="line">            len = len + r.len;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出绳子的长度</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"len: "</span>&lt;&lt;len&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rope a(2), b(3);</span><br><span class="line">    b = a + b;    <span class="comment">//两根绳子相加</span></span><br><span class="line">    b.show();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子里自定义了一个绳子类, 属性有长度.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rope <span class="keyword">operator</span> + (rope&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">    len = len + r.len;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中实现了运算符的重载, 所以可以在主函数里对两个绳子对象进行 + 运算.</p>
<h1 id="三-怎么实现-「运算符重载」"><a href="#三-怎么实现-「运算符重载」" class="headerlink" title="三. 怎么实现 「运算符重载」?"></a>三. 怎么实现 「运算符重载」?</h1><p>运算符的重载是通过<strong>函数</strong>来实现的, 一种是<strong>成员函数</strong>, 另一种是<strong>友元函数</strong>.</p>
<h2 id="1-用成员函数重载运算符"><a href="#1-用成员函数重载运算符" class="headerlink" title="1. 用成员函数重载运算符"></a>1. 用成员函数重载运算符</h2><ul>
<li><p>原型</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;返回值类型&gt;<span class="keyword">operator</span>&lt;运算符&gt;(&lt;形式参数表&gt;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点</p>
<ul>
<li>因为成员函数有一个 this 指针, 所以它需要的参数总是比它的操作时<strong>少一个</strong>.</li>
<li><p>在运算符重载之后</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + b</span><br></pre></td></tr></table></figure>
<p>  会被编译器解释为 </p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="keyword">operator</span> +(b)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>例子</p>
<ul>
<li>不想写.</li>
</ul>
</li>
</ul>
<h2 id="2-用友元函数重载运算符"><a href="#2-用友元函数重载运算符" class="headerlink" title="2.用友元函数重载运算符"></a>2.用友元函数重载运算符</h2><ul>
<li><p>原型</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span>&lt;返回值类型&gt;<span class="keyword">operator</span>&lt;运算符&gt;(&lt;形式参数表&gt;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点</p>
<ul>
<li>由于友元函数不是类的成员, 没有 this 指针, 因此需要的参数和操作数一样多.</li>
<li><p>在运算符重载之后</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + b</span><br></pre></td></tr></table></figure>
<p>  会被编译器解释为 </p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> +(a, b)</span><br></pre></td></tr></table></figure>
<p>  这个例子还不能看出友元函数的功能, 再来一个</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23.5</span> + b</span><br></pre></td></tr></table></figure>
<p>  会被编译器解释为 </p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> +(<span class="number">23.5</span>, b)</span><br></pre></td></tr></table></figure>
<p>  如果像成员函数那样, 就会被解释为 </p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23.5</span>.<span class="keyword">operator</span>(b)</span><br></pre></td></tr></table></figure>
<p>  而 float 类型不能进行”.”操作. 所以就错了.</p>
</li>
</ul>
</li>
<li>例子<ul>
<li>不想写.</li>
</ul>
</li>
</ul>
<h2 id="3-两种运算符重载形式的比较"><a href="#3-两种运算符重载形式的比较" class="headerlink" title="3. 两种运算符重载形式的比较"></a>3. 两种运算符重载形式的比较</h2><ul>
<li>友元函数重载运算符的特点已经体现出<strong>有时候重载为友元函数更加灵活</strong>.</li>
<li><strong>不能</strong>将<strong>“=”、 “+=”、 “-=”</strong>等赋值运算符重载为友元函数．</li>
<li><strong>不能</strong>将<strong>“()”、 “[]”、 “-&gt;”</strong>重载为友元函数.</li>
<li>在重载增量或减量运算符时, 若使用友元函数, 则需要应用<strong>引用参数</strong>.</li>
</ul>
<h1 id="四-不同运算符的重载"><a href="#四-不同运算符的重载" class="headerlink" title="四. 不同运算符的重载"></a>四. 不同运算符的重载</h1><h2 id="1-加减乘除运算符的重载"><a href="#1-加减乘除运算符的重载" class="headerlink" title="1. 加减乘除运算符的重载"></a>1. 加减乘除运算符的重载</h2><p>加减乘除相对其他简单, 以<strong>成员函数</strong>为例, 在类中的原型为:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;返回值类型&gt;<span class="keyword">operator</span> + (&lt;形式参数表&gt;);</span><br><span class="line">&lt;返回值类型&gt;<span class="keyword">operator</span> - (&lt;形式参数表&gt;);</span><br><span class="line">&lt;返回值类型&gt;<span class="keyword">operator</span> * (&lt;形式参数表&gt;);</span><br><span class="line">&lt;返回值类型&gt;<span class="keyword">operator</span> / (&lt;形式参数表&gt;);</span><br></pre></td></tr></table></figure></p>
<p>然后根据需要进行操作即可.(参考<strong>第一个程序</strong>即可, 在此不再举例. 也可用友元函数重载加减乘除运算符, 也懒得写)</p>
<h2 id="2-单目运算符的重载"><a href="#2-单目运算符的重载" class="headerlink" title="2. 单目运算符的重载"></a>2. 单目运算符的重载</h2><p>单目运算符只有一个操作数, 如 !a, -b, &amp;c, *p, --i, ++j.<br>这里以<strong>增量运算符”++”及减量运算符”--“</strong>为例, 介绍单目运算符的重载.</p>
<h3 id="1-用成员函数重载-和"><a href="#1-用成员函数重载-和" class="headerlink" title="(1) 用成员函数重载 ++ 和 --"></a>(1) 用<strong>成员函数</strong>重载 ++ 和 --</h3><ul>
<li><p>原型</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;返回值类型&gt;::<span class="keyword">operator</span> ++();       <span class="comment">//前缀 ++ 运算符</span></span><br><span class="line">&lt;返回值类型&gt;::<span class="keyword">operator</span> ++(<span class="keyword">int</span>);    <span class="comment">//后缀 ++ 运算符</span></span><br><span class="line">&lt;返回值类型&gt;::<span class="keyword">operator</span> --();       <span class="comment">//前缀 -- 运算符</span></span><br><span class="line">&lt;返回值类型&gt;::<span class="keyword">operator</span> --(<span class="keyword">int</span>);    <span class="comment">//后缀 -- 运算符</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>特点</p>
<ul>
<li>int 参数表明调用<strong>该函数时运算符”++”应放在操作数</strong>的后面, 而且这个参数并没有使用到, 所以没必要给出参数名字.</li>
<li>因为成员函数有一个 this 指针, 所以不必要再给出其他参数.</li>
</ul>
</li>
<li><p>例子</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月16日 18:46:46</span></span><br><span class="line"><span class="comment">成员函数重载运算符 ++ 和 --</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Counter () &#123;&#125;;</span><br><span class="line">    Counter (<span class="keyword">int</span> i) &#123;value = i;&#125;</span><br><span class="line">    <span class="comment">//重载 ++ --</span></span><br><span class="line">    Counter <span class="keyword">operator</span> ++ ();</span><br><span class="line">    Counter <span class="keyword">operator</span> ++ (<span class="keyword">int</span>);</span><br><span class="line">    Counter <span class="keyword">operator</span> -- ();</span><br><span class="line">    Counter <span class="keyword">operator</span> -- (<span class="keyword">int</span>);</span><br><span class="line">    <span class="comment">//打印数据成员</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;<span class="built_in">cout</span>&lt;&lt;value&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">unsigned</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Counter Counter::<span class="keyword">operator</span> ++ ()</span><br><span class="line">&#123;</span><br><span class="line">    value ++;    <span class="comment">//++</span></span><br><span class="line">    <span class="keyword">return</span> * <span class="keyword">this</span>;    <span class="comment">//把当前对象返回回去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Counter Counter::<span class="keyword">operator</span> ++ (<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Counter temp;    <span class="comment">//临时对象</span></span><br><span class="line">    temp.value = value++;    <span class="comment">//临时对象的 value 等于实参的 value, 然后实参的 value 加一</span></span><br><span class="line">    <span class="keyword">return</span> temp;    <span class="comment">//把临时对象返回回去</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        后缀 ++ 和前缀 ++ 之所以不同, 是因为前缀本来就是先 ++, 而后缀要运算之后才 ++.</span></span><br><span class="line"><span class="comment">        如果在后缀 ++ 里面, 直接返回 *this, 那么在主函数里面接收到的是错的. </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Counter Counter::<span class="keyword">operator</span> -- ()</span><br><span class="line">&#123;</span><br><span class="line">    value --;</span><br><span class="line">    <span class="keyword">return</span> * <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Counter Counter::<span class="keyword">operator</span> -- (<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Counter temp;</span><br><span class="line">    temp.value = value --;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Counter n(10), c;</span><br><span class="line"></span><br><span class="line">    c = ++ n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"前缀 ++ 运算符计算结果:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"n = "</span>, n.display();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"c = "</span>, c.display();</span><br><span class="line"></span><br><span class="line">    c = n++;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"后缀 ++ 运算符计算结果:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"n = "</span>, n.display();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"c = "</span>, c.display();</span><br><span class="line"></span><br><span class="line">    c = -- n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"前缀 -- 运算符计算结果:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"n = "</span>, n.display();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"c = "</span>, c.display();</span><br><span class="line"></span><br><span class="line">    c = n--;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"后缀 -- 运算符计算结果:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"n = "</span>, n.display();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"c = "</span>, c.display();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-用友元函数重载-和"><a href="#2-用友元函数重载-和" class="headerlink" title="(2) 用友元函数重载 ++ 和 --"></a>(2) 用<strong>友元函数</strong>重载 ++ 和 --</h3><ul>
<li><p>原型</p>
  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;<span class="keyword">operator</span> ++ (&lt;类名&gt;&amp;);</span><br><span class="line">&lt;类型&gt;<span class="keyword">operator</span> -- (&lt;类名&gt;&amp;);</span><br><span class="line">&lt;类型&gt;<span class="keyword">operator</span> ++ (&lt;类名&gt;&amp;, <span class="keyword">int</span>);</span><br><span class="line">&lt;类型&gt;<span class="keyword">operator</span> -- (&lt;类名&gt;&amp;, <span class="keyword">int</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点</p>
<ul>
<li>因为友元函数<strong>没有</strong> this 指针, 所以参数里面要把实参传过来.</li>
<li>本来 ++ 和 – 是会对原来的数产生影响的, 所以重载的时候也要保证这一点, 于是参数中传入的就要是<strong>引用</strong>, 这样就可以改变主函数里面的对象.</li>
</ul>
</li>
<li>例子  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月16日 18:56:20</span></span><br><span class="line"><span class="comment">友元函数重载运算符 ++ 和 --</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Counter () &#123;value = <span class="number">0</span>;&#125;</span><br><span class="line">    Counter (<span class="keyword">int</span> i) &#123;value = i;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Counter <span class="keyword">operator</span> ++ (Counter &amp;);</span><br><span class="line">    <span class="keyword">friend</span> Counter <span class="keyword">operator</span> ++ (Counter &amp;, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">friend</span> Counter <span class="keyword">operator</span> -- (Counter &amp;);</span><br><span class="line">    <span class="keyword">friend</span> Counter <span class="keyword">operator</span> -- (Counter &amp;, <span class="keyword">int</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;<span class="built_in">cout</span>&lt;&lt;value&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">unsigned</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Counter <span class="keyword">operator</span> ++ (Counter &amp; p)</span><br><span class="line">&#123;</span><br><span class="line">    p.value++;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Counter <span class="keyword">operator</span> ++ (Counter &amp; p, <span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Counter temp;</span><br><span class="line">    temp.value = p.value++;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Counter <span class="keyword">operator</span> -- (Counter &amp; p)</span><br><span class="line">&#123;</span><br><span class="line">    p.value--;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Counter <span class="keyword">operator</span> -- (Counter &amp; p, <span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Counter temp;</span><br><span class="line">    temp.value = p.value--;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Counter n(10), c;</span><br><span class="line"></span><br><span class="line">    c = ++ n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"前缀 ++ 运算符计算结果:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"n = "</span>, n.display();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"c = "</span>, c.display();</span><br><span class="line"></span><br><span class="line">    c = n++;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"后缀 ++ 运算符计算结果:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"n = "</span>, n.display();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"c = "</span>, c.display();</span><br><span class="line"></span><br><span class="line">    c = -- n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"前缀 -- 运算符计算结果:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"n = "</span>, n.display();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"c = "</span>, c.display();</span><br><span class="line"></span><br><span class="line">    c = n--;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"后缀 -- 运算符计算结果:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"n = "</span>, n.display();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"c = "</span>, c.display();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-赋值运算符的重载"><a href="#3-赋值运算符的重载" class="headerlink" title="3.赋值运算符的重载"></a>3.赋值运算符的重载</h2><h3 id="1-浅拷贝和深拷贝"><a href="#1-浅拷贝和深拷贝" class="headerlink" title="(1) 浅拷贝和深拷贝"></a>(1) 浅拷贝和深拷贝</h3><ul>
<li>浅拷贝: 当把一个对象赋值给另一个对象的时候, 相当于值的赋值. 如果对象里有一个指针, 也是把<strong>指针的值复制</strong>过去. 问题是 如果在析构函数里面释放指针所指向的内存, 那么程序结束的时候, 对象 A 释放了指针所指向的空间, 但是 B 对象的指针是和 A 中指针一样的, 所以<strong>再次释放</strong>, 于是就出错了.(C-Free 会忽略此错误)</li>
<li>深拷贝: 我们可以重载赋值运算符(也就是 =), 使得在赋值的时候 B 的指针<strong>指向一块新的内存</strong>, 具体看例子.</li>
<li>浅拷贝的例子<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月16日 19:28:39</span></span><br><span class="line"><span class="comment">错误的浅拷贝</span></span><br><span class="line"><span class="comment">在 C-Free 会忽略这个错误, 在 VC 就会报错.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Namelist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> * name;    <span class="comment">//定义了一个指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Namelist(<span class="keyword">int</span> size)</span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="keyword">new</span> <span class="keyword">char</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">    ~Namelist()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] name;    <span class="comment">//在析构函数里面释放了这个指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Namelist n1(10), n2(20);</span><br><span class="line"></span><br><span class="line">    n2 = n1;    <span class="comment">//没有重载赋值运算符, 就会把 n1 的指针的值赋给 n2 的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-重载赋值运算符的格式"><a href="#2-重载赋值运算符的格式" class="headerlink" title="(2) 重载赋值运算符的格式"></a>(2) 重载赋值运算符的格式</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Classname&amp; Classname::<span class="keyword">operator</span> = (Classname&amp; obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> ptr;    <span class="comment">//释放原来分配的空间</span></span><br><span class="line">        <span class="comment">//根据 obj 分配新的空间</span></span><br><span class="line">        <span class="comment">//如果分配的空间不为 NULL, 把 obj　的值复制过来</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>注意</p>
<ul>
<li>形式参数要是<strong>引用</strong>, 否则会调用拷贝构造函数, 又出现浅拷贝.(个人理解)</li>
<li><p>重载赋值运算符函数的返回值</p>
<blockquote>
<p><em>重载赋值运算符时, 通常是返回调用该运算对象的引用, 不过不能使用引用返回一个局部变量, 但 this 可以解决这个问题.</em></p>
</blockquote>
<ul>
<li>为什么返回引用 ? 如果不是返回引用就不能<strong>连续赋值</strong>.</li>
<li>为什么书上说<strong>不能使用引用返回一个局部变量</strong>, 而重载单目运算符的时候返回的是<strong>局部变量</strong> ? <ul>
<li>返回局部变量相当于把局部变量<strong>复制</strong>给主调函数里面的变量, 并不是一定会出问题.(浅拷贝没问题就没问题吧)</li>
<li>而返回引用的前提下, 主调函数指向临时变量, 而这个临时变量是<strong>临时</strong>的, 函数调用之后就<strong>释放</strong>了, 所以就不行.</li>
</ul>
</li>
</ul>
</li>
<li>简单来说, 就是要记住<strong>形式参数是引用, 返回类型也是引用, return 的是 *this.</strong></li>
</ul>
</li>
<li>深拷贝的例子<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月25日 22:18:03</span></span><br><span class="line"><span class="comment">深拷贝的例子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Namelist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        Namelist(<span class="keyword">char</span> *p)</span><br><span class="line">        &#123;</span><br><span class="line">            str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(p)];</span><br><span class="line">            <span class="keyword">if</span>(str != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">strcpy</span>(str, p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重载赋值运算符</span></span><br><span class="line">        Namelist&amp; <span class="keyword">operator</span> = (Namelist&amp; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;n)    <span class="comment">//如果是 A = A 这样的赋值语句没意思了</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> str;</span><br><span class="line">                str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(n.str)];</span><br><span class="line">                <span class="keyword">if</span>(str != <span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">strcpy</span>(str, n.str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">char</span> * str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> aa[] = <span class="string">"aaa"</span>, bb[] = <span class="string">"bbb"</span>, cc[] = <span class="string">"ccc"</span>;</span><br><span class="line">    Namelist a(aa), b(bb), c(cc);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"赋值前: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line">    c.show();</span><br><span class="line"></span><br><span class="line">    a = b = c;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"赋值后: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    a.show();</span><br><span class="line">    b.show();</span><br><span class="line">    c.show();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-和拷贝构造函数的区别"><a href="#3-和拷贝构造函数的区别" class="headerlink" title="(3) 和拷贝构造函数的区别"></a>(3) 和拷贝构造函数的区别</h3><p>拷贝构造函数和赋值运算符重载函数都是用来拷贝一个对象给另一个同类型的对象, 不过它们还是有些区别的.</p>
<ul>
<li>拷贝构造函数是用一个<strong>已存在的</strong>对象去初始化一个<strong>新的</strong>对象, 在以下三种情况下被调用:<ul>
<li>声明一个对象的同时, 给它赋值另一个已存在的对象.</li>
<li>对象作为函数参数, 实参和形参结合时.</li>
<li>函数返回值是类的对象, 函数调用结束后返回到主调函数</li>
</ul>
</li>
<li>赋值运算符重载函数是把一个<strong>已存在的</strong>对象赋值给另一个<strong>已存在的</strong>同类型对象时调用.</li>
</ul>
<h2 id="4-特殊运算符的重载"><a href="#4-特殊运算符的重载" class="headerlink" title="4.特殊运算符的重载"></a>4.特殊运算符的重载</h2><h3 id="1-的重载"><a href="#1-的重载" class="headerlink" title="(1)[ ] 的重载"></a>(1)[ ] 的重载</h3><ul>
<li><p>格式</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;<span class="keyword">operator</span> [] (<span class="keyword">int</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点</p>
<ul>
<li>[] 只能重载为<strong>成员函数</strong>, 不可重载为友元函数</li>
<li>类中重载了下标运算符”[]”, 则可将该类的对象当作一个<strong>数组</strong></li>
<li><strong>必须且只能带一个形参</strong>, 该形参规定为<strong>整数</strong></li>
<li>重载 [] 可以实现<strong>安全数组下标</strong></li>
<li>如果返回的是<strong>引用</strong>, 还可以作为<strong>左值</strong></li>
</ul>
</li>
<li>例子<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月16日 20:49:44</span></span><br><span class="line"><span class="comment">重载下标运算符[]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LIMIT = <span class="number">100</span>;    <span class="comment">//定义数组的最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Intarray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> size;   <span class="comment">//数组的实际长度</span></span><br><span class="line">    <span class="keyword">int</span> * <span class="built_in">array</span>;    <span class="comment">//数组首指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Intarray(<span class="keyword">int</span> = <span class="number">1</span>);    <span class="comment">//构造函数, 默认数组长度为 1</span></span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> i);    <span class="comment">//重载下标运算符</span></span><br><span class="line">    ~Intarray();    <span class="comment">//析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Intarray::Intarray(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//数组越界检查</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;LIMIT)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果长度小于 0 或者 超过了最大长度就退出程序</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"下标越界!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    size = i;</span><br><span class="line">    <span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[size];    <span class="comment">//动态分配空间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">array</span>[j] = j*<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>&amp; Intarray::<span class="keyword">operator</span> [] (<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;size<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果下标不合法就退出程序</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;"log error"&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"下标越界!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;"log"&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">array</span>[i];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Intarray::~Intarray()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] <span class="built_in">array</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, num;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入数组大小:"</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    <span class="function">Intarray <span class="title">array</span><span class="params">(k)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入要打印的个数:"</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;num; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="built_in">array</span>[j];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"元素 array["</span>&lt;&lt;j&lt;&lt;<span class="string">"] : "</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-的重载"><a href="#2-的重载" class="headerlink" title="(2)( ) 的重载"></a>(2)( ) 的重载</h3><ul>
<li><p>格式</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;<span class="keyword">operator</span> () (&lt;参数表&gt;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点</p>
<ul>
<li>只能重载为<strong>成员函数</strong></li>
<li>其中的类型可以使<strong>任意类型</strong>, 参数表可以是<strong>任意多个</strong>, 包括 0 个</li>
<li><blockquote>
<p>当重载”()”调用运算符时, 并不是创建一种调用函数的新方法, 而是创建可传递任意多个参数的<strong>运算符函数</strong></p>
</blockquote>
</li>
</ul>
</li>
<li><p>例子 1</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月17日 15:27:51</span></span><br><span class="line"><span class="comment">重载 ()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> x, y, z;    <span class="comment">//定义成员变量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Func(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> z)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">        <span class="keyword">this</span>-&gt;z = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getx</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">gety</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getz</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> z;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> z)</span></span>;    <span class="comment">//重载 ()</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Func::<span class="keyword">operator</span> () (<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> z)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//重载 () 可以传入任意多个参数, 想干嘛都行</span></span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Func <span class="title">fc</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;fc.getx()&lt;&lt;<span class="string">","</span>&lt;&lt;fc.gety()&lt;&lt;<span class="string">","</span>&lt;&lt;fc.getz()&lt;&lt;<span class="string">")"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子 2</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;process.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月17日 15:28:13</span></span><br><span class="line"><span class="comment">重载 () 访问二维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LIMIT = <span class="number">100</span>;    <span class="comment">//数组最大长度</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Intarray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> size1;    <span class="comment">//行</span></span><br><span class="line">    <span class="keyword">int</span> size2;    <span class="comment">//列</span></span><br><span class="line">    <span class="keyword">int</span> * <span class="built_in">array</span>;    <span class="comment">//数组指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Intarray(<span class="keyword">int</span> = <span class="number">1</span>, <span class="keyword">int</span> = <span class="number">1</span>);    <span class="comment">//默认为 1 行 1 列</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span>&amp; <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    ~Intarray();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Intarray::Intarray(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>((i&lt;<span class="number">0</span> || i&gt;LIMIT) || (j&lt;<span class="number">0</span> || j&gt;LIMIT))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果数组长度不合法就退出程序</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"下标越界!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    size1 = i;</span><br><span class="line">    size2 = j;</span><br><span class="line">    <span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[i*j];</span><br><span class="line">    <span class="comment">//给数组赋值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;i; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;j; y++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">array</span>[x*size1+y] = <span class="number">2</span>*x+y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>&amp; Intarray::<span class="keyword">operator</span> () (<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>((i&lt;<span class="number">0</span> || i&gt;=LIMIT) || (j&lt;<span class="number">0</span> || j&gt;=LIMIT))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//检查下标</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"下标越界!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">array</span>[i*size1+j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Intarray::~Intarray()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] <span class="built_in">array</span>;</span><br><span class="line">    size1 = <span class="number">0</span>;</span><br><span class="line">    size2 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r, c, m, n, i, j;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入二维数组个数:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;r&gt;&gt;c;</span><br><span class="line">    <span class="function">Intarray <span class="title">array</span><span class="params">(r, c)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入要输出的个数:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="built_in">array</span>(i, j);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"元素 "</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;i&lt;&lt;<span class="string">","</span>&lt;&lt;j&lt;&lt;<span class="string">") "</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5-类类型转换运算符重载"><a href="#5-类类型转换运算符重载" class="headerlink" title="5. 类类型转换运算符重载"></a>5. 类类型转换运算符重载</h2><h3 id="1-基本类型-to-类类型"><a href="#1-基本类型-to-类类型" class="headerlink" title="(1)基本类型 to 类类型"></a>(1)基本类型 to 类类型</h3><ul>
<li>注意<ul>
<li>利用<strong>构造函数</strong>可以完成基本类型到类类型的转换, 前提是: 类中一定要具有最多只有一个非默认参数的构造函数.(比如复数类重载了 + 运算符, 当执行 c+11 的时候, 由于 11 不属于复数, 所以会通过复数类的构造函数将 11 转为复数类型, 书上叫做建立<strong>临时对象</strong>. 此时, <strong>11 只能作为一个参数</strong>, 而类中必须要有合适的构造函数能被调用才行.)</li>
</ul>
</li>
<li>例子<ul>
<li>没有</li>
</ul>
</li>
</ul>
<h3 id="2-类类型-to-基本类型"><a href="#2-类类型-to-基本类型" class="headerlink" title="(2)类类型 to 基本类型"></a>(2)类类型 to 基本类型</h3><ul>
<li><p>格式</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span>&lt;返回类型名&gt;()</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &lt;基本类型值&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点</p>
<ul>
<li>类类型转换函数专门将<strong>类类型转换为基本数据类型</strong>的, 它只能重载为<strong>成员函数</strong>.</li>
<li>和以前的重载运算符函数不同, 类类型转换运算符重载是没有返回值类型, 因为&lt;返回类型名&gt;代表的就是它的返回值类型.</li>
</ul>
</li>
<li>例子 1<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月17日 15:29:11</span></span><br><span class="line"><span class="comment">重载类类型转换运算符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rtype</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rtype(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> data1;</span><br><span class="line">    <span class="keyword">int</span> data2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Rtype::Rtype(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    data1 = a;</span><br><span class="line">    data2 = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rtype::<span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把分数转换为小数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">double</span>(data1)/<span class="keyword">double</span>(data2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Rtype r1(2, 4), r2(3, 8);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"r1 = "</span>&lt;&lt;<span class="keyword">double</span>(r1)&lt;&lt;<span class="string">", r2 = "</span>&lt;&lt;<span class="keyword">double</span>(r2)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>例子 2<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rr(<span class="keyword">int</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">        data = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">double</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">int</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Rr r1(2), r2(3);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="keyword">int</span>(r1) + <span class="keyword">int</span>(r2);</span><br><span class="line">    <span class="keyword">float</span> y = <span class="keyword">double</span>(r1) / <span class="keyword">double</span>(r2);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"x = "</span>&lt;&lt;x&lt;&lt;<span class="string">", y = "</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 多态性和虚函数]]></title>
      <url>/2017/10/articles/C++%20%E5%A4%9A%E6%80%81%E6%80%A7%E5%92%8C%E8%99%9A%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>面向对象又一大特征<br><a id="more"></a></p>
<h1 id="一-什么是多态"><a href="#一-什么是多态" class="headerlink" title="一. 什么是多态"></a>一. 什么是多态</h1><p>在 C++ 中, 发生继承关系之后, 子类对象赋给父类指针或引用, 通过父类指针或者引用调用某个方法, 根据子类对象的不同而体现出不同的效果.</p>
<h1 id="二-怎么实现多态"><a href="#二-怎么实现多态" class="headerlink" title="二. 怎么实现多态"></a>二. 怎么实现多态</h1><ul>
<li>子类继承父类</li>
<li>父类中定义的函数是虚函数</li>
<li>将子类对象赋给父类指针或者引用</li>
<li>通过父类指针或引用调用函数</li>
</ul>
<h1 id="三-什么是虚函数"><a href="#三-什么是虚函数" class="headerlink" title="三. 什么是虚函数"></a>三. 什么是虚函数</h1><h2 id="格式"><a href="#格式" class="headerlink" title="- 格式"></a>- 格式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> &lt;返回值类型&gt; &lt;函数名&gt;(&lt;形式参数表&gt;)</span><br><span class="line">&#123;</span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="作用"><a href="#作用" class="headerlink" title="- 作用"></a>- 作用</h2><p>虚函数是实现多态的基础<br><em>如果不使用虚函数, 那么就算父类指针或者引用接收了子类对象, 当调用某个方法的时候, 调用的还是父类中定义那个函数.</em></p>
<p>反面例子<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月14日 11:23:36</span></span><br><span class="line"><span class="comment">静态联编的问题</span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">    Figue 的面积是:0</span></span><br><span class="line"><span class="comment">    Circle 的面积是:0</span></span><br><span class="line"><span class="comment">    Rectangle 的面积是:0</span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">    子类都属于父类, 通过调用把子类的对象赋给父类的引用, 然后由父类的引用调用函数实现多态.</span></span><br><span class="line"><span class="comment">    但是这样是错误的, 这样调用的仍然是父类中的函数.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Figue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Figue()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="number">0.0</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>:</span> <span class="keyword">public</span> Figue</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(<span class="keyword">double</span> myr) &#123;R = myr;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> PI*R*R;&#125; </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">double</span> R;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Figue</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rectangle(<span class="keyword">double</span> myl, <span class="keyword">double</span> myw)&#123;L = myl; W = myw;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> L*W;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> L, W;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Figue &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p.area()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Figue fig;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Figue 的面积是:"</span>;</span><br><span class="line">    func(fig);</span><br><span class="line">    <span class="function">Circle <span class="title">c</span><span class="params">(<span class="number">3.0</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Circle 的面积是:"</span>;</span><br><span class="line">    func(c);</span><br><span class="line">    <span class="function">Rectangle <span class="title">r</span><span class="params">(<span class="number">4.0</span>, <span class="number">5.0</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Rectangle 的面积是:"</span>;</span><br><span class="line">    func(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>正面例子<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月14日 11:23:21</span></span><br><span class="line"><span class="comment">动态联编的例子</span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">    Figue 的面积是:0</span></span><br><span class="line"><span class="comment">    Circle 的面积是:28.26</span></span><br><span class="line"><span class="comment">    Rectangle 的面积是:20</span></span><br><span class="line"><span class="comment">基类中的 area 函数定义为虚函数</span></span><br><span class="line"><span class="comment">子类中覆盖(为了区分重载函数, 所以称之为覆盖)了虚函数</span></span><br><span class="line"><span class="comment">然后把子类对象赋给父类引用, 通过父类引用(通过指针也行)调用 area 实现调用不同子类的 area 方法</span></span><br><span class="line"><span class="comment">(多态就是通过父类调用方法体现出来的???)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Figue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Figue()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">0.0</span>;&#125;<span class="comment">//定义为虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>:</span> <span class="keyword">public</span> Figue</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle()&#123;&#125;;</span><br><span class="line">    Circle(<span class="keyword">double</span> myr) &#123;R = myr;&#125;<span class="comment">//定义为虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> PI*R*R;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">double</span> R;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Circle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rectangle(<span class="keyword">double</span> myl, <span class="keyword">double</span> myw) &#123;L = myl; W = myw;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> L*W;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> L, W;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Figue &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p.area()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Figue fig;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Figue 的面积是:"</span>;</span><br><span class="line">    func(fig);</span><br><span class="line">    <span class="function">Circle <span class="title">c</span><span class="params">(<span class="number">3.0</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Circle 的面积是:"</span>;</span><br><span class="line">    func(c);</span><br><span class="line">    <span class="function">Rectangle <span class="title">r</span><span class="params">(<span class="number">4.0</span>, <span class="number">5.0</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Rectangle 的面积是:"</span>;</span><br><span class="line">    func(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="虚函数和一般重载函数的区别"><a href="#虚函数和一般重载函数的区别" class="headerlink" title="- 虚函数和一般重载函数的区别"></a>- 虚函数和一般重载函数的区别</h2><ul>
<li>重载函数要求名字相同而参数不同, 虚函数要求函数原型完全相同.</li>
<li>重载函数可以是成员函数或友元函数, 虚函数只能是非静态函数.</li>
<li>构造函数可以重载, 析构函数不能重载.而构造函数不能定义为虚函数, 而析构函数可以.</li>
<li>重载函数的调用是根据参数序列, 而虚函数的调用是根据对象的不同.</li>
<li>重载函数在编译时表现出多态性, 是静态联编; 而虚函数则在运行时表现出多态性, 是动态联编, 因此说动态联编的是 C++ 的精髓.</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="- 特点"></a>- 特点</h2><ul>
<li>基类中定义的虚函数, 那么派生类中这个函数仍然是虚函数, 因为虚函数具有自动向下传给派生类的性质.</li>
<li>在派生类中可以重新定义虚函数, 要求和基类的虚函数的原型完全相同, 此时关键字 virtual 可以省略, 但为了可读性, 通常不省略.</li>
<li>为区分重载函数, 重定义虚函数叫做覆盖.</li>
<li>如果派生类与基类的虚函数<strong>仅仅返回类型不同</strong>, C++ 会认为使用了不恰当的虚函数, 因为只靠返回类型进行函数匹配是模糊的.</li>
<li>如果派生类中与基类中的虚函数<strong>仅仅形参不同</strong>, 那么会被认为是定义了另一个虚函数, 而不是重新定义基类中的虚函数, 此时派生类中有两个虚函数.</li>
<li>派生类把基类中的普通函数重新定义为虚函数, 对基类毫无影响.</li>
</ul>
<h1 id="三-成员函数中调用虚函数"><a href="#三-成员函数中调用虚函数" class="headerlink" title="三. 成员函数中调用虚函数"></a>三. 成员函数中调用虚函数</h1><p>一个基类或派生类的成员函数中可以直接调用该类等级中的虚函数.<br>(在这个🌰中, 派生类中的func2 中调用了虚函数 func1, 虽然 func2 不是虚函数, 通过基类引用调用 func2, func2 调用的是派生类中的 func1. )<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月14日 12:08:38</span></span><br><span class="line"><span class="comment">成员函数调用虚函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"这是父类的 func1 方法."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;func1();&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span>:</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"这是子类的 func1 方法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Subclass sc;</span><br><span class="line">    <span class="comment">// Base &amp; bc = sc;</span></span><br><span class="line">    <span class="comment">// bc.func2();</span></span><br><span class="line">    sc.func2();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="四-构造函数和析构函数中调用虚函数"><a href="#四-构造函数和析构函数中调用虚函数" class="headerlink" title="四. 构造函数和析构函数中调用虚函数"></a>四. 构造函数和析构函数中调用虚函数</h1><p>构造函数和析构函数中调用的虚函数是自己的类中定义的虚函数(也就是说在当前类中第一次出现的), 如果自己的类中没有这个虚函数, 则调用基类中的虚函数, 但绝不是任何在派生类中重定义(覆盖)的虚函数.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月14日 12:22:20</span></span><br><span class="line"><span class="comment">构造函数和析构函数中调用虚函数</span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">    这是父类的 func1 方法.</span></span><br><span class="line"><span class="comment">    Exit main</span></span><br><span class="line"><span class="comment">    这是父类的 func2 方法.</span></span><br><span class="line"><span class="comment">1. 在构造函数和析构函数中调用虚函数, 调用的是类中定义的虚函数</span></span><br><span class="line"><span class="comment">   如果没有定义, 就调用父类中的那个虚函数.需要注意的是, 如果当前类中覆盖了虚函数,是不会被调用的.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base()&#123;func1();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"这是父类的 func1 方法."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"这是父类的 func2 方法."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Base()&#123;func2();&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span>:</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"这是子类的 func1 方法."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"这是子类的 func2 方法."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Subclass sc;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Exit main"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="五-纯虚函数和抽象类"><a href="#五-纯虚函数和抽象类" class="headerlink" title="五. 纯虚函数和抽象类"></a>五. 纯虚函数和抽象类</h1><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="- 纯虚函数"></a>- 纯虚函数</h2><p>如果在基类中还不确定一个虚函数具体能干嘛, 就可以将其定义为纯虚函数.</p>
<h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> &lt;返回值类型&gt;&lt;函数名&gt;(&lt;形式参数表&gt;) = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>注意, 这里 = 0 只是一种形式, 而不是说它的返回值等于 0 ;</p>
<h3 id="🌰"><a href="#🌰" class="headerlink" title="🌰"></a>🌰</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用纯虚函数</span></span><br><span class="line"><span class="comment">一般形式:</span></span><br><span class="line"><span class="comment">    virtual &lt;返回值类型&gt;&lt;函数名&gt;(&lt;形式参数表&gt;) = 0;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Figure</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Figure()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>;    <span class="comment">//定义为纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>:</span> <span class="keyword">public</span> Figure</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(<span class="keyword">double</span> myr)&#123;R = myr;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI*R*R;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">double</span> R;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Figure</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Rectangle(<span class="keyword">double</span> myl, <span class="keyword">double</span> myw)</span><br><span class="line">    &#123;</span><br><span class="line">        L = myl;</span><br><span class="line">        W = myw;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> L * W;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> L, W;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Figure &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p.area()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">c</span><span class="params">(<span class="number">3.0</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Circle 的面积是: "</span>;</span><br><span class="line">    func(c);</span><br><span class="line"></span><br><span class="line">    <span class="function">Rectangle <span class="title">r</span><span class="params">(<span class="number">4.0</span>, <span class="number">5.0</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Rectangle 的面积是:"</span>;</span><br><span class="line">    func(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul>
<li>只要包含了纯虚函数的类就是抽象类.</li>
<li>抽象类不能看成是一种类型, 所以不能说明抽象类的对象, 不能作为返回值类型, 不能作为形式参数.</li>
<li>可以说明抽象类的指针或引用, 以支持运行时的多态性.</li>
<li>如果要直接调用抽象类中定义的纯虚函数, 必须使用完全限定名, 即使用带有作用域分辨符的完全限定函数名???</li>
<li>一个抽象类的派生类, 要么覆盖所有的纯虚函数, 使派生类不是抽象类, 要么仍然将其说明为纯虚函数, 否则将会报错.</li>
<li>成员函数中可以调用纯虚函数, 但是不能在构造函数和析构函数中调用一个纯虚函数.</li>
</ul>
<h1 id="六-虚析构函数"><a href="#六-虚析构函数" class="headerlink" title="六. 虚析构函数"></a>六. 虚析构函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~&lt;类名&gt;()</span><br></pre></td></tr></table></figure>
<ul>
<li>析构函数没有返回值和参数, 所以只能有一个.</li>
<li>C++ 标准不支持虚析构函数.</li>
<li>基类的析构函数是虚函数, 那么所有派生类的析构函数都是虚函数.</li>
</ul>
<h2 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017年10月14日 13:24:20</span></span><br><span class="line"><span class="comment">析构函数的必要性</span></span><br><span class="line"><span class="comment">如果不将析构函数设为虚函数, 那么 delete 的时候会根据指针的类型调用析构函数, 而不会考虑多态性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base()&#123;&#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~Base()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base 的析构函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span>:</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Subclass()</span><br><span class="line">    &#123;</span><br><span class="line">        ptr = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Subclass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Subclass 的析构函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> * ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Base * b = <span class="keyword">new</span> Subclass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不使用虚析构函数, delete b 的时候, 会根据 b 的类型调用 Base 的析构函数, 而不会调用 Subclass 的析构函数.<br>如果使用虚析构函数, 先调用 Subclass 的析构函数, 在调用 Base 的析构函数, 所以虚析构函数是必要的.</p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 继承机制]]></title>
      <url>/2017/10/articles/C++%20%E7%BB%A7%E6%89%BF%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>面向对象的一大特征<br><a id="more"></a></p>
<h1 id="一-什么是继承"><a href="#一-什么是继承" class="headerlink" title="一. 什么是继承"></a>一. 什么是继承</h1><ul>
<li>继承把一个原有的类的成员为己所用.</li>
<li>被继承的类叫做基类</li>
<li>新的类叫做派生类</li>
<li>继承有两种方式:<ul>
<li>单继承: 派生类只有一个基类</li>
<li>多继承: 派生类有多个基类</li>
</ul>
</li>
</ul>
<h1 id="二-单继承的一般形式"><a href="#二-单继承的一般形式" class="headerlink" title="二. 单继承的一般形式"></a>二. 单继承的一般形式</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> &lt;派生类名&gt;:</span> &lt;继承方式&gt;&lt;基类名&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        &lt;公有数据和函数&gt;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        &lt;保护数据和函数&gt;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        &lt;私有数据和函数&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        seta(<span class="keyword">int</span> x)&#123;</span><br><span class="line">            a = x;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="三-派生类的访问控制"><a href="#三-派生类的访问控制" class="headerlink" title="三. 派生类的访问控制"></a>三. 派生类的访问控制</h1><p>定义派生类的时候指定了&lt;访问控制&gt;, 访问控制包括:</p>
<ul>
<li>公有继承<ul>
<li>基类的公有成员, 保护成员分别是派生类的公有成员, 保护成员</li>
<li>基类的私有成员, 派生类无法访问.</li>
</ul>
</li>
<li>私有继承<ul>
<li>基类的公有成员和保护成员都变成派生类的私有成员</li>
<li>基类的私有成员, 派生类无法访问.</li>
</ul>
</li>
<li>保护继承<ul>
<li>基类的公有成员和保护成员都变成派生类的保护成员</li>
<li>基类的私有成员, 派生类无法访问.</li>
</ul>
</li>
<li>需要注意的地方<ul>
<li>基类中的私有变量, 在派生类中都无法访问. <strong>这里就体现了保护变量的用处, 既防止在外面被调用, 又可以让派生类访问到</strong></li>
<li>私有成员无法在派生类中访问, 但是可以在派生类中调用基类中可以访问该私有成员的方法.</li>
<li>派生类的对象都是基类的. 也就是说, 派生类的对象可以赋给基类的变量.P88</li>
</ul>
</li>
</ul>
<h1 id="四-多继承的定义格式"><a href="#四-多继承的定义格式" class="headerlink" title="四. 多继承的定义格式"></a>四. 多继承的定义格式</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> &lt;派生类名&gt;:</span> &lt;继承方式&gt;&lt;基类名<span class="number">1</span>&gt;,...,&lt;继承方式&gt;&lt;基类名n&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &lt;定义派生类自己的成员&gt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>例如<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Baseclass1, <span class="keyword">public</span> Baseclass2</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="五-二义性"><a href="#五-二义性" class="headerlink" title="五. 二义性"></a>五. 二义性</h1><ul>
<li><h2 id="1-调用不同基类的相同成员时可能会出现二义性-就是所继承的时候-多个基类之间有名字相同的成员"><a href="#1-调用不同基类的相同成员时可能会出现二义性-就是所继承的时候-多个基类之间有名字相同的成员" class="headerlink" title="1. 调用不同基类的相同成员时可能会出现二义性(就是所继承的时候, 多个基类之间有名字相同的成员)"></a>1. 调用不同基类的相同成员时可能会出现二义性(就是所继承的时候, 多个基类之间有名字相同的成员)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">seta</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        a = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setb</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        b = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Baseclass1, <span class="keyword">public</span> Baseclass2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Baseclass1::show();</span><br><span class="line">        Baseclass2::show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//错误的写法</span></span><br><span class="line">    Derivedclass obj;</span><br><span class="line">    obj.seta(<span class="number">2</span>);</span><br><span class="line">    obj.show();<span class="comment">//error</span></span><br><span class="line">    obj.setb(<span class="number">4</span>);</span><br><span class="line">    obj.show();<span class="comment">//不知道是哪个 show ,存在二义性, 不能编译</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改方法一, 使用作用域运算符</span></span><br><span class="line">    <span class="comment">// Derivedclass obj;</span></span><br><span class="line">    <span class="comment">// obj.seta(2);</span></span><br><span class="line">    <span class="comment">// obj.Baseclass1::show();//error</span></span><br><span class="line">    <span class="comment">// obj.setb(4);</span></span><br><span class="line">    <span class="comment">// obj.Baseclass2::show();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改方法二, 重写派生类中的 show 方法</span></span><br><span class="line">    <span class="comment">// Derivedclass obj;</span></span><br><span class="line">    <span class="comment">// obj.seta(2);</span></span><br><span class="line">    <span class="comment">// obj.setb(4);</span></span><br><span class="line">    <span class="comment">// obj.show();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="2-访问共同基类的成员时可能出现二义性"><a href="#2-访问共同基类的成员时可能出现二义性" class="headerlink" title="2. 访问共同基类的成员时可能出现二义性"></a>2. 访问共同基类的成员时可能出现二义性</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调用不同基类的相同成员可能出现二义性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">爷爷类: Base</span></span><br><span class="line"><span class="comment">父类: Baseclass1, Baseclass2</span></span><br><span class="line"><span class="comment">子类: Derivedclass</span></span><br><span class="line"><span class="comment">爷爷类中有一个变量 val, Derivedclass 继承了两个父类, 而两个父类又都继承自爷爷类</span></span><br><span class="line"><span class="comment">导致两个父类都有 val, 子类中也有, 所以存在二义性.</span></span><br><span class="line"><span class="comment">解决方法是:</span></span><br><span class="line"><span class="comment">    Baseclass1::val</span></span><br><span class="line"><span class="comment">    Baseclass2::val</span></span><br><span class="line"><span class="comment">错误的做法是:</span></span><br><span class="line"><span class="comment">    Base::val</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass1</span>:</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">seta</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass2</span>:</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setb</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Baseclass1, <span class="keyword">public</span> Baseclass2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;"val = "&lt;&lt;val;    //含义不清, 不能编译</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以这样</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"val = "</span>&lt;&lt;Baseclass1::val&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"val = "</span>&lt;&lt;Baseclass2::val&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这样不行</span></span><br><span class="line">        <span class="comment">//cout&lt;&lt;"val = "&lt;&lt;Base::val&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Derivedclass obj;</span><br><span class="line">    obj.seta(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//obj.show();</span></span><br><span class="line">    obj.setb(<span class="number">4</span>);</span><br><span class="line">    obj.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="3-二义性检查先于访问权限检查"><a href="#3-二义性检查先于访问权限检查" class="headerlink" title="3. 二义性检查先于访问权限检查"></a>3. 二义性检查先于访问权限检查</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">访问权限和二义性的关系</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 里面有个 show 函数, 2 里面也有个 show 函数</span></span><br><span class="line"><span class="comment">但是 1 里面的 show 是公有的, 2 里面的是私有的</span></span><br><span class="line"><span class="comment">Derivedclass 继承了 1 和 2 函数, 当直接 obj.show() 的时候还是存在二义性</span></span><br><span class="line"><span class="comment">所以就说明了, 通过修改成员的访问权限并没有什么卵用.</span></span><br><span class="line"><span class="comment">因为二义性检查是在权限检查之前的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">seta</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        a = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setb</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        b = x;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Baseclass1, <span class="keyword">public</span> Baseclass2</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Derivedclass obj;</span><br><span class="line">    obj.seta(<span class="number">2</span>);</span><br><span class="line">    obj.setb(<span class="number">4</span>);</span><br><span class="line">    obj.show();</span><br><span class="line">    <span class="comment">// obj.Baseclass1::show();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="六-虚基类"><a href="#六-虚基类" class="headerlink" title="六. 虚基类"></a>六. 虚基类</h1><ul>
<li><h2 id="1-目的"><a href="#1-目的" class="headerlink" title="1. 目的"></a>1. 目的</h2><ul>
<li>解决二义性问题</li>
<li>使得公共基类在派生类对象中只产生一个基类子对象</li>
</ul>
</li>
<li><h2 id="2-格式"><a href="#2-格式" class="headerlink" title="2. 格式"></a>2. 格式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> &lt;继承方式&gt; &lt;基类名&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>一个派生类可以公有或私有地继承多个虚基类, virtual 和 public 的顺序无关紧要,<br>但一定要放在基类名之前, 并且 virtual 只对紧随其后的基类名起作用.</li>
</ul>
</li>
<li><h2 id="3-例子"><a href="#3-例子" class="headerlink" title="3. 例子"></a>3. 例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">虚基类解决二义性问题</span></span><br><span class="line"><span class="comment">爷爷类: A</span></span><br><span class="line"><span class="comment">父类: B1, B2</span></span><br><span class="line"><span class="comment">子类: C</span></span><br><span class="line"><span class="comment">B1, B2 继承 A, C 继承了 B1, B2, A 中有一个保护变量 val</span></span><br><span class="line"><span class="comment">如果不使用虚基类肯定出现二义性 </span></span><br><span class="line"><span class="comment">虚基类的使用方法:</span></span><br><span class="line"><span class="comment">    在定义派生类的时候, 加关键字 virtual</span></span><br><span class="line"><span class="comment">这样一来, A 中就只有一个 val 了</span></span><br><span class="line"><span class="comment">说来复杂, 在书本 98 页有张图片.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setval</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        val = x;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> <span class="keyword">public</span> B1, <span class="keyword">public</span> B2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"val = "</span>&lt;&lt;val&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">    c.setval(<span class="number">5</span>);</span><br><span class="line">    c.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="七-继承机制下的构造函数"><a href="#七-继承机制下的构造函数" class="headerlink" title="七. 继承机制下的构造函数"></a>七. 继承机制下的构造函数</h1><ul>
<li><h2 id="1-派生类中构造函数的格式"><a href="#1-派生类中构造函数的格式" class="headerlink" title="1. 派生类中构造函数的格式"></a>1. 派生类中构造函数的格式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;派生类名&gt;::&lt;派生类名&gt;(总参数表): &lt;基类名<span class="number">1</span>&gt;(参数表<span class="number">1</span>),...,&lt;基类名n&gt;(参数表n)</span><br><span class="line">&#123;</span><br><span class="line">    &lt;派生类中数据成员初始化&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="2-单继承并包括子对象时-构造函数的调用顺序-基类-gt-子对象-gt-派生类"><a href="#2-单继承并包括子对象时-构造函数的调用顺序-基类-gt-子对象-gt-派生类" class="headerlink" title="2. 单继承并包括子对象时, 构造函数的调用顺序(基类 &gt; 子对象 &gt; 派生类)"></a>2. 单继承并包括子对象时, 构造函数的调用顺序(基类 &gt; 子对象 &gt; 派生类)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有 Base1, Base2, Base3 三个类, 它们都有构造函数</span></span><br><span class="line"><span class="comment">Derivedclass 继承了 Base1, 还包含了 Base2, Base3 两个子对象.</span></span><br><span class="line"><span class="comment">Derivedclass 的构造函数中, 调用了另外三个类的构造函数</span></span><br><span class="line"><span class="comment">顺序是: 基类, 子对象, 派生类</span></span><br><span class="line"><span class="comment">注意:</span></span><br><span class="line"><span class="comment">    子对象构造函数的调用是根据在派生类中的声明顺序, 而不是派生类构造函数中出现的顺序</span></span><br><span class="line"><span class="comment">    派生类中的构造函数声明的时候可以不写出要调用的构造函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base1(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        a = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base1 的构造函数被调用, 此时 a 等于: "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base2(<span class="keyword">int</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        b = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base2 的构造函数被调用, 此时 b 等于: "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base3(<span class="keyword">int</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        c = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base3 的构造函数被调用, 此时 c 等于: "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derivedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k, <span class="keyword">int</span> m);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    Base2 f;</span><br><span class="line">    Base3 g;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Derivedclass::Derivedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k, <span class="keyword">int</span> m):Base1(i),g(j),f(k)</span><br><span class="line">&#123;</span><br><span class="line">    d = m;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derivedclass 的构造函数被调用, 此时 d 等于: "</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Derivedclass <span class="title">x</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="3-多继承机制下构造函数的调用顺序-仍然是-基类-gt-子对象-gt-派生类"><a href="#3-多继承机制下构造函数的调用顺序-仍然是-基类-gt-子对象-gt-派生类" class="headerlink" title="3. 多继承机制下构造函数的调用顺序(仍然是: 基类 &gt; 子对象 &gt; 派生类)"></a>3. 多继承机制下构造函数的调用顺序(仍然是: 基类 &gt; 子对象 &gt; 派生类)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多继承方式下构造函数的调用顺序</span></span><br><span class="line"><span class="comment">基类&gt;子对象&gt;派生类</span></span><br><span class="line"><span class="comment">同一层次下的构造函数调用顺序取决于定义派生类时的继承顺序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base1(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        a = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base1 的构造函数被调用, a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base2(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        b = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base2 的构造函数被调用, b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derivedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Derivedclass::Derivedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k):Base2(i),Base1(j)</span><br><span class="line">&#123;</span><br><span class="line">    d = k;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derivedclass 的构造函数被调用, d = "</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Derivedclass <span class="title">x</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="4-有虚基类时-多继承方式下构造函数的调用顺序-虚基类-gt-基类-gt-派生类-但虚基类的构造函数只调用一次"><a href="#4-有虚基类时-多继承方式下构造函数的调用顺序-虚基类-gt-基类-gt-派生类-但虚基类的构造函数只调用一次" class="headerlink" title="4. 有虚基类时, 多继承方式下构造函数的调用顺序(虚基类 &gt; 基类 &gt; 派生类)(但虚基类的构造函数只调用一次)"></a>4. 有虚基类时, 多继承方式下构造函数的调用顺序(虚基类 &gt; 基类 &gt; 派生类)(但虚基类的构造函数只调用一次)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有虚基类时, 多继承方式下构造函数的调用顺序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">先要搞清楚几个类之间的关系, p105 有图</span></span><br><span class="line"><span class="comment">方法:</span></span><br><span class="line"><span class="comment">    调用一个类的构造函数, 只要这个类有基类, 就一定要先调用基类的构造函数.</span></span><br><span class="line"><span class="comment">    调用顺序按照继承顺序, 但是虚基类最优先.</span></span><br><span class="line"><span class="comment">    如果虚基类已经被调用一次, 再次出现就跳过.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base1()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base1 的构造函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base2()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base2 的构造函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived1</span>:</span><span class="keyword">public</span> Base2, <span class="keyword">virtual</span> <span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derived1()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derived1 的构造函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived2</span>:</span><span class="keyword">public</span> Base2, <span class="keyword">virtual</span> <span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derived2()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derived2 的构造函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived3</span>:</span> <span class="keyword">public</span> Derived1, <span class="keyword">virtual</span> <span class="keyword">public</span> Derived2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derived3()&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derived3 的构造函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Derived3 obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="八-派生类构造函数的规则"><a href="#八-派生类构造函数的规则" class="headerlink" title="八. 派生类构造函数的规则"></a>八. 派生类构造函数的规则</h1><ul>
<li><h2 id="1-基类无-派生类有"><a href="#1-基类无-派生类有" class="headerlink" title="1. 基类无, 派生类有"></a>1. 基类无, 派生类有</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基类没有构造函数时, 派生类构造函数的规则</span></span><br><span class="line"><span class="comment">(完全没规则吧???)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Baseclass</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derivedclass();</span><br><span class="line">    Derivedclass(<span class="keyword">int</span> i);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Derivedclass::Derivedclass()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derivedclass 的默认构造函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Derivedclass::Derivedclass(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    b = i;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derivedclass 的构造函数被调用, b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Derivedclass <span class="title">x1</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    Derivedclass x2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="2-基类有-派生类无-调用派生类的默认构造函数-然后执行基类的构造函数-如果基类没有默认构造函数就会出错"><a href="#2-基类有-派生类无-调用派生类的默认构造函数-然后执行基类的构造函数-如果基类没有默认构造函数就会出错" class="headerlink" title="2. 基类有, 派生类无(调用派生类的默认构造函数, 然后执行基类的构造函数, 如果基类没有默认构造函数就会出错)"></a>2. 基类有, 派生类无(调用派生类的默认构造函数, 然后执行基类的构造函数, 如果基类没有默认构造函数就会出错)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基类有构造函数, 派生类没有自定义构造函数时的规则</span></span><br><span class="line"><span class="comment">派生类没有构造函数, 会调用默认的构造函数, 然后执行基类的默认构造函数</span></span><br><span class="line"><span class="comment">(为防止子类没有构造函数, 父类一定要有默认构造函数???)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Baseclass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Baseclass 默认构造函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Baseclass(<span class="keyword">int</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        a = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Baseclass 的构造函数被调用, a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Baseclass</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Derivedclass x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="3-基类有-派生类也有"><a href="#3-基类有-派生类也有" class="headerlink" title="3. 基类有, 派生类也有"></a>3. 基类有, 派生类也有<!-- (如果派生类没有显式调用基类的构造函数, 默认构造函数被调用, 但如果刚好基类中没有默认构造函数, 就会报错)(如果显式调用就正常执行) --></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基类有构造函数, 派生类构造函数的规则</span></span><br><span class="line"><span class="comment">如果在派生类的构造函数没有调用基类的构造函数, 那么就调用基类的默认构造函数</span></span><br><span class="line"><span class="comment">如果在派生类的构造函数中调用了基类的构造函数, 那么就调用基类中对应的构造函数.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Baseclass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Baseclass 的默认构造函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Baseclass(<span class="keyword">int</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        a = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Baseclass 的构造函数被调用, a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Baseclass</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derivedclass(<span class="keyword">int</span> i);</span><br><span class="line">    Derivedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Derivedclass::Derivedclass(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    b = i;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derivedclass 的构造函数 1 被调用, b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Derivedclass::Derivedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j): Baseclass(i)</span><br><span class="line">&#123;</span><br><span class="line">    b = j;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derivedclass 的构造函数 2 被调用, b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Derivedclass <span class="title">x1</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">    <span class="function">Derivedclass <span class="title">x2</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="4-基类无默认构造函数时-派生类构造函数的规则"><a href="#4-基类无默认构造函数时-派生类构造函数的规则" class="headerlink" title="4. 基类无默认构造函数时, 派生类构造函数的规则"></a>4. 基类无默认构造函数时, 派生类构造函数的规则</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">基类无默认构造函数时, 派生类构造函数的规则</span></span><br><span class="line"><span class="comment">以下情况会出错:</span></span><br><span class="line"><span class="comment">    基类无默认函数, 派生类中有构造函数没有调用基类的其他构造函数</span></span><br><span class="line"><span class="comment">解决方法:</span></span><br><span class="line"><span class="comment">    在基类中加入默认构造函数</span></span><br><span class="line"><span class="comment">    在派生类的所有构造函数中调用基类的构造函</span></span><br><span class="line"><span class="comment">注意:</span></span><br><span class="line"><span class="comment">    即使没有调用派生类中那个 没有调用基类的其他构造函数的构造函数, 还是会出错.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baseclass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Baseclass()&#123;&#125;;</span><br><span class="line">    Baseclass(<span class="keyword">int</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        a = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Baseclass 的构造函数被调用. a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derviedclass</span>:</span> <span class="keyword">public</span> Baseclass</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derviedclass(<span class="keyword">int</span> i);</span><br><span class="line">    Derviedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Derviedclass::Derviedclass(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    b = i;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derviedclass 的构造函数 1 被调用, b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Derviedclass::Derviedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j):Baseclass(i)</span><br><span class="line">&#123;</span><br><span class="line">    b = j;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derviedclass 的构造函数 2 被调用, b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Derviedclass <span class="title">x1</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">    <span class="comment">//Derviedclass x2(7);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="九-继承机制下的析构函数"><a href="#九-继承机制下的析构函数" class="headerlink" title="九. 继承机制下的析构函数"></a>九. 继承机制下的析构函数</h1><p><strong>刚好跟构造函数的调用顺序相反</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">派生类析构函数的调用顺序</span></span><br><span class="line"><span class="comment">刚好与构造函数的调用顺序相反, 此程序有 warning</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base1(<span class="keyword">int</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        a = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base1 的构造函数被调用, a = "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Base1()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base1 的析构函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base2(<span class="keyword">int</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        b = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base2 的构造函数被调用, b = "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Base2()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base2 的析构函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Base3(<span class="keyword">int</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        c = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base3 的构造函数被调用, c = "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Base3()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Base3 的析构函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derivedclass</span>:</span> <span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Derivedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k, <span class="keyword">int</span> m);</span><br><span class="line">    ~Derivedclass();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    Base2 f;</span><br><span class="line">    Base3 g;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Derivedclass::Derivedclass(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k, <span class="keyword">int</span> m):Base1(i),g(j),f(k)</span><br><span class="line">&#123;</span><br><span class="line">    d = m;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derivedclass 的构造函数被调用, d = "</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Derivedclass::~Derivedclass()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Derivedclass 的析构函数被调用."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Derivedclass <span class="title">x</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构之串]]></title>
      <url>/2017/09/articles/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%B8%B2/</url>
      <content type="html"><![CDATA[<p>从了解串开始, 最后应用串的操作, 难点是:串的匹配…<br><a id="more"></a></p>
<h1 id="一-串类型的定义"><a href="#一-串类型的定义" class="headerlink" title="一. 串类型的定义"></a>一. 串类型的定义</h1><ul>
<li>串: 就是字符串</li>
<li>值: 字符串的字符序列</li>
<li>长度: 串中字符的数目</li>
<li>空串: 零个字符的串</li>
<li>子串: 串中任意个连续的字符组成的字符序列成为串的子串</li>
<li>主串: 包含子串的串相应地成为主串</li>
<li>位置: 字符在序列中的序号(从 0 开始)</li>
<li>相等: 两个串的长度相等, 并且对象位置字符也相等</li>
<li>空格串: 由一个或多个空格组成的串</li>
</ul>
<h1 id="二-串的表示与实现"><a href="#二-串的表示与实现" class="headerlink" title="二. 串的表示与实现"></a>二. 串的表示与实现</h1><h2 id="1-用数组存储"><a href="#1-用数组存储" class="headerlink" title="1. 用数组存储"></a>1. 用数组存储</h2><ul>
<li><p>定义:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSTRLEN 255</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> SString[MAXSTRLEN+<span class="number">1</span>];    <span class="comment">//0 号单元存储串的长度</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>串的联接<br>  两个串的联接可能会出现三种情况:</p>
<ul>
<li>两个串的长度相加小于最大长度, 此时得到正确答案</li>
<li>串 1 的长度小于最大长度, 而总长度大于最大长度. 此时串 2 被截断</li>
<li>串 1 的长度为最大长度 , 新串等于串 1, 串 2 完全被截取.</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[配置交换机安全功能]]></title>
      <url>/2017/09/articles/%E9%85%8D%E7%BD%AE%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%AE%89%E5%85%A8%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>这次作业写了两次, 仍然不知所云.<br><a id="more"></a></p>
<h1 id="一-路由器的基本配置"><a href="#一-路由器的基本配置" class="headerlink" title="一. 路由器的基本配置"></a>一. 路由器的基本配置</h1><ul>
<li><p>配置设备名称</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Router(config)#hostname R1</span><br></pre></td></tr></table></figure>
</li>
<li><p>禁用 DNS 查找</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#no ip domain-lookup</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照地址分配表所示配置接口 IP 地址</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1(config-if)#ip address 172.16.99.1 255.255.255.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定 class 作为特权 EXEC 模式密码。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#enable password class</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定 cisco 作为控制台和 vty 密码并启用登录</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">R1(config)# line con 0</span><br><span class="line">R1(config-line)# password cisco</span><br><span class="line">R1(config-line)# login</span><br><span class="line">R1(config-line)# logging synchronous</span><br><span class="line"></span><br><span class="line">R1(config)# line vty 0 15</span><br><span class="line">R1(config-line)# password cisco</span><br><span class="line">R1(config-line)# login</span><br><span class="line">R1(config-line)# end</span><br></pre></td></tr></table></figure>
</li>
<li><p>加密明文密码。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1(config)# service password-encryption</span><br></pre></td></tr></table></figure>
</li>
<li><p>将运行配置保存到启动配置。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1#copy running-config startup-config</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="二-交换机的基本配置"><a href="#二-交换机的基本配置" class="headerlink" title="二. 交换机的基本配置"></a>二. 交换机的基本配置</h1><ul>
<li><p>a. 配置设备名称。</p>
</li>
<li><p>b. 禁用 DNS 查找。</p>
</li>
<li><p>c. 指定 class 作为特权 EXEC 模式密码。</p>
</li>
<li><p>d. 指定 cisco 作为控制台和 vty 密码，然后启用登录。</p>
</li>
<li><p>e. 使用 R1 的 IP 地址配置 S1 的默认网关。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(config)#ip default-gateway 172.16.99.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>f. 加密明文密码</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(config)# service password-encryption</span><br></pre></td></tr></table></figure>
</li>
<li><p>g. 将运行配置保存到启动配置。</p>
</li>
<li><p>h. 在交换机上创建 VLAN 99 并将其命名为 Management。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S1(config)# vlan 99//建立vlan99</span><br><span class="line">S1(config-vlan)# name Management//把vlan99命名为“Management”</span><br><span class="line">S1(config-vlan)# exit</span><br><span class="line">S1(config)#</span><br></pre></td></tr></table></figure>
</li>
<li><p>i. 按照地址分配表所示，配置 VLAN 99 管理接口的 IP 地址，并启用接口。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S1(config)# interface vlan 99</span><br><span class="line">S1(config-if)# ip address 172.16.99.11 255.255.255.0</span><br><span class="line">S1(config-if)# no shutdown</span><br><span class="line">S1(config-if)# end</span><br></pre></td></tr></table></figure>
</li>
<li><p>j. 在交换机上，将端口 F0/5 和 F0/6 分配给 VLAN 99。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">S1# config t</span><br><span class="line">S1(config)# interface f0/5      //进入f0/5接口</span><br><span class="line">S1(config-if)# switchport mode access       //把f0/5接口的模式设置为access</span><br><span class="line">S1(config-if)# switchport access vlan 99        //把端口f0/5划分到vlan 99</span><br><span class="line">S1(config-if)# interface f0/6</span><br><span class="line">S1(config-if)# switchport mode access</span><br><span class="line">S1(config-if)# switchport access vlan 99</span><br><span class="line">S1(config-if)# end</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="三-配置交换机的-SSH-访问"><a href="#三-配置交换机的-SSH-访问" class="headerlink" title="三. 配置交换机的 SSH 访问"></a>三. 配置交换机的 SSH 访问</h1><h2 id="第-1-步-在-S1-上配置-SSH-访问。"><a href="#第-1-步-在-S1-上配置-SSH-访问。" class="headerlink" title="第 1 步: 在 S1 上配置 SSH 访问。"></a>第 1 步: 在 S1 上配置 SSH 访问。</h2><ul>
<li><p>a. 在 S1 上启用 SSH。在全局配置模式下，创建 CCNA-Lab.com 域名。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(config)# ip domain-name CCNA-Lab.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>b. 创建一个本地用户数据库条目，在通过 SSH连接交换机时使用。该用户应具有管理员级别的访问权限。<br>注意：此处所用密码并不是一个强密码。它仅用于实验目的。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(config)# username admin privilege 15 secret sshadmin</span><br></pre></td></tr></table></figure>
</li>
<li><p>c. 配置 vty 线路的 transport  input，以便仅允许 SSH 连接，并使用本地数据库进行身份验证。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S1(config)# line vty 0 15</span><br><span class="line">S1(config-line)# transport input ssh</span><br><span class="line">S1(config-line)# login local</span><br><span class="line">S1(config-line)# exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>d. 使用系数 1024 位，生成 RSA 加密密钥</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">S1(config)#crypto key generate rsa </span><br><span class="line">The name for the keys will be: S1.CCNA-Lab.com</span><br><span class="line">Choose the size of the key modulus in the range of 360 to 2048 for your</span><br><span class="line">General Purpose Keys. Choosing a key modulus greater than 512 may take</span><br><span class="line">a few minutes.</span><br><span class="line">How many bits in the modulus [512]: 1024</span><br><span class="line">% Generating 1024 bit RSA keys, keys will be non-exportable...[OK]</span><br><span class="line">S1(config)#</span><br></pre></td></tr></table></figure>
</li>
<li><p>e. 检验 SSH 配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1# show ip ssh</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="第-2-步-修改-S1-的-SSH-配置"><a href="#第-2-步-修改-S1-的-SSH-配置" class="headerlink" title="第 2 步: 修改 S1 的 SSH 配置"></a>第 2 步: 修改 S1 的 SSH 配置</h2><ul>
<li>.  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S1# config  t</span><br><span class="line">S1(config)# ip ssh time-out 75     //超时设置</span><br><span class="line">S1(config)# ip ssh authentication-retries 2     //身份验证</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="第-3-步-检验-S1-上的-SSH-配置。"><a href="#第-3-步-检验-S1-上的-SSH-配置。" class="headerlink" title="第 3 步: 检验 S1 上的 SSH 配置。"></a>第 3 步: 检验 S1 上的 SSH 配置。</h2><ul>
<li><p>a.  使用 PC-A 上的 SSH 客户端软件连接命令提示符下ssh连接的命令为：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;ssh -l admin 172.16.99.11</span><br></pre></td></tr></table></figure>
</li>
<li><p>b. 键入 exit 结束 S1 上的 SSH 会话。</p>
</li>
</ul>
<h1 id="四-配置交换机安全功能"><a href="#四-配置交换机安全功能" class="headerlink" title="四. 配置交换机安全功能"></a>四. 配置交换机安全功能</h1><ul>
<li><p>查看交换机端口状态</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1# show ip interface brief</span><br></pre></td></tr></table></figure>
<p>  查看哪些端口未使用</p>
</li>
<li><p>关闭交换机上所有未使用的物理端口</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S1(config)# interface range f0/1 – 4</span><br><span class="line">S1(config-if-range)# shutdown//关闭某个端口就是进入该端口，然后执行shutdown命令即可</span><br><span class="line">S1(config-if-range)# interface range f0/7 – 24</span><br><span class="line">S1(config-if-range)# shutdown</span><br><span class="line">S1(config-if-range)# interface range g0/1 – 2</span><br><span class="line">S1(config-if-range)# shutdown</span><br><span class="line">S1(config-if-range)# end</span><br></pre></td></tr></table></figure>
</li>
<li><p>记录路由器 G0/1 端口 MAC 地址</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1# show interface g0/1</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看交换机 MAC 表</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(config)# show mac address-table</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置基本端口安全。(注意：通常会在交换机的所有接入端口上执行此步骤。此处的 F0/5 是一个示例。)</p>
<ul>
<li><p>1) 从 S1 的 CLI，进入与 R1 连接的端口的接口配置模式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(config)# interface f0/5</span><br></pre></td></tr></table></figure>
</li>
<li><p>2) 关闭端口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(config-if)# shutdown</span><br></pre></td></tr></table></figure>
</li>
<li><p>3) 在 F0/5 上启用端口安全。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(config-if)# switchport port-security</span><br></pre></td></tr></table></figure>
</li>
<li><p>4) 为第 2a 步中记录的 R1 G0/1 接口的 MAC 地址配置一个静态条目。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(config-if)# switchport port-security mac-address xxxx.xxxx.xxxx</span><br></pre></td></tr></table></figure>
<p>（xxxx.xxxx.xxxx 是路由器 G0/1 接口的实际 MAC 地址）</p>
</li>
<li>5) 启用交换机端口。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S1(config-if)# no shutdown</span><br><span class="line">S1(config-if)# end</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>检查配置</p>
<ul>
<li><p>修改路由器 MAC 地址</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R1# config t</span><br><span class="line">R1(config)# interface g0/1</span><br><span class="line">R1(config-if)# shutdown</span><br><span class="line">//使用地址 aaaa.bbbb.cccc，为接口配置一个新的 MAC 地址。</span><br><span class="line">R1(config-if)# mac-address aaaa.bbbb.cccc</span><br><span class="line">R1(config-if)# no shutdown</span><br></pre></td></tr></table></figure>
<p>  此时路由器就 ping 不通交换机了</p>
</li>
<li><p>删除路由器的 MAC 地址</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">R1# config t</span><br><span class="line">R1(config)# interface g0/1</span><br><span class="line">R1(config-if)# shutdown</span><br><span class="line">R1(config-if)# no mac-address aaaa.bbbb.cccc</span><br><span class="line">R1(config-if)# no shutdown</span><br></pre></td></tr></table></figure>
<p>  此时可能还是 ping 不通</p>
</li>
<li><p>清除 S1 F0/5 的错误禁用状态。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S1# config t</span><br><span class="line">S1(config)# interface f0/5</span><br><span class="line">S1(config-if)# shutdown</span><br><span class="line">S1(config-if)# no shutdown</span><br></pre></td></tr></table></figure>
<p>  此时应该可以了</p>
<p>我的理解是: 对于某个端口而言, 只允许指定的设备连接. </p>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 路由交换技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 类的静态成员]]></title>
      <url>/2017/09/articles/C++%20%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/</url>
      <content type="html"><![CDATA[<p>静态数据成员和静态成员函数.<br><a id="more"></a></p>
<h1 id="一-为什么要有静态成员"><a href="#一-为什么要有静态成员" class="headerlink" title="一. 为什么要有静态成员?"></a>一. 为什么要有静态成员?</h1><p>因为可能达到这样的目的:同一个类所有的对象共用一个数据.<br>这可以用全局变量来做到, 但这样破坏了数据的封装性. 而用将要共享的数据说明为静态成员是更好的解决方案.</p>
<h1 id="二-静态成员有哪些"><a href="#二-静态成员有哪些" class="headerlink" title="二. 静态成员有哪些?"></a>二. 静态成员有哪些?</h1><ul>
<li>静态数据成员</li>
<li>静态成员函数</li>
</ul>
<h1 id="三-静态数据成员"><a href="#三-静态数据成员" class="headerlink" title="三. 静态数据成员"></a>三. 静态数据成员</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>程序开始运行时创建而不是对象创建时创建</li>
<li>程序结束时销毁而不是在对象销毁时销毁</li>
</ul>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul>
<li>与一般的数据成员的声明类似, 只要在前面加上 static .</li>
</ul>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul>
<li><strong>必须对静态数据成员初始化</strong>P66</li>
<li>不能在构造函数中进行初始化, 可以在实现成员函数的地方实现<br>  &lt;数据类型&gt; &lt;类名&gt; :: &lt;静态数据成员名&gt; = &lt;初始值&gt;;<br>  (注意要写数据类型)</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><p>静态数据成员可以说明为公有的, 私有的或保护的. 若为共有的可以直接访问. </p>
</li>
<li><p>引用格式:</p>
<ul>
<li>&lt;类名&gt;::&lt;静态数据成员名&gt;</li>
<li>&lt;对象名&gt;.&lt;静态数据成员名&gt;</li>
<li>建议使用第一种, 因为静态数据成员不属于某个对象</li>
</ul>
</li>
<li><p>在成员函数里面, 可以用上面的方法引用也可以直接引用静态数据成员名. </p>
</li>
</ul>
<h1 id="四-静态成员函数"><a href="#四-静态成员函数" class="headerlink" title="四. 静态成员函数"></a>四. 静态成员函数</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>用来访问同类中的静态成员</li>
</ul>
<h2 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h2><ul>
<li>与一般的成员函数类似, 只要在前面加上 static .</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>与一般的成员函数没差别.</li>
</ul>
<h2 id="访问非静态数据成员"><a href="#访问非静态数据成员" class="headerlink" title="访问非静态数据成员"></a>访问非静态数据成员</h2><ul>
<li>由于静态成员函数只能访问静态数据成员, 所以要访问非静态数据成员的话, 必须通过参数传递的方式得到对象. </li>
</ul>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 的拷贝构造函数]]></title>
      <url>/2017/09/articles/C++%20%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>构造函数是一种特殊的构造函数.<br><a id="more"></a></p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>拷贝构造函数名字与类名相同,并且不能指定返回类型.</li>
<li>拷贝构造函数只能有一个参数,并且该参数是该类的对象的引用.</li>
<li><p>它不能被显式调用,在以下三种情况下会被自动调用:</p>
<ul>
<li><p>用一个类的对象去初始化该类的另一个对象时</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Point p1(3, 4);</span><br><span class="line">Point p2 = p1;</span><br><span class="line"></span><br><span class="line">//注意,这种情况下不会调用拷贝构造函数:</span><br><span class="line">Point p1(3, 4);</span><br><span class="line">Point p2;</span><br><span class="line">p2 = p1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当函数的形参是类的对象,进行形参和实参结合时???</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Point func(Point p);    //有一个函数的形参是类的对象</span><br><span class="line">....</span><br><span class="line">p2 = func(p1);    //p1, p2 都是对象.</span><br><span class="line">//当用 p1 初始化形参 p 时调用拷贝构造函数</span><br></pre></td></tr></table></figure>
</li>
<li><p>当函数的返回值是类的对象,函数执行完成进行返回时</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Point p;</span><br><span class="line">...</span><br><span class="line">return p;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>用一个已经存在的对象去初始化另一个对象,为了保证引用的对象不被修改,通常把引用参数声明为 const 参数(这样引用就相当于一个常量). 格式如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;类名&gt;::&lt;类名&gt;(<span class="keyword">const</span> &lt;类名&gt; &amp; &lt;对象名&gt;)</span><br><span class="line">&#123;</span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Point::Point(const Point &amp; p)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Copy constructor is called!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>如果没有定义拷贝构造函数, 本身应该是有的. 比如在函数传递的时候, 形参拷贝了实参的数据. (因为定义了拷贝构造函数但是里面什么也没做的话, 发现形参里的对象的数据成员是垃圾值. )</p>
<p>所以如果定义了拷贝构造函数至少要进行数据的拷贝. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//在类的声明中</span><br><span class="line">&lt;类名&gt;(const &lt;类名&gt; &amp; &lt;对象名&gt;);</span><br><span class="line">比如:</span><br><span class="line">    Point(const Point &amp; p);</span><br><span class="line"></span><br><span class="line">//具体实现</span><br><span class="line">//上面写了</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[交换机的基本配置]]></title>
      <url>/2017/09/articles/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>…<br><a id="more"></a></p>
<h1 id="第-1-部分-检验默认交换机配置"><a href="#第-1-部分-检验默认交换机配置" class="headerlink" title="第 1 部分: 检验默认交换机配置"></a>第 1 部分: 检验默认交换机配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Switch&gt; enable  </span><br><span class="line">//进入特权模式</span><br><span class="line">Switch#         </span><br><span class="line">//特权模式提示符</span><br><span class="line"></span><br><span class="line">Switch# show running-config    </span><br><span class="line">//检查当前的运行配置文件。</span><br><span class="line"></span><br><span class="line">Switch# show startup-config    </span><br><span class="line">//检查 NVRAM 中的启动配置文件</span><br><span class="line">(startup-config is not present:启动配置文件不存在)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Switch# show interface vlan1    </span><br><span class="line">//检查 VLAN 1 上 SVI 的特征(可查看 ip 地址, mac 地址)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Switch# show version    </span><br><span class="line">//检查交换机的 Cisco IOS 版本信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Switch# show interface f0/6    </span><br><span class="line">//检查 PC-A 使用的 FastEthernet 接口的默认属性(可查看接口状态, mac 地址, 速率和双工设置)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Switch# show vlan    </span><br><span class="line">//检查交换机的默认 VLAN 设置(查看有哪些 vlan, 以及 vlan 有哪些接口)</span><br></pre></td></tr></table></figure>
<h1 id="第-2-部分-配置基本网络设备设置"><a href="#第-2-部分-配置基本网络设备设置" class="headerlink" title="第 2 部分: 配置基本网络设备设置"></a>第 2 部分: 配置基本网络设备设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//进入全局配置模式。</span><br><span class="line">Switch&gt; enable</span><br><span class="line">Switch#</span><br><span class="line">Switch# configure terminal</span><br><span class="line"></span><br><span class="line">//分配交换机主机名。</span><br><span class="line">Switch(config)# hostname  S1</span><br><span class="line"></span><br><span class="line">//配置密码加密。</span><br><span class="line">S1(config)# service password-encryption</span><br><span class="line"></span><br><span class="line">//指定 class 作为特权 EXEC 模式访问的加密密码。</span><br><span class="line">S1(config)# enable secret  class</span><br><span class="line"></span><br><span class="line">//防止不必要的 DNS 查找。</span><br><span class="line">S1(config)# no ip domain-lookup</span><br><span class="line"></span><br><span class="line">//配置 MOTD 标语。</span><br><span class="line">S1(config)# banner motd #Unauthorized access is strictly prohibited. #</span><br><span class="line">//设置MOTD标语在交换机启动的时候会看到。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">S1# configure terminal</span><br><span class="line">S1(config)# vlan 99    //创建 vlan</span><br><span class="line">S1(config-vlan)# exit</span><br><span class="line">S1(config)# interface vlan99    //进入 vlan</span><br><span class="line">%LINEPROTO-5-UPDOWN: Line protocol on Interface Vlan99, changed state to down</span><br><span class="line">S1(config-if)# ip address 192.168.1.2  255.255.255.0    //设置 ip 和子网掩码</span><br><span class="line">S1(config-if)# no shutdown    //更改 vlan 状态</span><br><span class="line">S1(config-if)# exit</span><br><span class="line">S1(config)#</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//将所有用户端口分配到 VLAN 99。</span><br><span class="line">S1(config)# interface range f0/1 – 24,g0/1 - 2</span><br><span class="line">S1(config-if-range)# switchport access vlan 99</span><br><span class="line">S1(config-if-range)# exit</span><br><span class="line">S1(config)#</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//检验所有用户端口都处于 VLAN 99 中</span><br><span class="line">S1# show vlan brief</span><br><span class="line"></span><br><span class="line">//设置交换机的默认网关</span><br><span class="line">S1(config)# ip default-gateway 192.168.1.1</span><br><span class="line"></span><br><span class="line">//设置远程 telnet 连接的时候需要密码</span><br><span class="line">S1(config)# line con 0</span><br><span class="line">S1(config-line)# password cisco</span><br><span class="line">S1(config-line)# login</span><br><span class="line">S1(config-line)# logging synchronous</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//配置 vty 密码,否则无法通过 telnet 连接</span><br><span class="line">S1(config)# line vty 0 15</span><br><span class="line">S1(config-line)# password cisco</span><br><span class="line">S1(config-line)# login</span><br><span class="line">S1(config-line)# end</span><br></pre></td></tr></table></figure>
<h1 id="第-3-部分-检验并测试网络连接"><a href="#第-3-部分-检验并测试网络连接" class="headerlink" title="第 3 部分: 检验并测试网络连接"></a>第 3 部分: 检验并测试网络连接</h1><p>用命令行 telnet 192.168.1.2 连接交换机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//保存配置。</span><br><span class="line">S1# copy running-config startup-config //保存配置信息，与write命令功能相同</span><br><span class="line">Destination filename [startup-config]? [Enter]</span><br><span class="line">Building configuration...</span><br><span class="line">[OK]</span><br></pre></td></tr></table></figure></p>
<h1 id="第-4-部分-管理-MAC-地址表"><a href="#第-4-部分-管理-MAC-地址表" class="headerlink" title="第 4 部分: 管理 MAC 地址表"></a>第 4 部分: 管理 MAC 地址表</h1><p>查看主机的 MAC 地址:<br>在 PC-A 的命令提示符下，发出 ipconfig /all 命令确定并记录 PC NIC 的第 2 层（物理）地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//显示交换机的 MAC 地址表</span><br><span class="line">S1# show mac address-table</span><br><span class="line"></span><br><span class="line">//只显示动态获知的 MAC 地址</span><br><span class="line">S1# show mac address-table dynamic</span><br><span class="line"></span><br><span class="line">//清除动态 MAC 地址</span><br><span class="line">S1# clear mac address-table dynamic</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//设置静态 MAC 地址</span><br><span class="line">S1(config)# mac address-table static 0050.56BE.6C89 vlan 99 interface fastethernet 0/6</span><br><span class="line"></span><br><span class="line">//清除静态 MAC 地址</span><br><span class="line">S1(config)# no mac address-table static 0050.56BE.6C89 vlan 99 interface fastethernet 0/6</span><br></pre></td></tr></table></figure>
<h1 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//为交换机配置特权模式访问密码</span><br><span class="line">S1(config)#enable password 123</span><br><span class="line"></span><br><span class="line">//检查交换机 NVRAM 中的启动配置文件命令</span><br><span class="line">S1#show startup-config</span><br><span class="line"></span><br><span class="line">//检查交换机当前的运行配置文件命令</span><br><span class="line">S1#show running-config</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[scrapy 中文编码问题]]></title>
      <url>/2017/08/articles/scrapy%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>深夜踩坑…<br><a id="more"></a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>python 版本: 2.7</p>
<p>scrapy 版本: 1.4</p>
<p>scrapy 用保存文件的时候再打开总是类似于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\u9999\u6e2f\uff08\u7e41\u4f53\uff09</span><br></pre></td></tr></table></figure></p>
<p>刚开始是复制到在线解析的网站上面,后来不满足于此,尝试谷歌解决,经过将近两个小时的搜索才解决问题…</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在 settings.py 文件下添加一句:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FEED_EXPORT_ENCODING = <span class="string">'gbk'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一开始以为 encode 一下就可以了,弄了半天并没有什么卵用.搜索到的也基本没有用,可能是我想的关键字不对,后来看到<a href="https://caiknife.github.io/blog/2013/08/02/scrapy-json-solution/" target="_blank" rel="noopener">一篇博客</a>(居然是 2013 年的),这里说的方法我看不懂,后来在 Stack Overflow 看到</p>
<blockquote>
<p>Since Scrapy 1.2.0, a new setting FEED_EXPORT_ENCODING is introduced. By specifying it as utf-8, JSON output will not be escaped.</p>
</blockquote>
<blockquote>
<p>That is to add in your settings.py:</p>
</blockquote>
<blockquote>
<p>FEED_EXPORT_ENCODING = ‘utf-8’</p>
</blockquote>
<p>说实话当时我试了没用,也没有意识到为什么不对,没错我根本不理解这几种编码,最后看到网上有人说用记事本转换成 ANSI 编码,马上想到 settings.py 里面的这句话,完全是运气…</p>
<p>网上搜索出的还是 0.24 的版本,现在都 1.4 了,英语不好看不懂官方文档真的不行.</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《 自控力》笔记（二）]]></title>
      <url>/2017/08/articles/%E8%87%AA%E6%8E%A7%E5%8A%9B-2/</url>
      <content type="html"><![CDATA[<p>第二章<br><a id="more"></a></p>
<h1 id="我们本该拥有自控力"><a href="#我们本该拥有自控力" class="headerlink" title="我们本该拥有自控力"></a><strong>我们本该拥有自控力</strong></h1><p>我们面对的威胁有两种，一种来自外界的危险，另一种是我们的内心出了问题，导致我们不能抵制住诱惑。</p>
<p><strong>面对意志力挑战，最重要的是认清什么是需要克制的内在冲动。哪些想法和感觉迫使你在不情愿的时候做出决定</strong></p>
<p>面对危险，我们有应激反应帮助我们。而面对诱惑，我们有“三思而后行”的能力。这种能力让我们得以抵制住诱惑，这两种本能都是人类天性的一部分，但是后者不是总能生效，下面来了解压力和自控力的生理学基础。</p>
<p>心率变异度高的人意志力更加坚定。食物、环境、情绪、睡眠和疾病都会影响到心率变异度，所以导致了人与人之间的差别。提高心率变异度的方式有：<strong>冥想、锻炼、保持良好睡眠、健康饮食等，还可以通过降低呼吸的频率有效提高自控力。</strong></p>
<h1 id="锻炼与睡眠"><a href="#锻炼与睡眠" class="headerlink" title="锻炼与睡眠"></a><strong>锻炼与睡眠</strong></h1><p>锻炼可以提高自控力，而令人欣喜的是：散步、收拾房间这样的活动也算运动，而且真的能够提高自控力，而且只需要短短五分钟（所以在学校的时候别整天呆在宿舍里）。</p>
<p>同样的，好的睡眠也有助于我们自控。因为睡眠不足时，细胞无法吸收到足够的葡萄糖，大脑和身体急需能量，就会想吃甜食，但并不能对其有效利用。前额皮质能量不足会类似于轻度醉酒。警报系统能管理压力，克制欲望，但是前额皮质受损就是导致警报系统失去控制，会释放大量的压力荷尔蒙，使心率变异度大大降低，压力越来越大。</p>
<p>每天五分钟的冥想也可能会对睡眠有很大的帮助，通过补觉、打盹的方式可以减少睡眠不足的危害。</p>
<p><strong>我要早睡看似是“我想要”，但实际上看成“我不要”更有助于我们在晚上远离手机的诱惑（importance）</strong></p>
<h1 id="自控力的代价"><a href="#自控力的代价" class="headerlink" title="自控力的代价"></a><strong>自控力的代价</strong></h1><p>自控力会消耗身体里的能量，甚至会消耗掉身体内必须的能量，导致身体出现问题。和压力一样，我们需要放松。哪怕是<strong>几分钟</strong>也有助于我们恢复到好的状态，书上说的方式是：躺在床上，身体完全地放松。</p>
<h1 id="这个时代充满压力"><a href="#这个时代充满压力" class="headerlink" title="这个时代充满压力"></a><strong>这个时代充满压力</strong></h1><p>很多人认为意志力是人的一种品质，认为它只存在于优秀的人当中，实际上并不是这样的，每个人都有意志力，只不过意志力受到很多方面的影响。</p>
<p>科学研究告诉我们，压力是意志力的天敌。我们会认为压力是解决问题的唯一办法，然后有意无意的给自己增加压力，批评自己懒惰，说自己没有自控力、比不上别人，这只能在短期有效，而且压力最能消耗意志力了。压力和意志力会将能量和注意力引向不同的方向，前者是只看眼前，按本能行事，后者是从长远上看，三思而后行。</p>
<p>这个充满压力的时代，需要我们更好的管理压力，也就需要更强大的意志力，需要我们拥有足够的睡眠和健康的身体。</p>
<p><strong>当我们向诱惑屈服的时候，我们习惯于责怪自己软弱、懒惰、没有意志力，实际上意志力我们是有的，只不过我们并没有处于自控状态，我们处于慢性压力中，迎接意志力挑战的是冲动的自己。想要赢得意志力挑战，我们需要调整到正确的身心状态，用能量自控而不是自卫。这就意味着我们需要从压力中回复过来，保证有能量做最好的自己。</strong></p>
<p><strong>我并不是废物，只是还未进入状态。况且书中也提出了很多简单有效的方法供我们练习。</strong></p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《自控力》笔记（三）]]></title>
      <url>/2017/08/articles/%E8%87%AA%E6%8E%A7%E5%8A%9B-3/</url>
      <content type="html"><![CDATA[<p>第三章<br><a id="more"></a></p>
<h1 id="自控力是有限的"><a href="#自控力是有限的" class="headerlink" title="自控力是有限的"></a><strong>自控力是有限的</strong></h1><p>自控力像肌肉一样，使用太多就会疲惫，我们需要一些办法来克服意志力枯竭。</p>
<p>意志力是会波动的，所以我们应该在意志力最强的是后完成最困难、最重要的事情。</p>
<h1 id="为什么自控力存在局限"><a href="#为什么自控力存在局限" class="headerlink" title="为什么自控力存在局限"></a><strong>为什么自控力存在局限</strong></h1><p>有实验证明，通过补充糖真的可以提高自控力，但事情没那么简单。一味的吃糖肯定是不行的，实际上自控所消耗的能量并没有运动消耗的多，盲目的补充是愚蠢的。</p>
<p>大脑很“小气”，它拥有足够多的能量，但是有时不愿意用来自控。这是因为很久以前，食物严重不足，需要大脑合理的分配能量，但现在已经不会出现这样的危机，而大脑仍然是以这样的方式进行工作，导致能量下降的时候，它就害怕能量枯竭，所以就不给能量用来自控。</p>
<p>饥饿的时候，人们更容易做出冲动的决定也是这个原因。</p>
<p>能量不会稀缺，但我们需要补充能量，避免大脑以为没有足够的食物。建议吃低血糖的食物：瘦肉蛋白，坚果，豆类，麦片，水果和蔬菜。哪怕是一点小小的改变，也足以让获得的意志力比消耗的多。<br>-</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[二叉树的遍历]]></title>
      <url>/2017/08/articles/17-8-21-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<p>本文介绍二叉树的先、中、后序遍历。<br><a id="more"></a></p>
<h1 id="一、先序遍历"><a href="#一、先序遍历" class="headerlink" title="一、先序遍历"></a><p style="color:#08f">一、先序遍历</p></h1><h2 id="理解语句执行顺序"><a href="#理解语句执行顺序" class="headerlink" title="理解语句执行顺序"></a><strong>理解语句执行顺序</strong></h2><p>无论是哪种遍历方式，都是从一个节点出发。</p>
<p>先序遍历就是从一个节点出发，首先打印当前节点（也就是访问当前节点），如果当前节点有左子树，就访问左子树，如果没有左子树就去访问右子树，如果右子树也没有就返回。</p>
<p>访问左右子树的方式和之前一样，先打印（访问）当前节点，然后访问左右子树。</p>
<p>调用一个函数就会在栈顶分配一块内存，函数里面在调用其他函数会继续在栈顶分配内存，而且执行的永远是在栈顶的那个函数，栈顶的执行完毕之后就是释放当前的内存，执行到下一个函数。</p>
<p>假设现在从根节点开始先序遍历，首先访问根节点，然后是访问左右子树，访问右子树之前会先访问左子树。<strong>尽管访问左子树和右子树的两条语句很近，但实际上访问左子树的时候在栈顶分配了内存，然后访问左子树的左子树又分配内存（别忘了执行的永远是栈顶这个函数），即便是释放栈顶的内存之后，也是轮到左子树的右子树…再然后才是访问到右子树。</strong></p>
<p>所以说理解了函数调用的方式，就会知道先序遍历究竟是怎么执行的。</p>
<h2 id="构造一个树"><a href="#构造一个树" class="headerlink" title="构造一个树"></a><strong>构造一个树</strong></h2><p>已经忘记书上是怎么写的了，我的写法可能比较笨。</p>
<p>先定义结构体，每个节点由左右指针域和数据域组成。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">left_ptr</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">right_ptr</span>;</span></span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">&#125;Tree, *PTree;</span><br></pre></td></tr></table></figure></p>
<p>然后创建节点并把节点连起来。（这里只是列举一部分代码）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PTree one_1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">PTree two_1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">PTree two_2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">PTree thr_1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">PTree thr_2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">PTree thr_3 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">PTree thr_4 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line"></span><br><span class="line">one_1-&gt;ch = <span class="string">'A'</span>;</span><br><span class="line">one_1-&gt;left_ptr = two_1;</span><br><span class="line">one_1-&gt;right_ptr = two_2;</span><br><span class="line"></span><br><span class="line">two_1-&gt;ch = <span class="string">'B'</span>;</span><br><span class="line">two_1-&gt;left_ptr = thr_1;</span><br><span class="line">two_1-&gt;right_ptr = thr_2;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<h2 id="先序遍历二叉树"><a href="#先序遍历二叉树" class="headerlink" title="先序遍历二叉树"></a><strong>先序遍历二叉树</strong></h2><ul>
<li>先序遍历的顺序<ol>
<li>先访问根节点</li>
<li>再访问左子树</li>
<li>再访问右子树</li>
</ol>
</li>
</ul>
<p>遍历二叉树要从一个节点开始，所以函数的形参是一个节点的指针。</p>
<p>具体的做法是，访问当前节点，判断是否有左子树，有的话就访问左子树（也就是递归调用这个函数，把左子树的地址作为形参传递过去）。再判断有无右子树，与左子树同理。</p>
<p>具体代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XianXuBianLi</span><span class="params">(PTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%c "</span>, tree-&gt;ch);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(tree-&gt;left_ptr != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		XianXuBianLi(tree-&gt;left_ptr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(tree-&gt;right_ptr != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		XianXuBianLi(tree-&gt;right_ptr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a><strong>完整代码</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">left_ptr</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">right_ptr</span>;</span></span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">&#125;Tree, *PTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XianXuBianLi</span><span class="params">(PTree)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	PTree one_1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">	PTree two_1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">	PTree two_2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">	PTree thr_1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">	PTree thr_2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">	PTree thr_3 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">	PTree thr_4 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line"></span><br><span class="line">	one_1-&gt;ch = <span class="string">'A'</span>;</span><br><span class="line">	one_1-&gt;left_ptr = two_1;</span><br><span class="line">	one_1-&gt;right_ptr = two_2;</span><br><span class="line"></span><br><span class="line">	two_1-&gt;ch = <span class="string">'B'</span>;</span><br><span class="line">	two_1-&gt;left_ptr = thr_1;</span><br><span class="line">	two_1-&gt;right_ptr = thr_2;</span><br><span class="line"></span><br><span class="line">	two_2-&gt;ch = <span class="string">'C'</span>;</span><br><span class="line">	two_2-&gt;left_ptr = thr_3;</span><br><span class="line">	two_2-&gt;right_ptr = thr_4;</span><br><span class="line"></span><br><span class="line">	thr_1-&gt;ch = <span class="string">'D'</span>;</span><br><span class="line">	thr_1-&gt;left_ptr = <span class="literal">NULL</span>;</span><br><span class="line">	thr_1-&gt;right_ptr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	thr_2-&gt;ch = <span class="string">'E'</span>;</span><br><span class="line">	thr_2-&gt;left_ptr = <span class="literal">NULL</span>;</span><br><span class="line">	thr_2-&gt;right_ptr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	thr_3-&gt;ch = <span class="string">'F'</span>;</span><br><span class="line">	thr_3-&gt;left_ptr = <span class="literal">NULL</span>;</span><br><span class="line">	thr_3-&gt;right_ptr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	thr_4-&gt;ch = <span class="string">'G'</span>;</span><br><span class="line">	thr_4-&gt;left_ptr = <span class="literal">NULL</span>;</span><br><span class="line">	thr_4-&gt;right_ptr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	XianXuBianLi(one_1);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XianXuBianLi</span><span class="params">(PTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%c "</span>, tree-&gt;ch);</span><br><span class="line">	<span class="keyword">if</span>(tree-&gt;left_ptr != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		XianXuBianLi(tree-&gt;left_ptr);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tree-&gt;right_ptr != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		XianXuBianLi(tree-&gt;right_ptr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a><strong>输出结果</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A B D E C F G Press any key to continue</span><br></pre></td></tr></table></figure>
<h1 id="二、中序遍历"><a href="#二、中序遍历" class="headerlink" title="二、中序遍历"></a><p style="color:#08f">二、中序遍历</p></h1><p>中序遍历和先序遍历无非就是访问根节点的时机不同罢了。</p>
<ul>
<li>中序遍历的顺序<ol>
<li>先访问左子树</li>
<li>再访问根节点</li>
<li>再访问右子树</li>
</ol>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZhongXuBianLi</span><span class="params">(PTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree-&gt;left_ptr != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		XianXuBianLi(tree-&gt;left_ptr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%c "</span>, tree-&gt;ch);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(tree-&gt;right_ptr != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		XianXuBianLi(tree-&gt;right_ptr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a><strong>输出结果</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D B E A F C G Press any key to <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<h1 id="三、后序遍历"><a href="#三、后序遍历" class="headerlink" title="三、后序遍历"></a><p style="color:#08f">三、后序遍历</p></h1><ul>
<li>后序遍历的顺序<ol>
<li>先访问左子树</li>
<li>再访问右子树</li>
<li>再访问根节点</li>
</ol>
</li>
</ul>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HouXuBianLi</span><span class="params">(PTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree-&gt;left_ptr != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		XianXuBianLi(tree-&gt;left_ptr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(tree-&gt;right_ptr != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		XianXuBianLi(tree-&gt;right_ptr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c "</span>, tree-&gt;ch);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a><strong>输出结果</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D E B F G C A Press any key to <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[二叉树遍历序列的求解]]></title>
      <url>/2017/08/articles/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E7%9A%84%E6%B1%82%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>已知先序遍历和中序遍历求后序遍历，或已知中序遍历和后序遍历求先序遍历。<br><a id="more"></a></p>
<h1 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a><p style="color:#08f">一、说明</p></h1><p>已知任何一种遍历结果都不能推算出二叉树原来的结构，只有知道<strong>先序遍历和终须遍历的结果</strong>或者<strong>中序遍历和后序遍历的结果</strong>才能做到。</p>
<h1 id="二、已知先、中序遍历"><a href="#二、已知先、中序遍历" class="headerlink" title="二、已知先、中序遍历"></a><p style="color:#08f">二、已知先、中序遍历</p></h1><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a><strong>举例</strong></h2><blockquote>
<p>先序遍历：ABCDEFGH</p>
</blockquote>
<blockquote>
<p>中序遍历：BDCEAFHG</p>
</blockquote>
<ol>
<li>先序遍历第一个一定是根节点，由此得出根节点是 A</li>
<li>中序遍历先遍历左子树，再到根节点，然后是右子树。根节点是 A ，所以 BDCE 是左子树，FHG 是右子树。</li>
<li>BDCE 也是一棵树，先序遍历中首先出现的是 B ，由此可知 B 是左子树的根节点。</li>
<li>再看中序遍历的 BDCE ，根节点 B 的左边没有元素说明 B 没有左子树，而<br>DCE 是 B 的右子树。</li>
<li>DCE 在先序遍历中最先出现的是 C ，所以 C 是 B 的右结点。</li>
<li>中序遍历中 C 的左边是 D ,右边是 E ,所以 C 的左结点是 D ,右结点是 E 。</li>
<li>其他元素按照同样的方法也可以排列好。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ol>
<li>已知一棵树，首先看先序遍历的结果，第一个就是根节点。</li>
<li>在中序遍历中找到根节点。<ul>
<li>左边是左子树</li>
<li>右边是右子树</li>
<li>左边为空就是没有左子树</li>
<li>右边为空就是没有右子树</li>
</ul>
</li>
<li>左右子树也是一棵树，按照同样的方法（根据先序遍历找出根节点，根据中序遍历找出左右子树）一直找下去就可以了。</li>
</ol>
<h1 id="三、已知中、后序遍历"><a href="#三、已知中、后序遍历" class="headerlink" title="三、已知中、后序遍历"></a><p style="color:#08f">三、已知中、后序遍历</p></h1><h2 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a><strong>举例</strong></h2><blockquote>
<p>中序遍历：DEBAC</p>
</blockquote>
<blockquote>
<p>后序遍历：DABEC</p>
</blockquote>
<ol>
<li>后序遍历的顺序是先左子树，到右子树，最后是根节点。也就是跟根节点在后序遍历的最后一位–&gt;C。</li>
<li>根据中序遍历可知，DABE 都是 C 的左子树，且没有右子树。</li>
<li>左子树的后序遍历是 DABE ，最后出现的是根节点–&gt;E。</li>
<li>中序遍历中，E 的左边是 D ，右边是 BA ,可知 E 的左结点是 D ，右子树是 BA 。</li>
<li>剩下的 BA 在后序遍历中 B 后出现，所以 B 是 D 右子树的根节点。</li>
<li>在中序遍历中，B 的左边为空，右边为 A ，所以 A 是 B 的右结点，B 的左结点为空。</li>
</ol>
<p>（此题先序遍历是：CEDBA）</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h2><ol>
<li>从后序遍历中找出根节点。</li>
<li>在中序遍历中找出左右子树。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[树的基本知识]]></title>
      <url>/2017/08/articles/17-8-20-%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>本文简单介绍树的定义、分类和不同树的存储。<br><a id="more"></a></p>
<h1 id="一、树的定义"><a href="#一、树的定义" class="headerlink" title="一、树的定义"></a><p style="color:#08f">一、树的定义</p></h1><ol>
<li>由节点和线组成</li>
<li>每个节点只有一个父节点，可以有若干个子节点</li>
<li>有一个节点没有父节点，此节点被称为根节点</li>
</ol>
<h1 id="二、树的术语解释"><a href="#二、树的术语解释" class="headerlink" title="二、树的术语解释"></a><p style="color:#08f">二、树的术语解释</p></h1><ol>
<li>父节点：节点上面紧挨着的一个节点</li>
<li>子节点：一个节点生出来的节点</li>
<li>子孙节点：一个节点的后代</li>
<li>兄弟节点：同一个父节点的节点</li>
<li>深度：从根节点到最底层节点的层数称为深度，根节点称为第一层。</li>
<li>叶子结点：没有子节点的结点</li>
<li>非终端节点：也就是非叶子节点</li>
<li>度：子孙结点的个数</li>
</ol>
<h1 id="三、树的分类"><a href="#三、树的分类" class="headerlink" title="三、树的分类"></a><p style="color:#08f">三、树的分类</p></h1><h2 id="一般树"><a href="#一般树" class="headerlink" title="一般树"></a><strong>一般树</strong></h2><p>任何一个节点的子节点的个数都不受限制</p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a><strong>二叉树</strong></h2><p>任意一个节点的子节点个数最多是两个，且子节点的位置不能交换</p>
<h3 id="一般二叉树"><a href="#一般二叉树" class="headerlink" title="一般二叉树"></a>一般二叉树</h3><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>在不增加树的层数的情况下，无法再添加节点的树称之为满二叉树。（或者说，除最底层外，每个节点都有两个子节点）</p>
<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>在一颗满二叉树的最底层的最右端开始删除若干个节点，形成的树就是完全二叉树。（满二叉树是完全二叉树的一种特例）</p>
<h2 id="森林"><a href="#森林" class="headerlink" title="森林"></a><strong>森林</strong></h2><p>n 个不相交的树的集合。</p>
<h1 id="四、二叉树的连续存储"><a href="#四、二叉树的连续存储" class="headerlink" title="四、二叉树的连续存储"></a><p style="color:#08f">四、二叉树的连续存储</p></h1><p>树的结构是非线性的，而计算机的存储是线性的，为了将树存储到计算机内部，人们规定了三种遍历的方法：<strong>先序遍历，中序遍历，后序遍历</strong>。</p>
<p><strong>二叉树用连续存储的方式只能存储完全二叉树，如果不是完全二叉树，需要补充成完全二叉树。</strong><br>如果不补充成完全二叉树，遍历的结果只有几个有效元素，根据数组里的这几个元素是没办法还原出原来的树的，所以必须要转化成完全二叉树。</p>
<ul>
<li>优点：很容易找到一个节点的父节点，或者判断一个节点有没有子节点并找到子节点。</li>
<li>缺点：内存浪费大，因为可能要补充很多垃圾元素。</li>
</ul>
<h1 id="五、二叉树的链式存储"><a href="#五、二叉树的链式存储" class="headerlink" title="五、二叉树的链式存储"></a><p style="color:#08f">五、二叉树的链式存储</p></h1><p>每个节点都是一个结构体，包含左、右结点指针域和数据域，指针域可以指向子节点，最底层节点的指针域用 NULL 表示。</p>
<ul>
<li>优点：内存浪费小</li>
<li>缺点：不容易找到父节点</li>
</ul>
<h1 id="六、一般树的存储"><a href="#六、一般树的存储" class="headerlink" title="六、一般树的存储"></a><p style="color:#08f">六、一般树的存储</p></h1><h2 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a><strong>双亲表示法</strong></h2><p>每个节点存储它父节点的下标。（找父节点方便）</p>
<h2 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a><strong>孩子表示法</strong></h2><p>每个节点都有指针域来指向它的子节点。（找子节点方便）</p>
<h2 id="孩子双亲表示法"><a href="#孩子双亲表示法" class="headerlink" title="孩子双亲表示法"></a><strong>孩子双亲表示法</strong></h2><p>每个节点既存储了父节点的下标，也有指针域指向它的子节点。（找父节点和子节点都很方便）</p>
<h2 id="二叉树表示法"><a href="#二叉树表示法" class="headerlink" title="二叉树表示法"></a><strong>二叉树表示法</strong></h2><p>将一般树转换成二叉树来进行存储。</p>
<p><strong>设法保证每一个节点的左指针域指向它的第一个子节点，右指针域指向它的第一个兄弟节点</strong></p>
<h1 id="七、森林的存储"><a href="#七、森林的存储" class="headerlink" title="七、森林的存储"></a><p style="color:#08f">七、森林的存储</p></h1><p>将 n 棵树转换成二叉树来进行存储，具体做法跟一般树转换成二叉树相似。</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[用递归解决汉诺塔问题]]></title>
      <url>/2017/08/articles/%E7%94%A8%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>第二次接触这个问题了。</p>
<a id="more"></a>
<h1 id="什么是汉诺塔问题？"><a href="#什么是汉诺塔问题？" class="headerlink" title="什么是汉诺塔问题？"></a><p style="color:#08f">什么是汉诺塔问题？</p></h1><blockquote>
<p>汉诺塔 是根据一个传说形成的数学问题：</p>
</blockquote>
<blockquote>
<p>有三根杆子A，B，C。A杆上有N个(N&gt;1)穿孔圆盘，盘的尺寸由下到上依次变小。要求按下列规则将所有圆盘移至C杆：</p>
<ol>
<li>每次只能移动一个圆盘；</li>
<li>大盘不能叠在小盘上面。</li>
</ol>
</blockquote>
<blockquote>
<p>提示：可将圆盘临时置于B杆，也可将从A杆移出的圆盘重新移回A杆，但都必须遵循上述两条规则。</p>
</blockquote>
<blockquote>
<p>问：如何移？最少要移动多少次？</p>
</blockquote>
<h1 id="什么是递归？"><a href="#什么是递归？" class="headerlink" title="什么是递归？"></a><p style="color:#08f">什么是递归？</p></h1><p>以我的理解就是，一个函数直接或间接地调用本身。</p>
<h2 id="递归的理解"><a href="#递归的理解" class="headerlink" title="递归的理解"></a><strong>递归的理解</strong></h2><p>一个函数调用本身似乎有些难以理解，但函数调用的本质就是在栈顶分配内存，执行相应的操作（姑且这么理解，不知道对错）。</p>
<p>所以对于计算机来说，不管你调用谁。既然你要调用，我就在栈顶分配一块内存给你，执行完毕之后就释放栈顶的这块内存。</p>
<p><strong>也就是说，函数 A 调用函数 B ，和函数 A 调用函数 A 在计算机看来是一样的</strong></p>
<p>这样就引发了一个问题，无限的递归调用，对不断的分配空间，导致内存不够，空间复杂度也很大，所以 C 语言中递归一定次数后就会终止程序。</p>
<h2 id="递归的写法"><a href="#递归的写法" class="headerlink" title="递归的写法"></a><strong>递归的写法</strong></h2><p>上面已经说过，不能无限的递归下去，所以必须要有<strong>停止的条件</strong>。</p>
<p>用一个简单的例子来说明:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(num &lt;= <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> num*fun(num<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是求阶层的一个函数，当 num 小于等于 1 的时候就返回 1 ，否则就返回 num 乘以 num-1 的阶层。所以说，num 小于等于 1 就是递归<strong>停止的条件</strong>。</p>
<h1 id="如何解决汉诺塔问题"><a href="#如何解决汉诺塔问题" class="headerlink" title="如何解决汉诺塔问题"></a><p style="color:#08f">如何解决汉诺塔问题</p></h1><p>第一次在书上看到这个问题的时候，我就不知道这个怎么移动，题目我都看不太懂。</p>
<p>即便是现在我也说不出四个以上的圆盘该怎么移动，不过正着想不出，倒过来就行了。</p>
<h2 id="逆向思维"><a href="#逆向思维" class="headerlink" title="逆向思维"></a><b>逆向思维</b></h2><ul>
<li>将 N 个圆盘从 A 移动到 C ，只要先将 N-1 个从 A 移动到 B ，然后将最下面这个从 A 移动到 C 即可。</li>
<li>而解决 N-1 个圆盘，只要解决 N-2 个圆盘…</li>
<li>一直到要解决 1 个圆盘的时候，直接移动就好了。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个函数的作用就是：将 num 个盘子从 A 借助 B 转移到 C</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hannuota</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	如果要移动的只是一个盘子，直接将盘子从 A 移动到 C 。</span><br><span class="line">	<span class="comment">//用 printf 表示</span></span><br><span class="line"></span><br><span class="line">	如果不止一个盘子，先把 N<span class="number">-1</span> 个盘子从 A 移动到 B 。</span><br><span class="line">	<span class="comment">//hannuota(num-1, A, C, B);</span></span><br><span class="line">	然后在将第 N 个盘子从 A 移动到 C 。</span><br><span class="line">	<span class="comment">//用 printf 表示</span></span><br><span class="line">	上面只是把最下面这个圆盘移动到 C ,还需要把剩下的也移动到 C</span><br><span class="line">	此时盘子在 B 杆上，所以接下来是将 N<span class="number">-1</span> 个圆盘从 B 移动到 C 。</span><br><span class="line">	<span class="comment">//hannuota(num-1, B, A, C);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决问题的前提"><a href="#解决问题的前提" class="headerlink" title="解决问题的前提"></a><strong>解决问题的前提</strong></h2><ul>
<li>A 杆上面的 N-1 个圆盘可以借助 C 杆移动到 B 杆（同理，B 杆的圆盘也可以借助 C 杆移动到 A 杆）。</li>
<li>当 C 杆放的是大盘子，而要转移的是小盘子的时候，可以把它看成是空杆子。</li>
</ul>
<h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a><strong>具体代码</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hannuota</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(num == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d 号盘子从 %c 移动到 %c 。\n"</span>, <span class="number">1</span>, A, C);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		hannuota(num<span class="number">-1</span>, A, C, B);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d 号盘子从 %c 移动到 %c 。\n"</span>, num, A, C);</span><br><span class="line"></span><br><span class="line">		hannuota(num<span class="number">-1</span>, B, A, C);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入圆盘个数：\n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">	hannuota(num, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a><b>运行结果</b></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">请输入圆盘个数：</span><br><span class="line">3</span><br><span class="line">1 号盘子从 A 移动到 C 。</span><br><span class="line">2 号盘子从 A 移动到 B 。</span><br><span class="line">1 号盘子从 C 移动到 B 。</span><br><span class="line">3 号盘子从 A 移动到 C 。</span><br><span class="line">1 号盘子从 B 移动到 A 。</span><br><span class="line">2 号盘子从 B 移动到 C 。</span><br><span class="line">1 号盘子从 A 移动到 C 。</span><br><span class="line">Press any key to continue</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><p style="color:#08f">总结</p></h1><ol>
<li>这个问题采用的就是<strong>分而治之</strong>的方法，也就是解决一个问题，先解决一个更简单的问题。</li>
<li>有一些复杂的问题，只有通过递归才可以比较简单地实现。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[17-8-17-日记]]></title>
      <url>/2017/08/articles/17-8-17-%E6%97%A5%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>突然想写一篇日记。<br><a id="more"></a></p>
<p>还有十几天就开学了，从小到大都不喜欢去学校。唉我这个人总是想着一件不好的事，然后压在心头，搞得自己不开心。</p>
<p>前几天每天做一遍 C 语言的模拟题，今天懒得做了，如果考试不通过只能说是命了。</p>
<p>昨天玩了四个多小时的游戏，其实我现在还是想玩… 不过又觉得浪费时间。</p>
<p>开学是迟早的事，为了在开学的时候不那么悲伤，在开学之前我得争取多学一些知识，哪怕只是给自己一点自我安慰，还有多去奶奶家坐坐。</p>
<p><strong>这个暑假本以为我可以学到很多东西，实际上并没有。说实话我有些恐慌，我看不进书，又懒去总结知识，时间就这么荒废。</strong>令我伤心的一件事是我连《编码》这本书都看不下去，或者是说看不太懂。这本大家都说简单的书，我很绝望。</p>
<p>明明知道我有很多事情应该去做的，但是并没有去做，是拖延吗？床上的这本《自控力》我都懒得翻看了。也许是我忘记了曾经的感受了，现实的残酷没能狠狠地刺痛我的心。</p>
<p>我的作息也不正常，我睡觉的时间并不是很晚，可是白天就是很困，今早吃完饭看数据结构的视频，看了没多久就睡着了，可能是我太缺少运动了。</p>
<p>去到学校感觉会更加糟糕，在宿舍写日记的话我觉得不自在。</p>
<p>刚才看了一篇回答，说的是一个人如何自学计算机专业进入大公司的，看完我没有被激励到，反而觉得自己做不到。为什么做不到呢？是啊，为什么我做不到呢，不就是看书、敲代码吗。<strong>这件事的确很难，不然我也早就做到了，很多次我以为自己已将掌握了敲门，已经可以认真学习了，剩下的就是时间问题了，结果过了几天就恢复原状了。</strong></p>
<blockquote>
<p>假如我要向他一样学习</p>
<ul>
<li>第一个问题：<em>遇到不懂的知识我坚持不下去。</em></li>
<li>第二个问题：<em>我也做不到他那么自律，无论是因为环境还是自身原因。</em></li>
<li>第三个问题：<em>我也没有动力一直支持我坚持下去。</em></li>
</ul>
</blockquote>
<p><strong>如果我想毕业以后找到工作，必须是要很努力的。</strong></p>
<p>难道我要每天反问自己：我配得上我想要的生活了吗？</p>
<p><strong>How to do?</strong></p>
<blockquote>
<ul>
<li>遇到不懂的可以先看更基础的东西，可以谷歌，可以问别人。</li>
<li>我可以每天做计划，每天告诉自己现实多残酷。</li>
<li>每学到新知识我都可以记下来，也算是一种动力。</li>
</ul>
</blockquote>
<p>我他妈的肯定是没有真正体会到现实的残酷，不然肯定不会这么懒惰。</p>
<p>我对美好的生活的渴望还是不够强烈啊。</p>
<p>在网上看到名校毕业生找不到工作，我也有些害怕，我没有别人聪明，如果接下去两年也没有别人努力，岂不是死路一条。</p>
<p>更让我感到绝望的是，我并不清楚哪条路是合适我的。</p>
<p>我有时有了目标，但遇到困难就退缩。</p>
<p>路是对的，错在没有坚持下去，没有让新的、难的知识进入脑子里。</p>
<p>别怕，还有两年。</p>
<p>别放松，现实非常残酷。</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[二级 C 模拟题笔记（四）]]></title>
      <url>/2017/08/articles/%E4%BA%8C%E7%BA%A7C%E6%A8%A1%E6%8B%9F%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>85，要是考试有这么简单就好了…<br><a id="more"></a></p>
<ul>
<li><p>计算顺序类型<br>a+=a-=a*a<br>先算 a*a=9，然后 a-=9，a 就等于 -6。<br><strong>注意这里 a 等于 -6 了！！！</strong></p>
</li>
<li><p>若有以下程序段<br>char str[4][12]={ “aa”,”bbb”,”ccccc”,”d” } , *strp[4];<br>int i;<br>for( i = 0; i&lt; 4; i++ ) strp[i] = str[i];<br>不能正确引用字符串的选项是<br>A) str[0]<br>B) strp<br>C) strp[3]<br>D) *strp<br><strong>注意看它们是不是指向字符数组</strong></p>
</li>
<li><p>字符指针传值问题<br>虽然实参是个指针，但形参也是个指针，相当于创建一个新的指针变量，然后它的值是和实参一样，改变它的值不会改变原来字符串。</p>
</li>
</ul>
<blockquote>
<p>第五次 78 分</p>
</blockquote>
<ul>
<li>对分查找（折半查找）</li>
</ul>
<ol>
<li>必须用顺序存储</li>
<li>线性表是有序表</li>
</ol>
<ul>
<li><p>最坏情况下的排序<br>最坏情况下，堆排序的时间复杂度为O(nlog2n)，比冒泡，快速，直接插入的时间复杂度都小</p>
</li>
<li><p>常用的扩充运算<br>有交、除、连接及自然连接等。并：RS是将S中的记录追加到R后面。差：R-S结果是属于R但不属于S的记录组成的集合。交：RS结果是既属于R又属于S的记录组成的集合。自然连接：去掉重复属性的等值连接。</p>
</li>
<li><p>变量名<br>预定义标识符是系统已经有过定义的标识符，用户可以重新定义。变量名没有长度限制，但不可以超过编译器可以辨识的范围</p>
</li>
<li><p>强制转换类型<br>(int)1.99*3 是先转换后乘</p>
</li>
<li><p>指针</p>
</li>
</ul>
<ol>
<li>指针变量所占的字节都是一样的</li>
<li>指针变量还隐含着这个变量的类型信息，所以不能随意把一个地址存放到任何一个指针变量中去</li>
</ol>
<ul>
<li><p>静态变量<br>虽然静态变量只赋一次初值，不是在定义语句那里的话，不算赋初值。</p>
</li>
<li><p>递归<br><strong>先递归完再执行下一句，类似于倒过来</strong></p>
</li>
<li><p>坑爹的字符串<br>全是字母，突然一个是个很小的点.</p>
</li>
<li><p>结构体做参数<br>虽然不是发送指针给函数，但是结构体里面有个字符数组，发过去之后是会被修改的。</p>
</li>
<li><p>文件<br><strong>文件还是得看啊</strong></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[二级 C 模拟题笔记（三）]]></title>
      <url>/2017/08/articles/%E4%BA%8C%E7%BA%A7C%E6%A8%A1%E6%8B%9F%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>今天 44 分，再做下去就没分了…<br><a id="more"></a></p>
<ul>
<li><p>运算顺序<br>a<em>=16 +(b++) - (++c);<br>可转化为：a=a</em>(16+b-(c+1));b=b+1;</p>
</li>
<li><p>标准化指数形式<br>数值部分是一个小数，小数点前的数字是 0，小数点后一个数字不是 0。指数部分不能为小数或空。</p>
</li>
<li><p>合法赋值问题<br>表达式只能是右值，常量只能是左值。</p>
</li>
<li><p>计算某个类型数据<br>比如 char : sizeof(char)，或者是放一个 char 的变量</p>
</li>
<li><p>完全不会的题目</p>
</li>
</ul>
<ol>
<li>树</li>
<li>位运算</li>
<li>不知道是什么鬼的题目</li>
<li>文件那章也不会</li>
</ol>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[二级 C 模拟题笔记	（二）]]></title>
      <url>/2017/08/articles/%E4%BA%8C%E7%BA%A7C%E6%A8%A1%E6%8B%9F%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>比昨天少了 3 分，每天退步一点点…<br><a id="more"></a></p>
<ul>
<li>二叉树性质 3<blockquote>
<p>叶子结点是度为 0 的结点，相当于一棵树的叶子，没有下一级了。<br>度为 0 的叶子结点总是比度为 2 的结点多一个。</p>
</blockquote>
</li>
<li>数据库系统的三级模型</li>
</ul>
<ol>
<li>概念模式是数据库系统中全局数据逻辑结构的描述，是全体用户公共数据视图</li>
<li>外模式也称子模式或用户模式，它是用户的数据视图，给出了每个用户的局部数据描述</li>
<li>内模式又称物理模式，它给出了数据库物理存储结构与物理存取方法</li>
</ol>
<ul>
<li>软件危机</li>
</ul>
<ol>
<li>软件需求的增长得不到满足</li>
<li>软件开发成本和进度无法控制</li>
<li>软件质量难以保证</li>
<li>软件不可维护或维护程度非常低</li>
<li>软件的成本不断提高</li>
<li>软件开发生产率的提高赶不上硬件的发展和应用需求的增长</li>
</ol>
<ul>
<li>需求分析阶段的任务</li>
</ul>
<ol>
<li>需求获取</li>
<li>需求分析</li>
<li>编写需求规格说明书</li>
<li>需求评审</li>
</ol>
<ul>
<li><p>模块化思想<br>采用自顶向下，逐步细化</p>
</li>
<li><p>合法的数值常量</p>
</li>
</ul>
<ol>
<li>8.0E0.5 是错的，因为 E 后面只能是整型数据</li>
<li>1e1 是对的</li>
<li>011 是八进制数</li>
<li>0xabcd 是十六进制常数</li>
</ol>
<ul>
<li>C语言数据类型</li>
</ul>
<ol>
<li><strong>C语言中没有逻辑类型</strong></li>
<li>整型数据表示的自然数是准确无误的</li>
</ol>
<ul>
<li><p>%8.6f 的含义<br>意思是这个变量输出宽度为 8（包括小数点），小数点后面保留 6 位小数，且右对齐。</p>
</li>
<li><p>函数指针问题</p>
<blockquote>
<p>回学校再看……</p>
</blockquote>
</li>
<li><p>数组定义<br>中括号内可以是数字，常量表达式，不可以是变量</p>
</li>
<li><p>strlen()函数注意事项<br>这个是返回字符串长度的，而不返回字符串所占内存的。<br>即使字符数组有 10 个元素，也是返回字符个数，<strong>而且 \0 不算数</strong>。<br>\\ 是转义字符，代表一个字符</p>
</li>
<li><p>C语言中的变量</p>
<ol>
<li>自动变量未赋值时为随机值</li>
<li>复合语句内可以定义变量</li>
<li>静态变量只在第一次调用是赋值</li>
<li>函数形参不可以说明为 static 变量</li>
</ol>
</li>
<li><p>文件操作问题</p>
<ol>
<li>以  “w” 方式打开的文件，只能读不能写。</li>
</ol>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[二级 C 模拟题笔记	（一）]]></title>
      <url>/2017/08/articles/%E4%BA%8C%E7%BA%A7C%E6%A8%A1%E6%8B%9F%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>我可能学了假的 C 语言…<br><a id="more"></a></p>
<ul>
<li>软件生命周期</li>
</ul>
<ol>
<li>软件定义：问题定义、可行性研究、需求分析</li>
<li>软件开发：概要设计、详细设计、实现、测试</li>
<li>运行维护期：运行维护</li>
</ol>
<ul>
<li><p>扇出<br>一个模块直接调用的其他模块</p>
</li>
<li><p>数据模型</p>
</li>
</ul>
<ol>
<li>概念数据模型：对客观世界复杂事物的描述及对它们内在联系的刻画</li>
<li>逻辑数据模型：数据库系统一级的实现</li>
<li>物理数据模型：面向计算机物理实现的模型</li>
</ol>
<ul>
<li><p>a+=a-=a*a<br>赋值运算结合性为自右向左，a+=a-=a*a相当于a=a-a*a,a=a+a；自右向左计算过程为a=a-a*a=-132，a=a+a=-264</p>
</li>
<li><p>010<br>这是用八进制表示法的</p>
</li>
<li><p>C 语言的标识符</p>
</li>
</ul>
<ol>
<li>关键字、预定义标识符、用户标识符</li>
<li>可由数字、字母、下划线组成，且不能以数字开头</li>
</ol>
<ul>
<li><p>字符问题<br>字符是以 ASCII 码保存的，给一个字符赋个数字，如果 %d 输出的话就输出 ASCII 码，但如果字符加一个数字之后，再 %c 输出的话，就是两个数字相加。不过超出 9 之后就不一定了。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c=<span class="string">'9'</span>;</span><br><span class="line">	<span class="built_in">putchar</span>(c+<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过函数交换主函数内的数值<br>这道题我错在以为 int * t 虽然没有初始化，但是后面会给它赋值。实际上这里只是分配了一块空间用于存放整型变量的地址，而这里是垃圾值。当运行到 *t=*p 的时候就会出错，无法完成交换。（答案的说法是未给指针开辟空间，难道这样还没有分配空间？）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">( <span class="keyword">int</span> *p,<span class="keyword">int</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *t;</span><br><span class="line">	*t=*p; *p=*q; *q=*t;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串复制 1<br>定义字符指针之后，如果没有赋值的话是不能用 strcpy 进行赋值的</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">10</span>],*str=<span class="built_in">string</span>;</span><br><span class="line">	<span class="comment">//char string[10],*str=string;</span></span><br><span class="line">	<span class="built_in">strcpy</span>(str,<span class="string">"HELDOL"</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="built_in">string</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串复制 2<br>一个字符串赋值给另一个，是从头开始覆盖<br>下面的程序的结果是：<br>China\0g\0</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a[]=<span class="string">"Bejing"</span>,b[]=<span class="string">"China"</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">strlen</span>(<span class="built_in">strcpy</span>(a,b)));<span class="comment">//5</span></span><br><span class="line">	<span class="built_in">puts</span>(a);<span class="comment">//China</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>EOF 含义<br>文本文件结束的标志</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[（六）Wbe服务器响应消息]]></title>
      <url>/2017/08/articles/%EF%BC%88%E5%85%AD%EF%BC%89Wbe%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>老子买那么多书，终于有一本要看完了…<br><a id="more"></a></p>
<h1 id="本章看点"><a href="#本章看点" class="headerlink" title="本章看点"></a>本章看点</h1><ul>
<li>服务器概览</li>
<li>服务器的接收操作</li>
</ul>
<h1 id="一、服务器概览"><a href="#一、服务器概览" class="headerlink" title="一、服务器概览"></a>一、服务器概览</h1><h2 id="客户端和服务器的区别"><a href="#客户端和服务器的区别" class="headerlink" title="客户端和服务器的区别"></a>客户端和服务器的区别</h2><ul>
<li>用途不同</li>
<li>网络部分（网卡、协议栈等）相同</li>
<li>用法不同。（一个发起连接，一个等待连接，调用 Socket 库的组件也不同）</li>
<li>客户端程序和服务器程序也不同</li>
</ul>
<h2 id="服务器程序的结构"><a href="#服务器程序的结构" class="headerlink" title="服务器程序的结构"></a>服务器程序的结构</h2><p>分为两个模块，等待连接模块（a）和与客户端通信模块（b）。</p>
<ul>
<li>程序开始运行时执行 a 模块，这个模块会创建套接字，然后进入等待连接的暂停状态。</li>
<li>客户端发起连接时，a 模块会恢复运行并接受连接，然后启动 b 模块，并转交完成连接的套接字。</li>
<li>每次都会启动一个新的 b 模块，实现多任务。 </li>
</ul>
<h2 id="服务器端的套接字和端口号"><a href="#服务器端的套接字和端口号" class="headerlink" title="服务器端的套接字和端口号"></a>服务器端的套接字和端口号</h2><ul>
<li>客户端收发数据</li>
</ul>
<ol>
<li>创建套接字</li>
<li>连接</li>
<li>收发数据</li>
<li>断开连接</li>
</ol>
<ul>
<li>服务器端收发数据</li>
</ul>
<ol>
<li>创建套接字</li>
<li>将套接字设置为等待连接状态</li>
<li>接收连接</li>
<li>收发数据</li>
<li>断开连接</li>
</ol>
<p>服务器端的具体操作</p>
<ol>
<li>调用 Socket 库创建套接字</li>
<li>调用 bind 将端口号写入套接字</li>
<li>调用 listen 进入等待连接状态</li>
<li>调用 accept 来接受连接</li>
<li>连接来的时候，创建套接字副本交给与客户端通信的模块，然后继续进入等待连接状态（这里的套接字包含了客户端和服务器的 IP 地址和端口号，因为服务器的一个套接字可能会有多个客户端来连接）</li>
</ol>
<h1 id="二、服务器的接收操作"><a href="#二、服务器的接收操作" class="headerlink" title="二、服务器的接收操作"></a>二、服务器的接收操作</h1><h2 id="接收操作"><a href="#接收操作" class="headerlink" title="接收操作"></a>接收操作</h2><ol>
<li>信号到达网卡，然后将其还原成数字信号</li>
<li>FCS 校验，出错则丢弃，否则继续</li>
<li>检查 MAC 头部的 MAC 地址。和自己的不一样就丢弃，否则将数字信息放入缓冲区。（以上步骤由网卡的 MAC 模块完成）</li>
<li>检查 IP 头部，判断是否是发给自己的</li>
<li>判断网络包是否分片</li>
<li>将包转发给 TCP 或 UDP 模块（以上三步由协议栈的 IP 模块完成）</li>
</ol>
<h2 id="TCP-处理操作"><a href="#TCP-处理操作" class="headerlink" title="TCP 处理操作"></a>TCP 处理操作</h2><ol>
<li>根据发送方和接收方的 IP 地址和端口号找到对应的套接字</li>
<li>将数据块拼合起来并保存在接收缓冲区，等待应用程序调用 read 方法来读取数据</li>
<li>计算 ACK 号，并委托 IP 模块发送给客户端</li>
<li>向客户端发送断开连接的请求</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[（五）服务器端的局域网有什么玄机]]></title>
      <url>/2017/08/articles/%EF%BC%88%E4%BA%94%EF%BC%89%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E5%B1%80%E5%9F%9F%E7%BD%91%E6%9C%89%E4%BB%80%E4%B9%88%E7%8E%84%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>网络包朝着服务器前进，并通过服务器前面的防火墙、缓存服务器、负载均衡器等。<br><a id="more"></a></p>
<h1 id="本章看点"><a href="#本章看点" class="headerlink" title="本章看点"></a>本章看点</h1><ul>
<li>Web 服务器的部署地点</li>
<li>防火墙的结构和原理</li>
<li>通过多台 Web 服务器来分担负载</li>
<li>利用缓存服务器分担负载</li>
</ul>
<h1 id="一、Web-服务器的部署地点"><a href="#一、Web-服务器的部署地点" class="headerlink" title="一、Web 服务器的部署地点"></a>一、Web 服务器的部署地点</h1><ul>
<li>在公司部署，并与路由器直接连接（不推荐，IP 地址有限，而且不安全）</li>
<li>在公司部署，并通过防火墙隔离</li>
<li>部署在接入服务商数据中心</li>
</ul>
<h1 id="二、防火墙的结构和原理"><a href="#二、防火墙的结构和原理" class="headerlink" title="二、防火墙的结构和原理"></a>二、防火墙的结构和原理</h1><h2 id="防火墙的过滤规则"><a href="#防火墙的过滤规则" class="headerlink" title="防火墙的过滤规则"></a>防火墙的过滤规则</h2><ul>
<li>包过滤（主流）</li>
<li>应用层网关</li>
<li>电路层网关</li>
</ul>
<h2 id="如何设置包过滤的规则"><a href="#如何设置包过滤的规则" class="headerlink" title="如何设置包过滤的规则"></a>如何设置包过滤的规则</h2><p>网络包的头部包含了用于控制通信操作的控制信息，比如 MAC 头部，IP 头部，TCP 或者 UDP 头部等。<br>根据接收方 IP 地址、接收方端口号、发送方 IP 地址、发送方端口号、TCP 控制位可以实现包过滤。</p>
<ul>
<li>通过 IP 地址过滤不想接收的包</li>
<li>通过端口号限定应用程序（禁止互联网访问部分程序）</li>
<li>通过控制位判断连接方向（禁止服务器主动访问互联网）</li>
</ul>
<h2 id="通过防火墙"><a href="#通过防火墙" class="headerlink" title="通过防火墙"></a>通过防火墙</h2><ul>
<li>不允许包通过时，包会被丢弃并记录下来</li>
<li>允许包通过时，包就会被转发出去</li>
</ul>
<p>包过滤并不是防火墙特有的机制，只是规则复杂时，路由器难以维护这些规则，而且路由器难以对被阻止的包进行记录。</p>
<h2 id="防火墙不是绝对安全的"><a href="#防火墙不是绝对安全的" class="headerlink" title="防火墙不是绝对安全的"></a>防火墙不是绝对安全的</h2><p>防火墙无法检查包的内容，而且就算检查包的内容，也无法判断是否会对服务器产生影响，所以修复 Web 服务器的 Bug 是最重要的。</p>
<h1 id="三、通过多台-Web-服务器来分担负载"><a href="#三、通过多台-Web-服务器来分担负载" class="headerlink" title="三、通过多台 Web 服务器来分担负载"></a>三、通过多台 Web 服务器来分担负载</h1><p>当服务器的访问量上升时，提高服务器的性能仍然不能很好的解决问题，最好的方法是使用多台服务器分担负载的方法更有效。</p>
<h2 id="通过-DNS-服务器来分配"><a href="#通过-DNS-服务器来分配" class="headerlink" title="通过 DNS 服务器来分配"></a>通过 DNS 服务器来分配</h2><p>在 DNS 服务器里一个域名对应多个 IP 地址，每次返回的都是不同的，让每台服务器都分担负载。</p>
<p>问题在于，有些操作需要跨越多个网页，必须第一个页面填写用户名和密码，第二个页面填写信用卡号。这时需要在同一台服务器上完成。</p>
<h2 id="使用负载均衡器分配访问"><a href="#使用负载均衡器分配访问" class="headerlink" title="使用负载均衡器分配访问"></a>使用负载均衡器分配访问</h2><p>首先将服务器的域名和负载均衡器的 IP 地址注册到 DNS 服务器中，当客户端访问时服务器时，实际访问的是负载均衡器。</p>
<p>负载均衡器会根据服务器的负载状况来分配。当操作需要跨多个页面的时候，根据 Cookie 判断要发往哪一台服务器。</p>
<h1 id="四、使用缓存服务器分担负载"><a href="#四、使用缓存服务器分担负载" class="headerlink" title="四、使用缓存服务器分担负载"></a>四、使用缓存服务器分担负载</h1><h2 id="缓存服务器的工作过程"><a href="#缓存服务器的工作过程" class="headerlink" title="缓存服务器的工作过程"></a>缓存服务器的工作过程</h2><ul>
<li>代替 Web 服务器注册到 DNS 服务器</li>
<li>缓存服务器等待客户端的请求</li>
<li>缓存服务器检查内容是否存在</li>
<li>如果不存在，在 HTTP 头部加一个 Via 字段发送给 Web 服务器（根据规则确定要发送给谁）</li>
<li>缓存服务器收到相应内容之后会添加 Via 字段发送给客户端，并将响应消息保存到本地</li>
<li>如果存在，缓存服务器会添加一个 If-Modified-Since 字段并转发给 Web 服务器</li>
<li>Web 服务器会返回 304 Not Modified 或者更新后的内容，然后缓存服务器响应客户端</li>
</ul>
<h2 id="三种代理"><a href="#三种代理" class="headerlink" title="三种代理"></a>三种代理</h2><ul>
<li>正向代理</li>
<li>反向代理</li>
<li>透明代理</li>
</ul>
<h1 id="五、内容分发服务"><a href="#五、内容分发服务" class="headerlink" title="五、内容分发服务"></a>五、内容分发服务</h1><p>有专门的厂商部署服务器，并租借给 Web 服务器的运营者，提供内容分发服务。</p>
<p>缓存服务器可以缓存多个网站的数据，可以提供给多个 Web 服务器运营商共享。</p>
<p>当客户端进行访问时，会找到最近的缓存服务器。</p>
<p>当 Web 服务器的数据更新时，主动告知缓存服务器，而不用缓存服务器每次询问。</p>
]]></content>
      
        <categories>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[暑假余额不足 20 天！！]]></title>
      <url>/2017/08/articles/2017-8-10-810-1/</url>
      <content type="html"><![CDATA[<p>一转眼暑假就要过去了，只剩下不足 20 天的时间。<br><a id="more"></a><br>这个暑假只有从广州回来后那几天是没有浪费的，可能是在那里体会到了工作的艰辛，感受到了人与人之间的差距。</p>
<p><strong>而最近自己就知道玩手机、打游戏、睡觉，简直就是个废物！</strong></p>
<p>剩下 20 天要做的事情有：</p>
<ul>
<li>看完《网络是怎样连接的》</li>
<li>看数据结构的视频</li>
<li>看《算法图解》、《编码》</li>
<li>复习 C 语言，准备考二级</li>
<li>学习 Django 开发</li>
<li>记单词</li>
</ul>
<p>命运是掌握在自己手中的，我相信学习也是会上瘾的！</p>
]]></content>
      
        <categories>
            
            <category> 生活记录 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Django 开发的前期准备]]></title>
      <url>/2017/08/articles/Django%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
      <content type="html"><![CDATA[<p>包括虚拟环境的创建、pycharm 的安装与使用以及 Navicat 的使用</p>
<a id="more"></a>
<h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><h2 id="安装虚拟环境所需的开发包"><a href="#安装虚拟环境所需的开发包" class="headerlink" title="安装虚拟环境所需的开发包"></a>安装虚拟环境所需的开发包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure>
<h2 id="创建虚拟环境-1"><a href="#创建虚拟环境-1" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv test</span><br></pre></td></tr></table></figure>
<h2 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<h2 id="查看有哪些虚拟环境"><a href="#查看有哪些虚拟环境" class="headerlink" title="查看有哪些虚拟环境"></a>查看有哪些虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure>
<h2 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon test</span><br></pre></td></tr></table></figure>
<h2 id="虚拟环境安装开发包"><a href="#虚拟环境安装开发包" class="headerlink" title="虚拟环境安装开发包"></a>虚拟环境安装开发包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxxx</span><br></pre></td></tr></table></figure>
<h2 id="卸载开发包"><a href="#卸载开发包" class="headerlink" title="卸载开发包"></a>卸载开发包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall xxxx</span><br></pre></td></tr></table></figure>
<h2 id="查看已安装的开发包"><a href="#查看已安装的开发包" class="headerlink" title="查看已安装的开发包"></a>查看已安装的开发包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>
<h1 id="pycharm-的安装与使用"><a href="#pycharm-的安装与使用" class="headerlink" title="pycharm 的安装与使用"></a>pycharm 的安装与使用</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote>
<p>pycharm<br><a href="http://pan.baidu.com/s/1gfxi3S3" target="_blank" rel="noopener">http://pan.baidu.com/s/1gfxi3S3</a></p>
</blockquote>
<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>[文件]-&gt;[新建项目]<br><img src="\images\django\XinJianXiangMu.PNG" alt></p>
<p>（需要先安装好 Django==1.9.8）</p>
<h2 id="查看已安装的开发包-1"><a href="#查看已安装的开发包-1" class="headerlink" title="查看已安装的开发包"></a>查看已安装的开发包</h2><p>Ctrl+Alt+S 进入设置页面，搜索 inter<br><img src="\images\django\YiAnZhuang.PNG" alt></p>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>Alt+Shlft+F10 选择 Django 项目运行</p>
<h1 id="Navicat-的安装与使用"><a href="#Navicat-的安装与使用" class="headerlink" title="Navicat 的安装与使用"></a>Navicat 的安装与使用</h1><h2 id="安装-Mysql"><a href="#安装-Mysql" class="headerlink" title="安装 Mysql"></a>安装 Mysql</h2><blockquote>
<p>mysql for windows<br><a href="http://pan.baidu.com/s/1mhYBCzI" target="_blank" rel="noopener">http://pan.baidu.com/s/1mhYBCzI</a></p>
</blockquote>
<h2 id="安装-Navicat"><a href="#安装-Navicat" class="headerlink" title="安装 Navicat"></a>安装 Navicat</h2><blockquote>
<p>Navicat for MySQL 11.0.10 32+64位(内含破解补丁).rar<br><a href="http://pan.baidu.com/s/1slRWj5j" target="_blank" rel="noopener">http://pan.baidu.com/s/1slRWj5j</a></p>
</blockquote>
<h2 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h2><p>[文件]-&gt;[新建连接]-&gt;[Mysql]<br><img src="\images\django\XinJianLianJie.PNG" alt></p>
<h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><p><img src="\images\django\NewShuJuKu.PNG" alt></p>
]]></content>
      
        <categories>
            
            <category> Django </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[（四）通过接入网进入互联网内部]]></title>
      <url>/2017/08/articles/%EF%BC%88%E5%9B%9B%EF%BC%89%E9%80%9A%E8%BF%87%E6%8E%A5%E5%85%A5%E7%BD%91%E8%BF%9B%E5%85%A5%E4%BA%92%E8%81%94%E7%BD%91%E5%86%85%E9%83%A8/</url>
      <content type="html"><![CDATA[<p>本章我们将学习网络包是如何通过互联网接入路由器，最终进入互联网内部的。</p>
<a id="more"></a>
<h1 id="本章看点"><a href="#本章看点" class="headerlink" title="本章看点"></a>本章看点</h1><ul>
<li>ADSL 接入网的结构和工作方式</li>
<li>光纤接入网（FTTH）</li>
<li>接入网中使用的 PPP 和隧道</li>
<li>网络运营商的内部</li>
<li>跨越运行商的网络包</li>
</ul>
<h1 id="一、ADSL-接入网的结构和工作方式"><a href="#一、ADSL-接入网的结构和工作方式" class="headerlink" title="一、ADSL 接入网的结构和工作方式"></a>一、ADSL 接入网的结构和工作方式</h1><h2 id="什么是接入网？"><a href="#什么是接入网？" class="headerlink" title="什么是接入网？"></a>什么是接入网？</h2><p>我们讨论的是 ADSL 接入网的结构和工作方式，那么什么是接入网？<br>实际上，接入网就是用户和互联网之间的通信线路。常见的接入网方式包括：ADSL、FTTH。</p>
<h2 id="从客户端到达互联网接入路由器"><a href="#从客户端到达互联网接入路由器" class="headerlink" title="从客户端到达互联网接入路由器"></a>从客户端到达互联网接入路由器</h2><p>客户端生成的网络包先经过集线器和交换机到达互联网接入路由器，并在此从以太网包中取出 IP 包判断转发目标。互联网接入路由器会在网络包前面加上 MAC 头部，PPPoE 头部，PPP 头部总共 3 中头部，然后发送给 ADSL Modem。</p>
<h2 id="到达-ADSL-Modem（调制解调器）"><a href="#到达-ADSL-Modem（调制解调器）" class="headerlink" title="到达 ADSL Modem（调制解调器）"></a>到达 ADSL Modem（调制解调器）</h2><p>ADSL Modem 将包拆分成信元，并转换成电信号发送给分离器。</p>
<h2 id="到达分离器"><a href="#到达分离器" class="headerlink" title="到达分离器"></a>到达分离器</h2><p>当信号通过分离器发送出去的时候，电话和 ADSL 信号只是同时流到一条线路上而已，分离器并没有做什么事情。而在另一头，分离器的作用就是将电话和 ADSL 信号分离，防止它们相互干扰。</p>
<h2 id="到达电话局"><a href="#到达电话局" class="headerlink" title="到达电话局"></a>到达电话局</h2><p>到达电话局之后，会经过配线盘和分离器到达 DSLAM（相当于多个 ADSL Modem）。<br>从 DSLAM 出来以后，会到达一个叫 BAS 的包转发设备。这两个都具有 ATM 接口。到这里 BAS 的接收工作就完成了，它会丢弃 MAC 头部和 PPPoE 头部，接下来，BAS 会在包的前面加上隧道专用头部，并发送到隧道的出口。然后网络包会到达隧道出口的隧道专用路由器，在这里隧道头部会被去掉，IP 包会被取出，并转发到互联网内部。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>客户端-&gt;接入网路由器-&gt;ADSL Modem-&gt;分离器-&gt;电话电缆-&gt;配线盘-&gt;分离器-&gt;DSLAM-&gt;BAS-&gt;隧道-&gt;隧道专用路由器-&gt;互联网内部</p>
<h1 id="二、光纤接入网（FTTH）"><a href="#二、光纤接入网（FTTH）" class="headerlink" title="二、光纤接入网（FTTH）"></a>二、光纤接入网（FTTH）</h1><h2 id="光纤的基本知识"><a href="#光纤的基本知识" class="headerlink" title="光纤的基本知识"></a>光纤的基本知识</h2><p>光信号很容易表示数字信息，亮表示 1，暗表示 0。数字信息转换成电信号再转换成光信号，在接收端的光敏元件可以感光，并根据明暗产生响应的电压和电流，这些电信号会被还原成数字信号。</p>
<h2 id="单模和多模"><a href="#单模和多模" class="headerlink" title="单模和多模"></a>单模和多模</h2><p>原理我看不懂，总之多模光纤可以传导多条光线，可以降低成本，但是信号的失真会大。单模光纤反之。因此，多模光纤主要用于一座建筑物里面的连接，单模光纤用于距离较远的建筑物之间的连接。FTTH 使用的是单模光纤。</p>
<h2 id="FTTH-的两种形态"><a href="#FTTH-的两种形态" class="headerlink" title="FTTH 的两种形态"></a>FTTH 的两种形态</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><p>客户端-&gt;互联网接入路由器-&gt;光纤收发器（电信号转化成光信号）-&gt;一条光纤-&gt;多路光纤收发器（光信号转化成电信号）-&gt;BAS-&gt;互联网内部</p>
<p>这种方式下，响应包的光信号也是沿着同一条光纤传输到用户端，上行信号和下行信号会混合导致无法识别，办法是采用不同波长的光，再用棱镜原理分离。这种方式叫做<strong>波分复用</strong>。</p>
<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>客户端-&gt;互联网接入路由器-&gt;ONU-&gt;分光器-&gt;OLT-&gt;BAS-&gt;互联网内部</p>
<p>ONU 可以将电信号转化为光信号，会根据 OLT 的指令来发送数据。</p>
<p>当 OLT 发送数据给用户时，分光器会发送给所用用户，所以需要在每个包前面加上用于识别的 ONU 的信息，当 ONU 收到信号后，接收发给自己的信号，并转换成以太网信号。</p>
<p>当使用 PPPoE 来传输包时，其工作过程和 ADSL 类似。</p>
<h1 id="三、接入网中使用的-PPP-和隧道"><a href="#三、接入网中使用的-PPP-和隧道" class="headerlink" title="三、接入网中使用的 PPP 和隧道"></a>三、接入网中使用的 PPP 和隧道</h1><h2 id="BAS-和-PPPoE-协议"><a href="#BAS-和-PPPoE-协议" class="headerlink" title="BAS 和 PPPoE 协议"></a>BAS 和 PPPoE 协议</h2><p>在 ADSL 和 FTTH 接入网中，都需要连接到 BAS。BAS 实际是一个路由器，但是还具备了用户认证和配置下发的功能。BAS 使用 PPPoE 来实现登录功能，而 PPPoE 是有传统电话拨号上网使用的 PPP 协议发展而来的。</p>
<h2 id="PPP-协议具体过程"><a href="#PPP-协议具体过程" class="headerlink" title="PPP 协议具体过程"></a>PPP 协议具体过程</h2><ul>
<li>用户向运营商的接入点拨打电话</li>
<li>电话接通后输入用户名和密码进行登录</li>
<li>用户名和密码通过 RADIUS 协议从 RAS 发送到认证服务器</li>
<li>确认无误后，认证服务器会返回 IP 地址等配置信息，并将这些信息下发给用户</li>
<li>用户根据这些信息配置 IP 地址等参数，就可以发送 TCP/IP 包了<h2 id="PPP-协议是如何传输消息的"><a href="#PPP-协议是如何传输消息的" class="headerlink" title="PPP 协议是如何传输消息的"></a>PPP 协议是如何传输消息的</h2>PPP 协议中没有定义以太网中报头和 FCS 等元素，也没有定义信号的合适，所以无法将 PPP 消息转化为信号来发送。于是 PPP 在拨号接入中借用了 HDLC 协议作为容器，使得 PPP 消息可以传输。<h2 id="PPPoE-的诞生"><a href="#PPPoE-的诞生" class="headerlink" title="PPPoE 的诞生"></a>PPPoE 的诞生</h2>借助 HDLC 发送 PPP 消息只能在拨号接入中使用，ADSL 和 FTTH 并不能使用 HDLC，因此需要另一种方法来发送 PPP 消息。此外，以太网和 PPP 在设计上有所不同，为了弥补这些问题就重新设计了一个新的规格，这就是 PPPoE。</li>
</ul>
<p>PPPoE 就是将 PPP 消息装入以太网包进行传输的方式。</p>
<h2 id="通过隧道将网络包发送给运营商"><a href="#通过隧道将网络包发送给运营商" class="headerlink" title="通过隧道将网络包发送给运营商"></a>通过隧道将网络包发送给运营商</h2><p>BAS 除了具有用户认证和下发配置的功能以外，还可以使用隧道方式来传输网络包。</p>
<p>所谓隧道，就类似于套接字之间建立的 TCP 连接，从一侧发送数据，数据会从另一侧原封不动地出来。</p>
<p>隧道的实现除了 TCP 连接之外，还有基于封装的隧道实现方法。</p>
<h2 id="接入网的整体工作过程"><a href="#接入网的整体工作过程" class="headerlink" title="接入网的整体工作过程"></a>接入网的整体工作过程</h2><ul>
<li>接入路由器根据 PPPoE 的发现机制来寻找 BAS，这一机制和 ARP 一样基于广播来实现</li>
<li>得到 BAS 的 MAC 地址之后，就可以和 BAS 进行通信</li>
<li>用户端发送用户名和密码</li>
<li>BAS 发送 IP 地址，DNS 服务器的 IP 地址，默认网关的 IP 地址给用户</li>
<li>发送网络包时，路由器不是按照以太网的规则转发，而是按照 PPPoE 规则转发。<br>[MAC 头部]-[PPPoE 头部]-[PPP 头部]-[IP 头部]-[TCP 头部]-[数据]</li>
<li>BAS 收到用户路由器发送的网络包之后，会去掉 MAC 头部和 PPPoE 头部，然后用隧道机制将包发送给网络运营商的路由器<h2 id="除-PPPoE-之外的其他方式"><a href="#除-PPPoE-之外的其他方式" class="headerlink" title="除 PPPoE 之外的其他方式"></a>除 PPPoE 之外的其他方式</h2>PPPoA 方式不添加 MAC 头部和 PPPoE 头部，而是直接将包装入信元中。<br>还有一种 DHCP 方式，它不使用 PPP，而是将以太网包直接转换成 ADSL 信号发送给 DSLAM。</li>
</ul>
<h1 id="四、网络运营商的内部"><a href="#四、网络运营商的内部" class="headerlink" title="四、网络运营商的内部"></a>四、网络运营商的内部</h1><h2 id="POP-和-NOC"><a href="#POP-和-NOC" class="headerlink" title="POP 和 NOC"></a>POP 和 NOC</h2><p>POP 是接入网与运营商相连的设备。<br>NOC 是运营商的核心设备。<br>他们都是路由器。</p>
<h2 id="室外通信线路的连接"><a href="#室外通信线路的连接" class="headerlink" title="室外通信线路的连接"></a>室外通信线路的连接</h2><p>室内的可以用线路直接相连，对于距离较远的 NOC 和 POP 来说，它们之间的连接方式可以分为几种：</p>
<ul>
<li>自己拥有光纤，可以直接将 NOC 和 POP 连接起来</li>
<li>没有光纤的运营商可以租借其他运营商的通信线路（光纤可以复用）</li>
</ul>
<h1 id="五、跨越运营商的网络包"><a href="#五、跨越运营商的网络包" class="headerlink" title="五、跨越运营商的网络包"></a>五、跨越运营商的网络包</h1><h2 id="网络包的传递"><a href="#网络包的传递" class="headerlink" title="网络包的传递"></a>网络包的传递</h2><p>到达 POP 路由器之后，根据路由表可以知道下一站发往哪里，可能是 POP 也可能使 NOC，可能会发送到另一个运营商，总之会到达目的地。</p>
<h2 id="运营商之间的路由信息交换"><a href="#运营商之间的路由信息交换" class="headerlink" title="运营商之间的路由信息交换"></a>运营商之间的路由信息交换</h2><p>运营商交换路由信息的方法是让相连的路由器相互告知路由信息就可以了。交换路由信息的过程是有路由器自动完成的，这里使用的机制称为 BGP（Border Gateway  Protocol 边界网关协议）</p>
<h2 id="运营商信息交换的特点"><a href="#运营商信息交换的特点" class="headerlink" title="运营商信息交换的特点"></a>运营商信息交换的特点</h2><p>运营商拥有一条线路，如果与所有路由器进行信息交换，那它们都可以使用这条线路了。实际上运营商之间的路由交换是在特定的路由器之间一对一进行的，这样一来，没交费的运营商就不能发送网络包过来了。</p>
<h2 id="IX-的必要性（Internet-eXchange-互联网交换中心）"><a href="#IX-的必要性（Internet-eXchange-互联网交换中心）" class="headerlink" title="IX 的必要性（Internet eXchange 互联网交换中心）"></a>IX 的必要性（Internet eXchange 互联网交换中心）</h2><p>没有 IX 的情况下，每个运营商都要相互连接。有 IX 的情况下，每个运营商只要和 IX 相连就可以了。</p>
<p>IX 的实体是高性能交换机</p>
]]></content>
      
        <categories>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[（三）从网线到网络设备]]></title>
      <url>/2017/07/articles/2017-7-24-724-1/</url>
      <content type="html"><![CDATA[<!--
好几天没看书了，有点懒，今天去锄地回来看了看《自控力》，然后迷迷糊糊的睡着了。<br/>
现在是 2017年7月24日 15:54:59，先看十分钟，十分钟过后不想看就不看了。<br/><br/>
-->
<h1 id="本章内容"><a href="#本章内容" class="headerlink" title="本章内容"></a>本章内容</h1><ul>
<li><strong>信号在网线和集线器中传输。</strong>信号从计算机到达集线器，这过程中信号可能减弱，还会受到噪声干扰而失真，那么如何抑制这些影响呢？<a id="more"></a></li>
<li><strong>交换机的包转发操作。</strong>交换机不是简单的让信号流过，而是先接收信号并将其还原为数字信息，然后再重新转换成信号并发送出去的过程。</li>
<li><strong>路由器的包转发操作。</strong>路由器和交换机有些相似，但是交换机是基于以太网规格工作的设备（什么是以太网规格？），而路由器是基于 IP 工作的。</li>
<li><strong>路由器的附加功能。</strong>例如将私有地址转换成共有地址，以及过滤危险包的功能。<h1 id="一、信号在网线和集线器中传输"><a href="#一、信号在网线和集线器中传输" class="headerlink" title="一、信号在网线和集线器中传输"></a>一、信号在网线和集线器中传输</h1></li>
</ul>
<h2 id="每个包都是独立传输的。"><a href="#每个包都是独立传输的。" class="headerlink" title="每个包都是独立传输的。"></a>每个包都是独立传输的。</h2><p>当 IP 模块将数据分成一个个小包之后，在传输的过程中它们就没有关系了。如同快递员只送快递不管里面的东西一样，转发设备也不管包里面的数据，这可能是一个确认包，也可能是一个数据包，但都无所谓，转发设备都不在乎，它只在乎发到哪里而已。</p>
<h2 id="防止网线中的信号减弱很重要"><a href="#防止网线中的信号减弱很重要" class="headerlink" title="防止网线中的信号减弱很重要"></a>防止网线中的信号减弱很重要</h2><p>网卡中的 PHY(MAU) （这个是负责收发信号的模块，可能有其他名字的模块）模块负责将包转换成电信号，信号通过 RJ-45 接口进入双绞线，（信号通过接口的 1 号和 2 号 针脚流入网线）。然后信号通过网线到达集线器的接口。<br><br><br>这个过程只是单纯的传输电信号，但是到达集线器的时候信号可能就不是原来的样子。原来波形是方形的，后来就变成波形了。<br><br><br>即使线路很好，没有噪声，信号传输的过程中仍然会发生失真，加上噪声就更加严重了，从而导致了通信错误。</p>
<h2 id="双绞线是为了抑制噪声"><a href="#双绞线是为了抑制噪声" class="headerlink" title="双绞线是为了抑制噪声"></a>双绞线是为了抑制噪声</h2><p>产生噪声的原因是电磁波。影响信号的电磁波分为两种：</p>
<ul>
<li>网线之外的其他设备产生的电磁波</li>
<li>网线中相邻信号线产生的电磁波</li>
</ul>
<p>减少噪声影响的方法就是使用双绞线，具体什么原理我也不懂，毕竟我是物理 4 分的男人。<br><br><br>双绞线分为五种，有五类，超五类，六类，超六类，七类。<br><br><br>还有其他减少噪声的方法，比如在信号线之间加入隔板，在外面包裹金属屏障网等。</p>
<h2 id="集线器将信号发往所有线路"><a href="#集线器将信号发往所有线路" class="headerlink" title="集线器将信号发往所有线路"></a>集线器将信号发往所有线路</h2><p>集线器有很多个接口，接口后面是 PHY(MAU) 模块，为了正常接收信号，必须交叉连起来（？）。<br><br><br>集线器的接口有一个 MDI/MDI-X 切换开关。一般是使用 MDI-X 模式，当要连接另一台集线器的时候，就要切换成 MDI 模式，此时 PHY(MAU) 是直接连接的。（这里又不懂为什么）<br><br><br>如果没有切换开关，可以用交叉网线连接两台服务器。交叉网线也可以连接两台计算机。<br><br><br>下面再来看看信号怎么走：<br><br><br>信号到达 PHY(MAU) 模块之后会进入中继电路，中继电路会将信号发送到除了发送端口以外的所有端口。信号从端口流出，到达所有连接在集线器上的设备，这些设备会根据 MAC 头部的 MAC 地址判断是不是发给自己的，不是的话就丢弃。（客户端、服务器、路由器在此情况下都会丢弃，但交换机不会）。</p>
<!--现在是 2017年7月24日 17:01:53，真的不止十分钟啊-->
<h1 id="二、交换机的包转发操作"><a href="#二、交换机的包转发操作" class="headerlink" title="二、交换机的包转发操作"></a>二、交换机的包转发操作</h1><h2 id="交换机根据地址表进行转发"><a href="#交换机根据地址表进行转发" class="headerlink" title="交换机根据地址表进行转发"></a>交换机根据地址表进行转发</h2><ul>
<li>信号进入交换机接口后，由 PHY(MAU) 模块接收。（接口与 PHY(MAU) 也是以 MDI-X 模式连接的）。接下来 PHY(MAU) 模块会将信号转换为通用格式交给 MAC 模块，MAC 模块会将信号转换为数字信息，并进行 FCS 校验，如果没问题就存放到缓冲区，否则就丢弃。（这里跟网卡的工作方式相似，但是这里的 MAC 模块是没有 IP 地址的）</li>
<li>将包存放到缓冲区之后，接下来就会在 MAC 地址表里面查询接收方的 MAC 地址了。表中的 MAC 地址跟接口号对应，找到之后就可以发送到对应端口了。</li>
<li>缓冲区到端口之间是交换电路，交换机因此得名的，但有些已经不用交换电路了。交换电路是类似于表格，可以同时传输多路信号。在半双工模式下，从端口发送出去之前还需要检测线路中是否有信号在传输，避免发生信号碰撞。</li>
</ul>
<h2 id="MAC-地址表的维护"><a href="#MAC-地址表的维护" class="headerlink" title="MAC 地址表的维护"></a>MAC 地址表的维护</h2><p>维护包括添加记录和删除记录</p>
<ul>
<li>当收到包时，将发送方的 MAC 地址和其输入端口号写入 MAC 地址表中。以后要发往这个地址的包，交换机就能转发到正确的端口了。</li>
<li>比如一台笔记本的位置移动之后，原来的记录已经不对了。如果笔记本发送包到交换机，交换机就会更新 MAC 地址表，这样就不用进行特殊的操作。除此之外，每隔几分钟交换机都会删除原来的数据。</li>
</ul>
<h2 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h2><ul>
<li>当目的端口和源端口一样时，交换机会直接丢弃这个包，否则就会目的主机就会收到两个相同的包。</li>
<li>当 MAC 地址表没有接收方 MAC 地址的时候，就会将包转发到除了源端口以外的所有端口上。</li>
</ul>
<h2 id="全双工模式"><a href="#全双工模式" class="headerlink" title="全双工模式"></a>全双工模式</h2><p>全双工模式是交换机特有的工作模式，集线器是没有的。当多台计算机同时发送信号时，信号会在集线器内部混杂在一起，发生碰撞而无法使用。不过，只要不使用集线器就不会发生碰撞。交换机端口和 PHY(MAU) 模块以及 MAC 模块和接收电路都是独立的，所以信号不会发生碰撞。</p>
<h2 id="自动协商"><a href="#自动协商" class="headerlink" title="自动协商"></a>自动协商</h2><p>随着全双工模式的出现，如何在两种模式之间进行切换的问题也随之产生。开始需要手动切换，后来出现了自动切换 工作模式的功能。通过这一功能，可以由相互连接的双方探测对方是否支持全双工模式，以及检测对方的传输速率，并自动切换。检测的方式是通过脉冲信号的方式。</p>
<h2 id="交换机可同时执行多个转发操作"><a href="#交换机可同时执行多个转发操作" class="headerlink" title="交换机可同时执行多个转发操作"></a>交换机可同时执行多个转发操作</h2><p>包要发送到某个端口，其他空闲端口都可以传输其他的包，因此交换机可以同时转发多个包。</p>
<!--大概有十天没有看书了，一半是因为没时间，一半是因为太懒了。真的不能这样下去了，不然暑假真的就废了，现在得先进入状态。-->
<h1 id="三、路由器的包转发操作"><a href="#三、路由器的包转发操作" class="headerlink" title="三、路由器的包转发操作"></a>三、路由器的包转发操作</h1><p>首先要了解<strong>路由器的基本知识、路由表中的信息</strong>，然后是<strong>包的收发以及中间的步骤</strong>，最后是<strong>交换机和路由器的关系</strong>。</p>
<h2 id="路由器的基本知识"><a href="#路由器的基本知识" class="headerlink" title="路由器的基本知识"></a>路由器的基本知识</h2><p>路由器也是通过查表判断包转发的目标。最简化来看，路由器包括两个部分，分别是转发模块和端口模块，转发模块类似于 IP 模块，端口模块类似于网卡。首先端口模块将发过来的包接收进来，这里具体的工作过程取决于端口的通信技术。然后转发模块会根据包的 IP 头部中接收方的 IP 地址在表中查询，判断转发目标，然后委托转发目标对应的端口发送出去。<br><br><br>路由器的各个端口都具有 MAC 地址和 IP 地址，都可以称为网络中的发送方或者接收方。</p>
<h2 id="路由表中的信息"><a href="#路由表中的信息" class="headerlink" title="路由表中的信息"></a>路由表中的信息</h2><p>交换机是通过 MAC 地址判断端口，而路由器是通过 IP 头部中的 IP 地址判断发往哪里。路由表中有目标地址、子网掩码，将这两项和 IP 地址相匹配，找到匹配项之后，就交给接口列中的指定的网络接口，并转发到网关列中指定的 IP 地址。路由表共有 5 列，最后一列是跃点计数，表示距离目标 IP 地址的距离是远还是近。<br><br><br>路由表的维护方法有两种：</p>
<ul>
<li>由人手动维护路由记录</li>
<li>根据路由协议机制，通过路由器之间的信息交换由路由器自行维护路由表的记录。（路由协议包括 RIP、OSPC、BGP）</li>
</ul>
<h2 id="路由器接收网络包"><a href="#路由器接收网络包" class="headerlink" title="路由器接收网络包"></a>路由器接收网络包</h2><p>这里说的是以太网端口是如何接收包的。信号到达网线接口部分， PHY(MAU) 模块将信号转换为数字信息，然后通过包末尾的 FCS 进行错误校验。如果没问题就检查 MAC 头部中 MAC 地址，如果是发给自己的包就放到接收缓冲区，否则丢弃。（路由器的端口都具有 MAC 地址）</p>
<h2 id="查询路由器确定输出端口"><a href="#查询路由器确定输出端口" class="headerlink" title="查询路由器确定输出端口"></a>查询路由器确定输出端口</h2><p>接收操作完成之后就会丢弃 MAC 头部，因为这个头部的目的就是到达当前路由器，所以它已经没有用了。<br><br><br>路由表中目标地址和子网掩码匹配出 N 个网络号，然后与 IP 头部中的 IP 地址进行比对，如果相同就是候选转发目标之一。如果有多个候选转发目标，就选择网络号最长的一项，因为网络号长就说明主机号短，即子网中的主机数量相对较少，这样可以尽量缩小范围，使转发目标更加准确。这一规则称为“最长匹配”原则。<br><br><br>如果网络号长度相等，那么就选择跃点计数最小的记录。<br><br><br>如果路由表无法找到匹配的记录，路由器就会丢弃这个包，并发送 ICMP 消息告知发送方。与交换机不同，路由器连接的设备非常多，不能转发到所有端口。</p>
<h2 id="找不到匹配路由是选择默认路由"><a href="#找不到匹配路由是选择默认路由" class="headerlink" title="找不到匹配路由是选择默认路由"></a>找不到匹配路由是选择默认路由</h2><p>路由表中有一行子网掩码是 0.0.0.0，也就是说目标地址和 IP 地址需要匹配的位数为 0，也就是说不用匹配。这样一来，找不到匹配路由的包就可以通过默认路由对应的默认网关发送出去了。如果存在匹配路由，根据最长匹配原则，是不会通过默认路由发送的。</p>
<h2 id="包的有效期"><a href="#包的有效期" class="headerlink" title="包的有效期"></a>包的有效期</h2><p>网络包找到转发目标之后，就转交给输出端口，再次之前还需要更新 IP 头部中的 TTL （生存时间），每经过一个路由器这个的就会减一，当这个值为 0 的时候就要被丢弃，这样是为了防止包在一个地方陷入死循环。一般 TTL 设置为 64 或者 128。</p>
<h2 id="通过分片功能拆分大网络包"><a href="#通过分片功能拆分大网络包" class="headerlink" title="通过分片功能拆分大网络包"></a>通过分片功能拆分大网络包</h2><p>当包的长度大于输出端口的 MTU 的时候（用最大包长度减去头部的长度得出 MTU）就需要分片。在此之前需要看一下 IP 头部中的标志字段，确认是否可以分片。进行拆分的是数据部分和 TCP 头部，每一个拆分好的数据都加上 MAC 头部和 IP 头部。</p>
<h2 id="路由器的发送操作"><a href="#路由器的发送操作" class="headerlink" title="路由器的发送操作"></a>路由器的发送操作</h2><p>这一步取决于输出端口的类型，以太网端口就将包转换成电信号发送出去，其他类型的有不同的规则。发送是要加上 IP 头部，MAC 头部，设置一些字段，然后转换成电信号发送出去。</p>
<p>为了判断 MAC 头部中的 MAC 地址填写什么值，需要根据路由表网关列判断对方的地址。</p>
<ul>
<li>如果是 IP 地址，则这个 IP 地址就是我们要转发的目标地址。</li>
<li>如果为空，IP 头部中的 IP 地址就是要转发的目标地址。 </li>
</ul>
<p>然后使用 ARP 来查询 MAC 地址并写入 MAC 头部。路由器中也有 ARP 缓存。还有发送方的 MAC 地址，这里填写输出端口的 MAC 地址，以太类型填写 0080（十六进制）。</p>
<h2 id="路由器和交换机的关系"><a href="#路由器和交换机的关系" class="headerlink" title="路由器和交换机的关系"></a>路由器和交换机的关系</h2><p>IP （路由器）负责将包送达通信对象这一整体过程，而其中将包传输到下一个路由器的过程则是由以太网（交换机）来负责的。（反正这里没看懂。）</p>
<h1 id="四、路由器的附加功能"><a href="#四、路由器的附加功能" class="headerlink" title="四、路由器的附加功能"></a>四、路由器的附加功能</h1><h2 id="地址转换"><a href="#地址转换" class="headerlink" title="地址转换"></a>地址转换</h2><p>公司内网的计算机使用的是私有地址，当要与互联网通信的时候，可以通过路由器进行地址转换。假设第一个 TCP 连接的第一个包被转发到互联网的时候，路由器会对发送方的 IP 地址进行改写，将私有地址改写成路由器端口的共有地址，而发送方的端口号也会随机生成一个。这些对应关系都会存放在路由器内部的一张表内。<br><br><br>通过私有地址的转换，就可以进行网络通信，而端口号的对应关系可以让路由器分辨出是哪台计算机的数据包。</p>
<h2 id="从互联网访问公司内网"><a href="#从互联网访问公司内网" class="headerlink" title="从互联网访问公司内网"></a>从互联网访问公司内网</h2><p>通常这样做是不行的，除非在地址和端口对应表中事先手动添加关联信息。</p>
<h2 id="路由器的包过滤功能"><a href="#路由器的包过滤功能" class="headerlink" title="路由器的包过滤功能"></a>路由器的包过滤功能</h2><p>根据 MAC 头部、IP 头部、TCP 头部的内容，按照事先设置好的规则决定是否转发这个包。</p>
]]></content>
      
        <categories>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[（二）用电信号传输 TCP/IP 数据]]></title>
      <url>/2017/07/articles/2017-7-21-721-1/</url>
      <content type="html"><![CDATA[<p>上一章介绍了浏览器生成消息并委托协议栈发送数据等步骤，那么协议栈具体是怎么操作的呢？所谓的套接字究竟是什么东西呢？<br><br><br><a id="more"></a><br>本章内容：<br></p>
<ul>
<li>创建套接字</li>
<li>连接服务器</li>
<li>收发数据</li>
<li>从服务器断开连接并删除套接字</li>
<li>IP 与以太网的包收发操作</li>
<li>用 UDP 协议收发数据的操作</li>
</ul>
<h1 id="一、创建套接字"><a href="#一、创建套接字" class="headerlink" title="一、创建套接字"></a>一、创建套接字</h1><h2 id="协议栈的内部结构"><a href="#协议栈的内部结构" class="headerlink" title="协议栈的内部结构"></a>协议栈的内部结构</h2><p><img src="\images\wlszyljd\neibu.png" alt></p>
<ul>
<li>应用程序通过代码调用 Scoket 库的组件来让协议栈进行指定的操作</li>
<li>协议栈的 TCP 和 UDP 部分负责接收应用程序的委托执行收发数据的操作。协议栈下半部分通过 IP 协议控制网络包的收发，以及将数据切分、发送。IP 协议中还包括 ICMP 协议和 ARP 协议，作用分别是确保网络包到达目的地、根据 IP 地址查询以太网 MAC 地址。</li>
<li>网卡驱动负责控制网卡硬件</li>
<li>网卡负责实际的收发操作，也就是直接跟网线交流。<br><br><br><br>（还是觉得说得很牵强）</li>
</ul>
<h2 id="套接字究竟是什么"><a href="#套接字究竟是什么" class="headerlink" title="套接字究竟是什么"></a>套接字究竟是什么</h2><p>所谓创建套接字就是在协议栈里面创建一块内存空间，创建套接字就是为了通信，所以这块空间里面就存放着很多信息，比如通信对象的 IP 地址，端口号，通信状态等。<br><br>除此之外，还有发送数据的时间。发送数据时协议栈需要查看对方的 IP 地址和端口号，发了一条数据之后需要记录时间，过了很久没有收到就进行响应操作，因为总不能一直等待对方响应吧，说不定数据早就丢失了。<br><br><br><br>在控制台输入 netstat -ano 就可以看到下面这个图<br><br><br><img src="\images\wlszyljd\tjz.PNG" alt><br><br><br>这就是套接字的样子，显示的包括通信对象的 IP 地址，端口号，通信状态等。</p>
<h2 id="创建套接字的过程"><a href="#创建套接字的过程" class="headerlink" title="创建套接字的过程"></a>创建套接字的过程</h2><p>浏览器通过 Scoket 库向协议栈发出委托，在创建套接字时具体进行以下操作。</p>
<ul>
<li>协议栈首先分配一块内存空间</li>
<li>向内存空间里面存入初始状态的控制信息，并不是通信对象的信息，以为收发数据还没有开始。</li>
<li>将这个套接字的描述符告知应用程序，当需要收发数据时，应用程序只需要提供这个描述符就可以委托协议栈发送数据，而不用每次都告诉协议栈应该跟谁操作。</li>
</ul>
<p>（所谓描述符应该就是这块内存空间的地址吧）</p>
<h1 id="二、连接服务器"><a href="#二、连接服务器" class="headerlink" title="二、连接服务器"></a>二、连接服务器</h1><h2 id="连接是什么意思"><a href="#连接是什么意思" class="headerlink" title="连接是什么意思"></a>连接是什么意思</h2><p>连接实际就是通信双方交换信息，并没有什么类似于连接的操作，只是为了方便人们理解，以及历史原因。<br>连接的时候做了三件事：</p>
<ul>
<li>因为创建套接字的时候并没有告诉协议栈通信对象的信息，所以这个时候就要把对方的 IP 地址和端口号告知协议栈。（注意，并没有写入套接字中）</li>
<li>客户端找到服务器，并提供自己的信息，询问对方是否进行连接。</li>
<li>创建缓冲区，用来临时存放准备收发的数据</li>
</ul>
<p>（虽然是这么说，但是实际上应该复杂很多）</p>
<h2 id="控制信息有哪些"><a href="#控制信息有哪些" class="headerlink" title="控制信息有哪些"></a>控制信息有哪些</h2><p>控制信息分为两类</p>
<ol>
<li>客户端和服务器相互联络是交换的控制信息</li>
<li>套接字（协议栈内存空间）中记录的信息</li>
</ol>
<p>前一种控制信息在通信过程中必不可少，这些控制信息包括了目的地的信息。这些信息位于网络包开头，有 TCP 头部，以太网头部，IP 头部。TCP 头部中包括了发送方端口号，接收方端口号，序号，ACK 号等等。<br><br><br>后一种控制信息在不同的系统中不一样，都是根据需要来保存。</p>
<h2 id="连接操作的实际过程"><a href="#连接操作的实际过程" class="headerlink" title="连接操作的实际过程"></a>连接操作的实际过程</h2><ol>
<li>客户端创建一个头部，包含服务器的信息以便找到服务器。其中 SYN 设为 1，表示这是一个连接请求。</li>
<li>服务器的套接字一直都是创建好的，等待着客户端的连接。当收到客户端的连接请求的之后，如果愿意连接，就在 TCP 头部设置 SYN 为 1，并且设置 ACK 为去，表示已经接收到相应的网络包，最后将网络包发送给客户端。</li>
<li>客户端收到网络包，TCP 模块根据 TCP 头部的信息确定是否连接成功。如果 SYN 为 1，说明连接成功。这是会向套接字中写入服务器的 IP 地址、端口号等信息。然后还需要向服务器发送一个数据包，其中 ACK 为 1，告诉服务器刚才的响应包已经收到。</li>
</ol>
<p><br><br><br>此时连接已经完成，这就是 TCP 的三次握手。<br>连接是抽象的，在断开连接之前都是可以收发数据的。<br><br>连接完成后，控制流程又回到了应用程序。</p>
<h1 id="三、收发数据"><a href="#三、收发数据" class="headerlink" title="三、收发数据"></a>三、收发数据</h1><p>收发数据分为</p>
<ul>
<li>将 HTTP 消息交给协议栈</li>
<li>协议栈发送消息并接收响应</li>
<li>将 HTTP 响应交给浏览器</li>
</ul>
<p>其中，第二步是又分为很多步。</p>
<h2 id="将-HTTP-消息交给协议栈"><a href="#将-HTTP-消息交给协议栈" class="headerlink" title="将 HTTP 消息交给协议栈"></a>将 HTTP 消息交给协议栈</h2><p>应用程序通过调用 write 组件将数据交给协议栈，协议栈并不在乎究竟是些什么数据，以为对它来说都是二进制字节序列而已。<br>协议栈会将收到的数据放到缓存区里面而不是马上发送出去，两种情况下将会发送。</p>
<ul>
<li>一个网络包的最大长度是 MTU，除去头部后一个网络包能容纳的 TCP 数据的最大长度叫做 MSS。当缓冲区里面的数据到达或超过 MSS 之后，协议栈就会发送出去。</li>
<li>万一数据很少岂不是不发送了？所以还有一种情况下会发送出去。协议栈内部有一个定时器，当超过一定时间之后就会将数据发送出去。</li>
</ul>
<p><br><br>除此之外，浏览器在发送数据的时候告诉协议栈不用等待直接发送，这样协议栈就会马上发送出去了。</p>
<h2 id="对较大的数据进行拆分"><a href="#对较大的数据进行拆分" class="headerlink" title="对较大的数据进行拆分"></a>对较大的数据进行拆分</h2><p>当应用程序发过来的数据超过 MSS 之后，数据就会被拆分，分成小块之后，每一块都加上 TCP 头部，然后交给 IP 模块。</p>
<h2 id="使用-ACK-号确认网络包已收到"><a href="#使用-ACK-号确认网络包已收到" class="headerlink" title="使用 ACK 号确认网络包已收到"></a>使用 ACK 号确认网络包已收到</h2><p>发送数据包时，TCP 头部会包含这个数据包的序号，而接收方在接收的时候可以计算出这个数据包的长度。这样接收方就会回复 ACK 号，比如序号是 1，长度是1460，接收方回复的 ACK 号就是 1461。（这只是最简单的情况）<br><br><br>需要注意的是，序号并不是从 1 开始的，而是随机产生的，这是为了安全起见。<br><br><br><br>收发数据是双向的，在连接的时候双方都要生成一个随即序号并告诉对方，在之后的通信中都要用到这个序号。<br><br><br><br>在没有收到确认之前，发送过的数据都会保存的缓冲区里面，如果长时间没有收到确认号，就会重新发送，这是个非常强大的功能。</p>
<h2 id="动态调整超时时间"><a href="#动态调整超时时间" class="headerlink" title="动态调整超时时间"></a>动态调整超时时间</h2><p>长时间没有收到确认号就重新发送，可是多久算是长时间呢？<br><br>TCP 在发送数据的过程中持续检测 ACK 号的返回时间，当该时间变长的时候超时时间也变长，反之亦然。</p>
<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>发送一条数据就等待 ACK 确认号回导致时间的浪费，但是不等待的话接收方可能会接受不了那么多数据导致数据的丢失。那怎么办呢？<br>TCP 是这样处理的，发送方有一个滑动窗口，从数据的开头开始发送，当发送一定数据之后就停止发送，等待接收方的确认。收到确认之后再继续发送。<br><br><br>那么问题来了，窗口的大小怎么定？实际中，接收方会告诉对方自己的接收缓冲区大小，让对方调整滑动窗口的大小。</p>
<h2 id="ACK-和窗口的合并"><a href="#ACK-和窗口的合并" class="headerlink" title="ACK 和窗口的合并"></a>ACK 和窗口的合并</h2><p>这里实际就是减少发送的数据包。</p>
<ul>
<li>将更新窗口的消息和 ACK 号一起发送而不是分开发送。</li>
<li>接收到多条数据之后，只发送最后一个数据包的确认信息。因为发送最后一个也就说明了之前的已经接收成功了。</li>
</ul>
<h2 id="接收-HTTP-响应消息"><a href="#接收-HTTP-响应消息" class="headerlink" title="接收 HTTP 响应消息"></a>接收 HTTP 响应消息</h2><p>浏览器在委托协议栈发送消息之后，会调用 read 来获取响应消息。<br><br>和发送消息一样，协议栈会创建缓冲区，将收到的数据放在其中。<br><br>如果发送完数据之后还没有收到响应，协议栈就会将浏览器的委托暂时挂起，去完成别的任务。<br><br>收到数据时，协议栈会检查数据是否丢失，如果没有丢失就返回 ACK 号，然会将数据放入缓冲区，并将数据块连接起来还原成原始数据，然后交给应用程序。具体来说，协议栈将收到的数据复制到应用程序指定的内存地址中，然后将流程控制交回给应用程序。之后协议栈还需要找到合适的机会向发送方发送窗口更新的消息。</p>
<h1 id="四、从服务器断开连接并删除套接字"><a href="#四、从服务器断开连接并删除套接字" class="headerlink" title="四、从服务器断开连接并删除套接字"></a>四、从服务器断开连接并删除套接字</h1><h2 id="数据发送完毕后断开连接"><a href="#数据发送完毕后断开连接" class="headerlink" title="数据发送完毕后断开连接"></a>数据发送完毕后断开连接</h2><p>当收发数据的操作完成时，就可以断开连接了。下面以服务器发起断开请求为例，实际上任意一端都可以发起断开请求的。<br></p>
<ul>
<li>服务器发送 FIN=1 的 TCP 头部</li>
<li>客户端的协议栈收到后将自己的套接字标记为断开操作状态，然后返回一个 ACK 确认号</li>
<li>协议栈等待应用程序来 read 数据，会告知应用程序数据已经全部收到了</li>
<li>客户端调用 close 结束数据的收发，然后发送一个 FIN=1 的 TCP 包给服务器</li>
<li>服务器返回 ACK 确认号</li>
</ul>
<h2 id="删除套接字"><a href="#删除套接字" class="headerlink" title="删除套接字"></a>删除套接字</h2><p>正常来说，通信结束后就可以删除套接字了，但实际上协议栈并不会马上进行操作，这是为了防止出错，出错的情况有很多种，下面列举一种。</p>
<blockquote>
<p>客户端说断开连接，服务器说好的。服务器也说断开连接，客户端也回复好的。可是最后一条消息丢失了，导致服务器重新说一次断开连接。如果本来的套接字已经删除，并且创建了一个使用之前端口号新的套接字，新的套接字就可能收到断开连接的消息。</p>
</blockquote>
<h2 id="数据收发小结"><a href="#数据收发小结" class="headerlink" title="数据收发小结"></a>数据收发小结</h2><p><img src="\images\wlszyljd\sjsfczxj.png" alt></p>
<h1 id="五、IP-和以太网的包收发操作"><a href="#五、IP-和以太网的包收发操作" class="headerlink" title="五、IP 和以太网的包收发操作"></a>五、IP 和以太网的包收发操作</h1><h2 id="包的基本知识"><a href="#包的基本知识" class="headerlink" title="包的基本知识"></a>包的基本知识</h2><p>网络包有两部分组成：</p>
<ul>
<li>头部</li>
<li>内容</li>
</ul>
<p>通常来讲，TCP 头部加上数据就是块就是包的内容。而内容加上 IP 头部之后就叫做 IP 包，IP 包加上 MAC 头部之后就叫做以太网包。</p>
<ul>
<li>IP 头部有目的地的 IP 地址</li>
<li>MAC 头部要下一站的 MAC（物理地址）地址 <br><br></li>
</ul>
<p>先介绍一下路由器和集线器的概念</p>
<ul>
<li>路由器根据目标地址判断下一个路由的位置</li>
<li>集线器在子网中将网络包传输到下一个路由<br><br><br><br>当一个网络包创建好之后，已经有了 IP 和 MAC 头部，计算机将网络包发送给集线器，集线器里面有以太网表，根据 MAC 头部的地址在表中查找信息，判断发往哪个路由器。网络包到达路由器之后，将 MAC 头部丢弃，根据 IP 头部里面的 IP 在路由表里面查找下一跳的物理地址。然后为网络包添加新的 MAC 头部。以此类推，一直到发送给目的主机。</li>
</ul>
<h2 id="包收发操作概览"><a href="#包收发操作概览" class="headerlink" title="包收发操作概览"></a>包收发操作概览</h2><p>之前是说通过 IP 模块将数据发送出去，实际上 IP 模块是将二进制字节序列传递给网卡，然后网卡将数字信号转换成电信号发送出去。当收到数据时，网卡将电信号转化为数字信号交给 IP 模块，IP 模块将网络包的内容交给 TCP 模块。<br><br><br>虽说是让网卡发送的数据，但是在此之前 IP 模块也做了很多重要的工作。</p>
<ul>
<li>添加 MAC 头部：以太网用的头部，包含 MAC 地址</li>
<li>添加IP 头部：IP 用的头部，包含 IP 地址。</li>
</ul>
<p>需要注意，MAC 头部是由 IP 模块添加的，而且 IP 模块对于不同类型的包进行的都是一样的操作，因为对它来说那些都是二进制字节序号而已。</p>
<h2 id="生成-IP-头部"><a href="#生成-IP-头部" class="headerlink" title="生成 IP 头部"></a>生成 IP 头部</h2><p>IP 头部格式在这里就不详细说了，里面包括目的地的 IP 地址，还有发送方的 IP 地址。<br><br>这里的“发送方的 IP 地址”实际指的是网卡的 IP 地址，一台电脑可能有多个网卡，那么应该填写哪个网卡的地址呢？<br><br><br>计算机内部有一个 IP 表，在这个表里查找就可以知道这个目的 IP 应该通过哪个网卡发送出去了。<br><br><br><br>接下来还需要填写协议号，它表示的是包的内容来自哪个模块。如果是来自 TCP 委托的内容，就设置为 06（十六进制），如果是 UDP 就设置为 17（十六进制）。</p>
<h2 id="生成-MAC-头部"><a href="#生成-MAC-头部" class="headerlink" title="生成 MAC 头部"></a>生成 MAC 头部</h2><p>生成 MAC 头部是需要设置三个字段：</p>
<ul>
<li>以太类型。IP 协议的值 0800（十六进制）</li>
<li>发送方 MAC 地址。也就是本机网卡的 MAC 地址</li>
<li>接收方 MAC 地址。路由表可以根据 IP 地址查询下一跳物理地址</li>
</ul>
<h2 id="ARP-查询目标路由器的-MAC-地址"><a href="#ARP-查询目标路由器的-MAC-地址" class="headerlink" title="ARP 查询目标路由器的 MAC 地址"></a>ARP 查询目标路由器的 MAC 地址</h2><p>路由器的路由表可能可以获取到下一跳的物理地址，但是一开始路由表是空的，这种情况下就需要通过 ARP 查询目标路由器的 MAC 地址了。<br><br><br><br>实际操作就是在子网内广播，询问所有设备“xxxx 这个 IP 是谁的？”，然后就会收到回复“xxxx 这个 IP 是我的，我的 MAC 地址是 yyyy”。这样就得到了想要的 MAC 地址了，也就可以将其写入 MAC 头部了。<br><br><br><br>如果每次放松数据包都要发送 ARP 包的话就太不方便了，所有有一个 ARP 缓存，发送之前查看里面有没有想要的信息，没有的话再发送广播。而这个 ARP 会定时清除数据，防止保存着错误的信息。</p>
<h2 id="以太网的基本知识"><a href="#以太网的基本知识" class="headerlink" title="以太网的基本知识"></a>以太网的基本知识</h2><p>以太网具有以下三个特点：</p>
<ul>
<li>将包发送到 MAC 头部的接收方 MAC 地址</li>
<li>用发送方的 MAC 地址来识别发送方</li>
<li>用以太类型来识别包的内容</li>
</ul>
<h2 id="将-IP-包转换成电或光信号发送出去"><a href="#将-IP-包转换成电或光信号发送出去" class="headerlink" title="将 IP 包转换成电或光信号发送出去"></a>将 IP 包转换成电或光信号发送出去</h2><p>开机时，网卡驱动对网卡进行初始化操作，并将网卡 ROM 中保存的 MAC 地址写入网卡的 MAC 模块中。<br>当收到协议栈发来的数据时，网卡就将数据转换并发送出去。</p>
<h2 id="给网络包加-3-个控制数据"><a href="#给网络包加-3-个控制数据" class="headerlink" title="给网络包加 3 个控制数据"></a>给网络包加 3 个控制数据</h2><p>网卡驱动从 IP 模块中获取包之后，会将其复制到网卡的缓冲区，然后向 MAC 模块发送发送包的命令，接下来就轮到 MAC 模块进行工作了。<br><br><br>MAC 模块会将包从缓冲区取出，并在开头加报头和起始帧分界符（SFD），在末尾加上用于检测错误的帧校验序列（FCS）。<br>（这部分太复杂看不懂…）</p>
<h2 id="向集线器发送网络包"><a href="#向集线器发送网络包" class="headerlink" title="向集线器发送网络包"></a>向集线器发送网络包</h2><p>加上 3 个控制信息之后就可以将包通过网线发送出去了。发送信号的方式有两种，一种是使用集线器的半双工模式，一种是使用交换机的全双工模式。<br><br><br>在半双工模式中，先要判断网线中是否存在其他设备发送的信号，如果没有，MAC 模块就从报头开始将数字信息按每个比特转换成电信号，然后由 PHY 或者 MAU 模块发送出去。<br>（MAC 生成通用信号，然后由 PHY 或者 MAU 模块转换成可在网线中传输的格式，并通过网线发送出去）<br><br><br><br>注意，以太网是不会管对方有没有收到信号的<br><br><br><br>（PHY(MAU) 还有其他职责，在此省略…）</p>
<h2 id="接收返回包"><a href="#接收返回包" class="headerlink" title="接收返回包"></a>接收返回包</h2><p>在使用集线器的半双工模式以太网中，一台设备发送的信号会到达连接到集线器的所有设备上。接收过程如下：</p>
<ul>
<li>把信号全都接收进来</li>
<li>通过报头的波形同步时钟，然后遇到起始帧分界符开始将后面的信号转换成数字信息。</li>
<li>PHY(MAU) 模块将信号转换成通用格式并交给 MAC 模块。</li>
<li>MAC 模块从头开始将信号转换成数字信息，并放入缓冲区。到达末尾时还需要检查 FCS，如果出错就丢弃。</li>
<li>检查 MAC 头部中接收方的 MAC 地址是否与自己的一致，如果不一致就丢弃，一直就将包放入缓冲区。</li>
<li>通知计算机收到了一个包。（中断机制）</li>
</ul>
<h2 id="将服务器的响应包从-IP-传递给-TCP"><a href="#将服务器的响应包从-IP-传递给-TCP" class="headerlink" title="将服务器的响应包从 IP 传递给 TCP"></a>将服务器的响应包从 IP 传递给 TCP</h2><p>假设 Wbe 服务器返回了一个响应包，协议栈会进行哪些操作呢？</p>
<ul>
<li>根据包的以太网类型，如果是 0800 网卡驱动就会交给 TCP/IP 栈来处理。</li>
<li>IP 模块检查 IP 头部，以及检查头部里的 IP 地址。确定无误之后就可以接收这个包了。</li>
<li>如果 IP 地址不是我们的地址，那就是出错了，客户端计算机的 IP 模块会通过 IMCP 消息将错误告知发送方，而服务器收到不属于自己的包的时候，可能会像路由器一样进行转发。</li>
<li>如果没问题的话 IP 模块就负责将网络包还原，因为有些数据包进行了分片。</li>
<li>然后 IP 模块就将包交给 TCP 模块了，TCP 模块会执行相应的操作。</li>
</ul>
<h1 id="六、UDP-协议的收发操作"><a href="#六、UDP-协议的收发操作" class="headerlink" title="六、UDP 协议的收发操作"></a>六、UDP 协议的收发操作</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul>
<li>需要发送的数据不多时</li>
<li>发送视频和音频数据时（比如直播）<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2></li>
<li>创建套接字，无需建立和断开连接</li>
<li>将数据加上 UDP 头部交给 IP 模块发送</li>
<li>接收时，找到相应套接字并将数据交给相应的应用程序<h2 id="UDP-头部中的控制信息"><a href="#UDP-头部中的控制信息" class="headerlink" title="UDP 头部中的控制信息"></a>UDP 头部中的控制信息</h2></li>
<li>发送方端口号</li>
<li>接收方端口号</li>
<li>数据长度</li>
<li>校验和</li>
</ul>
<p>（突然发现 UDP 和 TCP 头部中都没有 IP 地址，看来 IP 地址是值放在 IP 头部中的。第二章看完了，感觉有些懵逼，但是又不想继续看了…）</p>
]]></content>
      
        <categories>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[（一）浏览器生成消息]]></title>
      <url>/2017/07/articles/2017-7-20-720-1/</url>
      <content type="html"><![CDATA[<p>以前知道的是浏览器发出请求，服务器返回响应。<a id="more"></a>实际上浏览器经过了<strong>解析网址、生成 HTTP 消息、查询服务器 ip 地址、委托协议栈（操作系统里的网络控制软件）发送消息</strong>。下面就来看看这些步骤具体是怎么完成的。</p>
<h1 id="一、浏览器解析网址"><a href="#一、浏览器解析网址" class="headerlink" title="一、浏览器解析网址"></a>一、浏览器解析网址</h1><p>所谓的解析网址就是把一个网址拆分开来，获取其中包含的信息。<br><br>网址就是 URL(Uniform Resource Locator 统一资源定位符)。除了我们常见的 http:// 开头的网址，还有 ftp:// 、file://、mailto:。以一个 http 开头的网址为例:</p>
<blockquote>
<p><a href="http://www.lab.glasscom/dir1/file1.html" target="_blank" rel="noopener">http://www.lab.glasscom/dir1/file1.html</a></p>
</blockquote>
<ul>
<li>http 表示访问数据源的机制，也就是协议<br></li>
<li>//   后面跟着的就是服务器的名称，即为 <a href="http://www.lab.glasscom" target="_blank" rel="noopener">www.lab.glasscom</a><br></li>
<li>/dir1/file1.html 表示要访问的资源的具体位置，这里就是 dir1 目录下的 file1.html 文件<br></li>
</ul>
<h1 id="二、浏览器生成消息"><a href="#二、浏览器生成消息" class="headerlink" title="二、浏览器生成消息"></a>二、浏览器生成消息</h1><p>解析 URL 之后就可以根据需要生成 HTTP 消息了<br><br>根据需要使用不同的方法，如果是想发送数据的服务器处理就使用 POST 方法，如果是想从服务器获取数据就用 GET 方法。<br><br><br>消息格式：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;方法&gt;&lt;空格&gt;&lt;URI&gt;&lt;空格&gt;&lt;HTTP 版本&gt;</span><br><span class="line">&lt;字段名&gt;:&lt;字段值&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;空行&gt;</span><br><span class="line">&lt;消息体&gt;</span><br></pre></td></tr></table></figure></p>
<p>(具体需要了解 HTTP 协议)<br><br>URI 就是要访问的资源的具体位置<br><br>而解析出来的服务器的名称会在字段值中出现 host : <a href="http://www.lab.glasscom" target="_blank" rel="noopener">www.lab.glasscom</a><br></p>
<h1 id="三、查询服务器-ip-地址"><a href="#三、查询服务器-ip-地址" class="headerlink" title="三、查询服务器 ip 地址"></a>三、查询服务器 ip 地址</h1><p>通过对网址的解析我们已经得到了想要访问的服务器的名称（域名），但我们还不能找到这台服务器。<br></p>
<p>这就像是我们知道了一个人的名字，但是名字是可以重复的，我们需要确定这个人的身份。在互联网中就是通过 ip 来标志每一台计算机的身份。<br></p>
<p>想要得到目的服务器的 ip 地址就需要向 DNS 服务器查询。<br><br></p>
<p>简单来说，就是向 DNS 服务器提出询问：<a href="http://www.lab.glasscom" target="_blank" rel="noopener">www.lab.glasscom</a> 的 ip 地址是什么？<br><br>然后 DNS 服务器回答：它的 ip 地址是 xx.xx.x.xx<br><br></p>
<p>稍微具体一点点，就是计算机一定有一个 DNS 客户端（称为 DNS 解析器），它可以跟 DNS 服务器通信。</p>
<ol>
<li>浏览器想到得到一个网址所对应的 ip 地址的时候，就调用解析器</li>
<li>解析器就生成查询消息，通过操作系统的协议栈发送出去。（凡是网络通信，都需要委托给协议栈进行操作）</li>
<li>协议栈得到响应之后，返回信息给解析器，解析器再将 ip 地址返回给浏览器。</li>
</ol>
<p><br>（这里感觉类似于函数的调用，函数中调用函数，最后将结果层层返回）</p>
<h1 id="四、全世界-DNS-服务器的大接力"><a href="#四、全世界-DNS-服务器的大接力" class="headerlink" title="四、全世界 DNS 服务器的大接力"></a>四、全世界 DNS 服务器的大接力</h1><p>上面说到向 DNS 服务器查询 ip 地址，在服务器个数有限的情况下一切都合情合理，但是全世界那么多台计算机，难道全部保存在一台 DNS 服务器上面吗？如果分开保存，这台找不到的情况下又应该去哪里找呢？<br><br></p>
<h2 id="域名的层次结构"><a href="#域名的层次结构" class="headerlink" title="域名的层次结构"></a>域名的层次结构</h2><p>域名可以是: <a href="http://www.zhihu.com、www.baidu.com，他们都可以看成是" target="_blank" rel="noopener">www.zhihu.com、www.baidu.com，他们都可以看成是</a> .com 的手下，而他们也可以有自己的手下，比如 tieba.baidu.com 就是 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的手下，这就是域名的层次结构。假设一台 DNS 服务器只能存放一个域的信息，那么就有一台服务器存放着类似于 <a href="http://www.zhihu.com、www.baidu.com" target="_blank" rel="noopener">www.zhihu.com、www.baidu.com</a> 这样的域名的信息，但是你要问这台服务器 tieba.baidu.com 的 ip 是多少它是不知道的，不过它会告诉你 xx 服务器上存放着你想要的信息，让你去找它。<br><br></p>
<p>简单来说，有一台服务器存放 .com 下的域名的信息，另一台存放 .cn 下的域名的信息。当然还有很多这样的服务器，他们各自是老大，掌握了下一级别的小弟的信息，你要谁的信息就直接给你。但是大哥并不知道所有人的信息，你想要小弟的小弟的信息，他最多知道这个人是谁的小弟，然后让你去找这个人。<br><br></p>
<p>实际上还有一台 DNS 服务器上存放着所有老大的信息，我们可以称之为超级大佬，想要任意任意一个人的信息，问他就好了，顺藤摸瓜肯定可以找到的。</p>
<h2 id="DNS-服务器的工作方式"><a href="#DNS-服务器的工作方式" class="headerlink" title="DNS 服务器的工作方式"></a>DNS 服务器的工作方式</h2><p>任意一台服务器都存放着超级大佬的信息，当我们向一台 DNS 服务器发出询问时，如果它也不知道那它就会让你去问超级大佬，超级大佬会让你去问某个老大，如果那个老大知道的话就告诉你，否则就让你去问他的小弟…一直到得到想要的答案为止。</p>
<h1 id="五、委托协议栈发送消息"><a href="#五、委托协议栈发送消息" class="headerlink" title="五、委托协议栈发送消息"></a>五、委托协议栈发送消息</h1><h2 id="数据收发操作概览"><a href="#数据收发操作概览" class="headerlink" title="数据收发操作概览"></a>数据收发操作概览</h2><p>简单来说，数据收发就是在客户端和服务器之间建立了一条数据通道，数据就在通道里面传输。<br>这条数据通道并非一开始就有，而是在收发数据之前就建立起来的。收发数据大致可以分为以下 4 个阶段：</p>
<ol>
<li>创建套接字</li>
<li>将管道连接到服务器端的套接字上</li>
<li>收发数据</li>
<li>断开管道并删除套接字</li>
</ol>
<p>这里先理解成是协议栈调用 Socket 库完成上面 4 个步骤。</p>
<h2 id="创建套接字阶段"><a href="#创建套接字阶段" class="headerlink" title="创建套接字阶段"></a>创建套接字阶段</h2><p>套接字的创建就看成是协议栈调用 Socket 库的组件来创建套接字，创建之后会返回一个描述符，这个描述符相当于这个套接字的身份证。当要收发数据的时候，向协议栈出示描述符，协议栈就知道要对哪个套接字进行操作了。</p>
<h2 id="连接阶段"><a href="#连接阶段" class="headerlink" title="连接阶段"></a>连接阶段</h2><p>连接是通过调用 Socket 库的 connect 组件完成的。需要指定以下信息：</p>
<ul>
<li>描述符</li>
<li>服务器 ip 地址</li>
<li>服务器端口号</li>
</ul>
<p>描述符是告诉协议栈要对哪个套接字进行操作，ip 和端口号是用来识别对方套接字。</p>
<h2 id="通信阶段"><a href="#通信阶段" class="headerlink" title="通信阶段"></a>通信阶段</h2><p>发送数据时调用 Socket 的 write 组件，需要提供描述符和要发送的数据即可。<br><br><br>接收数据时调用 Socket 的 read  组件，需要指定用于存放接收到的响应信息的内存地址。</p>
<h2 id="断开阶段"><a href="#断开阶段" class="headerlink" title="断开阶段"></a>断开阶段</h2><p>Web 服务器发送响应消息之后主动断开连接，客户端收到断开指令后也断开连接，当浏览器调用 read 读取数据时，read 会告知浏览器收发数据操作结束，连接已经断开，然后浏览器也进入断开阶段。<br>（实际上双方都有可能先执行断开操作）<br><br><br><br>以前的 HTTP 协议每次获取数据都要进行所有步骤，后来在 1.1 版本中一次连接可以收发多个请求和响应，当所有数据请求完毕之后，浏览器会主动断开连接。</p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>一个上午的时间就这么过去了，后面的内容会越来越难，希望自己可以坚持看完。<br><br><br>第一章有部分知识我跳过了，学到的知识基本就是这么多了，刚才去百度了一下 C语言 Socket 编程的例子，还是觉得一脸懵逼，完全不知道说的是什么。<br><br><br>不管怎样，坚持看完这本书，加油！！！！</p>
]]></content>
      
        <categories>
            
            <category> 计算机网络 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 和 python 实现贴吧水贴与自动签到]]></title>
      <url>/2017/06/articles/2017-6-26-626-1/</url>
      <content type="html"><![CDATA[<h1 id="1、重装系统"><a href="#1、重装系统" class="headerlink" title="1、重装系统"></a>1、重装系统</h1><p>为了不忽略任何一个步骤所以先重装系统<br><a id="more"></a><br><img src="\images\Linux\Reinstall.PNG" alt></p>
<h1 id="2、登录-Xshell5"><a href="#2、登录-Xshell5" class="headerlink" title="2、登录 Xshell5"></a>2、登录 Xshell5</h1><h2 id="填写主机地址"><a href="#填写主机地址" class="headerlink" title="填写主机地址"></a>填写主机地址</h2><p><img src="\images\Linux\signshell.PNG" alt></p>
<h2 id="填写用户名"><a href="#填写用户名" class="headerlink" title="填写用户名"></a>填写用户名</h2><p><img src="\images\Linux\username.PNG" alt></p>
<h2 id="填写密码"><a href="#填写密码" class="headerlink" title="填写密码"></a>填写密码</h2><p><img src="\images\Linux\password.PNG" alt></p>
<h1 id="3、登录成功"><a href="#3、登录成功" class="headerlink" title="3、登录成功"></a>3、登录成功</h1><p>通过 Xshell5 登录云主机之后，所在的文件夹是根目录下的 root 文件夹</p>
<p><img src="\images\Linux\root.PNG" alt><br>输入 python 后发现，Linux 已经装好了 python2.6，所以 python 文件必须要在2.6的环境下运行。</p>
<p><img src="\images\Linux\python.PNG" alt></p>
<h1 id="4、上传文件"><a href="#4、上传文件" class="headerlink" title="4、上传文件"></a>4、上传文件</h1><p>已经具有 python 环境了，所以就不用安装，直接上传 py 文件即可。</p>
<p><img src="\images\Linux\upload.PNG" alt></p>
<p>但是发现上传的时候进度条不动。</p>
<p><img src="\images\Linux\noupload.PNG" alt></p>
<p>然后上百度找答案（毕竟翻墙麻烦）</p>
<p><img src="\images\Linux\solve.PNG" alt></p>
<p><img src="\images\Linux\lrzsz.PNG" alt></p>
<p>之后就可以上传成功了</p>
<p><img src="\images\Linux\uploadok.PNG" alt></p>
<p>用发送QQ邮件的小程序测试一下能不能运行</p>
<p><img src="\images\Linux\testQQSend.PNG" alt></p>
<p><img src="\images\Linux\qqsendok.PNG" alt></p>
<p>测试成功，说明当前的 python 环境是没问题的。</p>
<h1 id="5、测试签到脚本"><a href="#5、测试签到脚本" class="headerlink" title="5、测试签到脚本"></a>5、测试签到脚本</h1><p>用同样的方法上传文件，结果发现 requests 找不到，因为我们没有 requests 这个外部库</p>
<p><img src="\images\Linux\norequests.PNG" alt></p>
<p>尝试用 pip 的方式安装 requests 库</p>
<p>结果发现 pip 命令也不存在</p>
<p><img src="\images\Linux\nohavepip.PNG" alt></p>
<p>上网查找解决方法</p>
<p><img src="\images\Linux\installpip.PNG" alt></p>
<p>安装 pip 之后再安装 requests</p>
<p>这是安装成功的提示</p>
<p><img src="\images\Linux\installrequestsok.PNG" alt></p>
<p>测试一下签到脚本</p>
<p><img src="\images\Linux\test_import_ok.PNG" alt></p>
<p>现在已经成功了，但是由于编码的问题，所以显示出来的不是中文。</p>
<h1 id="6、定时运行程序"><a href="#6、定时运行程序" class="headerlink" title="6、定时运行程序"></a>6、定时运行程序</h1><p>添加 crontab</p>
<p><img src="\images\Linux\addcrontab.PNG" alt></p>
<p>编辑 crontab</p>
<p><img src="\images\Linux\editorcrontab.PNG" alt></p>
<h1 id="7、后台运行-python-程序"><a href="#7、后台运行-python-程序" class="headerlink" title="7、后台运行 python 程序"></a>7、后台运行 python 程序</h1><p>后台运行 py 文件，并将输出到文本文件中</p>
<p><img src="\images\Linux\yiadd.PNG" alt></p>
<p>测试成功</p>
<p><img src="\images\Linux\yiaddok.PNG" alt></p>
<h1 id="8、退出"><a href="#8、退出" class="headerlink" title="8、退出"></a>8、退出</h1><p>一定要用 exit 命令退出，否则后台运行的程序将会退出。</p>
<p><img src="\images\Linux\exit.PNG" alt></p>
<h1 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h1><p>刚开始 Linux 存在 python2.6，但没有 pip，需要自己安装。想要上传文件也要安装一些东西。py 文件的具体编写没讲到，怎么才能显示中文也没有解决。</p>
<p>这些文件在 root 目录下，签到程序在 sign 文件夹下，add-* 文件夹存放的是自动回帖的程序，但是有一个号并不能成功回帖。</p>
]]></content>
      
        <categories>
            
            <category> 脚本 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[线性结构笔记（二）]]></title>
      <url>/2017/05/articles/2017-5-05-506-2/</url>
      <content type="html"><![CDATA[<h3 id="（二）堆栈（先入后出，后入先出）"><a href="#（二）堆栈（先入后出，后入先出）" class="headerlink" title="（二）堆栈（先入后出，后入先出）"></a>（二）堆栈（先入后出，后入先出）</h3><a id="more"></a>
<h4 id="1-堆栈的顺序存储"><a href="#1-堆栈的顺序存储" class="headerlink" title="1.堆栈的顺序存储"></a>1.堆栈的顺序存储</h4><ul>
<li><p>定义（Top 是数组下标，对应栈顶元素，Data 用于指向之后定义的数组）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> * <span class="title">PtrToSNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType * Data;</span><br><span class="line">    Position Top;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToSNode Stack;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成堆栈</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*创建堆栈，其中有一个指针，指向动态分配的数组*/</span></span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">    S-&gt;Data = (ElementType *)<span class="built_in">malloc</span>(MaxSize * <span class="keyword">sizeof</span>(ElementType));</span><br><span class="line">    S-&gt;Top = <span class="number">-1</span>;</span><br><span class="line">    S-&gt;MaxSize = MaxSize;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断堆栈是否已满</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*S-&gt;Top 是数组下标，例如数组a有5个元素，最后一个元素下标是5-1，所以是MaxSize-1*/</span></span><br><span class="line">    <span class="keyword">return</span> (S-&gt;Top==S-&gt;MaxSize<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>压栈</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(Stack S, ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"堆栈已满\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*S-&gt;Data[S-&gt;Top] 指向末尾元素，下面对最后一个的下一个元素赋值，此时 S-&gt;Data[S-&gt;Top] 又指向新的末尾元素*/</span></span><br><span class="line">        S-&gt;Data[++(S-&gt;Top)] = X;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断堆栈是否为空</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (S-&gt;Top==<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>出栈</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"堆栈为空\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Data[(S-&gt;Top)--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：顺序栈就是在数组末尾进行添加和删除操作。</p>
<h4 id="2-双栈顶的顺序栈"><a href="#2-双栈顶的顺序栈" class="headerlink" title="2.双栈顶的顺序栈"></a>2.双栈顶的顺序栈</h4></li>
<li><p>定义</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> * <span class="title">PtrToSNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType * Data;</span><br><span class="line">    Position Top1;</span><br><span class="line">    Position Top2;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToSNode Stack;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建堆栈（Top1 和 Top2 都在数组之外）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">    S-&gt;Data = (ElementType *)<span class="built_in">malloc</span>(MaxSize*<span class="keyword">sizeof</span>(ElementType));</span><br><span class="line">    S-&gt;Top1 = <span class="number">-1</span>;</span><br><span class="line">    S-&gt;Top2 = MaxSize;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断堆栈是否已满（当 Top1 和 Top2 连起来的时候就是满了）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (S-&gt;Top1+<span class="number">1</span>==S-&gt;Top2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>压栈（根据 Tag 判断加在左边还是右边）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(Stack S, ElementType X, <span class="keyword">int</span> Tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"堆栈已满\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tag==<span class="number">1</span>)</span><br><span class="line">            S-&gt;Data[++(S-&gt;Top1)] = X;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            S-&gt;Data[--(S-&gt;Top2)] = X;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>出栈（先根据 Tag 判断那边出栈，再判断那边是否为空）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S, <span class="keyword">int</span> Tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Tag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S-&gt;Top1==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"左堆栈为空\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> S-&gt;Data[(S-&gt;Top1)--]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S-&gt;Top2==S-&gt;MaxSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"右堆栈为空\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> S-&gt;Data[(S-&gt;Top2)++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：双栈顶和单栈顶操作相似，都是在栈顶添加和删除元素。</p>
<h4 id="3-堆栈的链式存储"><a href="#3-堆栈的链式存储" class="headerlink" title="3.堆栈的链式存储"></a>3.堆栈的链式存储</h4></li>
<li><p>定义</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SNode</span> * <span class="title">PtrToSNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToSNode Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToSNode Stack;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建头结点</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*创建堆栈头结点，返回该结点指针*/</span></span><br><span class="line">    Stack S;</span><br><span class="line">    S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">    S-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>入栈（添加在头结点之后）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(Stack S, ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToSNode temp;</span><br><span class="line">    temp = (PtrToSNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct SNode));</span><br><span class="line">    temp-&gt;Data = X;</span><br><span class="line">    temp-&gt;Next = S-&gt;Next;</span><br><span class="line">    S-&gt;Next = temp;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断堆栈是否为空</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (S-&gt;Next==<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>出栈（删除头结点，返回栈顶元素）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToSNode temp;</span><br><span class="line">    ElementType top;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"堆栈为空\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = S-&gt;Next;</span><br><span class="line">    top = temp-&gt;Data;</span><br><span class="line">    S-&gt;Next = temp-&gt;Next;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：用链表实现堆栈，入栈就是在<strong>头结点之后</strong>添加一个结点，出栈就是释放<strong>头结点指向的结点</strong>，并返回该结点的数据。<strong>头结点那头是栈顶，如果用末尾作为头结点不好。</strong>（注意：链表实现跟数组实现的栈顶是位置不一样的）</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[线性结构笔记（一）]]></title>
      <url>/2017/05/articles/2017-5-05-506-1/</url>
      <content type="html"><![CDATA[<h3 id="（一）链表"><a href="#（一）链表" class="headerlink" title="（一）链表"></a>（一）链表</h3><h4 id="1-线性表的顺序存储"><a href="#1-线性表的顺序存储" class="headerlink" title="1.线性表的顺序存储"></a>1.线性表的顺序存储</h4><a id="more"></a>
<ul>
<li><p>定义</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> * <span class="title">PtrToLNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToLNode List;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List L;</span><br><span class="line">    L = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回指定位置的元素</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">FindKth</span><span class="params">(List L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;Last[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回L中第一个与X相同的元素的位置，不存在就返回错误信息</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(List L, ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=L-&gt;Last&amp;&amp;L-&gt;Data[i]!=X)<span class="comment">//如果i小于L-&gt;Last说明还有元素。如果还有元素，并且当前的元素不等于X，就i++</span></span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; L-&gt;Last) <span class="keyword">return</span> ERROR;<span class="comment">//如果最后一个元素是X，那么i就等于L-&gt;Last，大于就说明没找到</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> i;<span class="comment">//既然不是没找到，那就是位置为i的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在位置i前面插入一个元素X</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(List L, ElementType X, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position j;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;Last==MAXSIZE<span class="number">-1</span>)<span class="comment">//数组从0开始，假如有5个元素，最后一个下标为5-1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表满了\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;Last+<span class="number">2</span>)<span class="comment">//L-&gt;Last是最后一个，插入到+2位置，就不是接着最后一个了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"位序不合法\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从后面开始每个元素都向后移动，将下标为i的元素移动后停止</span></span><br><span class="line">    <span class="keyword">for</span>(j=L-&gt;Last; j&gt;=i; j--)</span><br><span class="line">        L-&gt;Data[j+<span class="number">1</span>] = L-&gt;Data[j];</span><br><span class="line">    L-&gt;Data[i] = X;<span class="comment">//对下标为i的元素赋值</span></span><br><span class="line">    L-&gt;Last++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除位置为i的元素</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Delete</span><span class="params">(List L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*注意，删除第i个元素，其下标为i-1*/</span></span><br><span class="line">    Position j;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L-&gt;Last+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"位序%d不存在元素。\n"</span>, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=i<span class="number">-1</span>; j&lt;L-&gt;Last; j++)</span><br><span class="line">        L-&gt;Data[j] = L-&gt;Data[j+<span class="number">1</span>];</span><br><span class="line">    L-&gt;Last--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：链表的顺序存储就是对一个数组进行操作。</p>
<h4 id="2-线性表的链式存储"><a href="#2-线性表的链式存储" class="headerlink" title="2.线性表的链式存储"></a>2.线性表的链式存储</h4></li>
<li><p>定义</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> * <span class="title">PtrToLNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToLNode Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToLNode Position;</span><br><span class="line"><span class="keyword">typedef</span> PtrToLNode List;</span><br></pre></td></tr></table></figure>
</li>
<li><p>求表长（无头结点）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(List L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position p;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    p = L;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按序号查找（无头结点）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(List L, ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position p;</span><br><span class="line">    p = L;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;p-&gt;Data!=X)</span><br><span class="line">    <span class="comment">/*如果p不为NULL且元素不为X就到下一个，跳出的条件是到头或者找到X，返回值是X所在结点的地址或者NULL*/</span></span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入（无头结点）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List <span class="title">Insert</span><span class="params">(List L, ElementType X, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position tmp, pre;</span><br><span class="line">    tmp = (Position)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));   <span class="comment">/*申请、填装结点*/</span></span><br><span class="line">    tmp-&gt;Data = X;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)   <span class="comment">/*新节点插在表头*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp-&gt;Next = L;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>   <span class="comment">/*查找位序为i-1的结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        pre = L;</span><br><span class="line">        <span class="keyword">while</span>(pre&amp;&amp;cnt&lt;i<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = pre-&gt;Next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pre==<span class="literal">NULL</span>||cnt!=i<span class="number">-1</span>)  <span class="comment">/*所查找的结点不在L中*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输入位置参数错误。\n"</span>);</span><br><span class="line">            <span class="built_in">free</span>(tmp);</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">/*找到了待插结点的前一个结点pre*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*插入新节点，并返回表头L*/</span></span><br><span class="line">            tmp-&gt;Next = pre-&gt;Next;</span><br><span class="line">            pre-&gt;Next = tmp;</span><br><span class="line">            <span class="keyword">return</span> L;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入（有头结点）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(List L, ElementType X, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*这里假设L有头结点*/</span></span><br><span class="line">    Position tmp, pre;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    pre = L;</span><br><span class="line">    <span class="keyword">while</span>(pre&amp;&amp;cnt&lt;i<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pre = pre-&gt;Next;</span><br><span class="line">        cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre==<span class="literal">NULL</span>||cnt!=i<span class="number">-1</span>)   <span class="comment">/*所找的结点不在L中*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入位置参数错误。\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>   <span class="comment">/*找到了待插入结点的前一个结点pre；若i=1，pre就指向表头*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*插入新节点*/</span></span><br><span class="line">        tmp = (Position)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode)); <span class="comment">/*申请、填装结点*/</span></span><br><span class="line">        tmp-&gt;Data = X;</span><br><span class="line">        tmp-&gt;Next = pre-&gt;Next;</span><br><span class="line">        pre-&gt;Next = tmp;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除（有头结点）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Delete</span><span class="params">(List L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*这里默认L有头结点*/</span></span><br><span class="line">    Position tmp, pre;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*查找位序为i-1的结点*/</span></span><br><span class="line">    pre = L;   <span class="comment">/*pre指向表头*/</span></span><br><span class="line">    <span class="keyword">while</span>(pre&amp;&amp;cnt&lt;i<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pre = pre-&gt;Next;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre==<span class="literal">NULL</span>||cnt!=i<span class="number">-1</span>||pre-&gt;Next==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*pre不存在、cnt找不到i-1、要删除的结点不存在*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除位置参数错误。\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>   <span class="comment">/*找到了待删除结点的前一个结点*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*将结点删除*/</span></span><br><span class="line">        tmp = pre-&gt;Next;</span><br><span class="line">        pre-&gt;Next = tmp-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(tmp);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：线性表的线性存储就是链表，对其进行操作时通常是先遍历链表，找到正确的位置之后进行操作，如果没找到就返回错误信息。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[线性结构笔记（三）]]></title>
      <url>/2017/05/articles/2017-5-05-506-3/</url>
      <content type="html"><![CDATA[<h3 id="（三）队列（先入先出，后入后出）"><a href="#（三）队列（先入先出，后入后出）" class="headerlink" title="（三）队列（先入先出，后入后出）"></a>（三）队列（先入先出，后入后出）</h3><a id="more"></a>
<h4 id="1-队列的顺序存储"><a href="#1-队列的顺序存储" class="headerlink" title="1.队列的顺序存储"></a>1.队列的顺序存储</h4><ul>
<li><p>定义（定义一个结构体，里面有个可以指向数组的指针）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> * <span class="title">PtrToQNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType * Data;</span><br><span class="line">    <span class="comment">/*int 类型指针可以指向 int 数组*/</span></span><br><span class="line">    Position Front, Rear;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">    <span class="comment">/*MaxSize 是数组元素的个数*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToQNode Queue;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个队列</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">(<span class="keyword">int</span> MaxSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Queue Q = (Queue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct QNode));</span><br><span class="line">    Q-&gt;Data = (ElementType *)<span class="built_in">malloc</span>(MaxSize * <span class="keyword">sizeof</span>(ElementType));</span><br><span class="line">    Q-&gt;Front = Q-&gt;Rear = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;MaxSize = MaxSize;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断队列是否满了</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsFull</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((Q-&gt;Rear+<span class="number">1</span>)%Q-&gt;MaxSize == Q-&gt;Front);</span><br><span class="line">    <span class="comment">//为什么 Q-&gt;Front 不用对 Q-&gt;MaxSize 取整？</span></span><br><span class="line">    <span class="comment">//因为 Q-&gt;Front 肯定是小于 Q-&gt;MaxSize 的，而 Q-&gt;Rear+1 可能是大于 Q-&gt;MaxSize 的。 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加入队列</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AddQ</span><span class="params">(Queue Q, ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列已满\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q-&gt;Rear = (Q-&gt;Rear+<span class="number">1</span>) % Q-&gt;MaxSize;</span><br><span class="line">        <span class="comment">//如果到了末尾并且数组没满就加到数组的头部</span></span><br><span class="line">        <span class="comment">//对 Q-&gt;MaxSize 取余可以使 Q-&gt;Rear+1 等于 Q-&gt;MaxSize 时，Q-&gt;Rear 变成0。</span></span><br><span class="line">        <span class="comment">//就是可以从尾巴跑到开头</span></span><br><span class="line">        Q-&gt;Data[Q-&gt;Rear] = X;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断队列是否为空（一开始 Front 和 Rear 都等于0，队列为空；删除元素 Rear-1，最后也会导致 Front 等于 Rear；但是不会因为添加元素导致两者相等，以为当 Rear 在 Front 前一个的时候，就认为队列满了，就不能添加元素了，所以 Front==Rear 时队列肯定为空）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q-&gt;Front == Q-&gt;Rear);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除队列头（对 Front（队列头）而不是 Rear（队列尾）操作）</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q-&gt;Front = (Q-&gt;Front+<span class="number">1</span>) % Q-&gt;MaxSize;</span><br><span class="line">        <span class="keyword">return</span> Q-&gt;Data[Q-&gt;Front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：队列是在头删除，在尾添加，而堆栈的删除和添加都是在尾部进行的。因为在头部删除，所以可能Rear到了尾部而前面还有空间，这种情况下利用<strong>循环队列</strong>可以更好的利用数组空间。循环数组的关键就是利用了取余操作。</p>
<h4 id="2-队列的链式存储"><a href="#2-队列的链式存储" class="headerlink" title="2.队列的链式存储"></a>2.队列的链式存储</h4></li>
<li><p>定义<br><img src="\images\DuiLie.png" alt></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/*队列中的结点*/</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> * <span class="title">PtrToQNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Position Front, Rear;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToQNode Queue;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断队列是否为空</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q-&gt;Front==<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>入队</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Queue <span class="title">AddQ</span><span class="params">(Queue Q, ElementType X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position temp;</span><br><span class="line">    temp = (PtrToQNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    temp-&gt;Data = X;</span><br><span class="line">    temp-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty)</span><br><span class="line">    <span class="comment">/*如果添加的是第一个结点，需要将 Front 和 Rear 都指向该结点；否则对 Rear 操作即可。*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q-&gt;Front = temp;</span><br><span class="line">        Q-&gt;Rear = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q-&gt;Rear-&gt;Next = temp;</span><br><span class="line">        Q-&gt;Rear = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>出队</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">DeleteQ</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position temp;</span><br><span class="line">    ElementType data;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = Q-&gt;Front;</span><br><span class="line">        <span class="comment">/*如果只有一个结点，那么删除之后 Front 和 Rear 都要变成 NULL；否则 Front 指向第二个结点，释放第一个结点，返回第一个结点的数据*/</span></span><br><span class="line">        <span class="keyword">if</span>(Q-&gt;Front == Q-&gt;Rear)</span><br><span class="line">            Q-&gt;Front = Q-&gt;Rear = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Q-&gt;Front = temp-&gt;Next;</span><br><span class="line">        data = temp-&gt;Data;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结：队列的链式存储需要两种结构体，一种是队列的结构体，一种是结点的结构体。添加在尾部进行，删除在头部进行。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言 第十一章 文件]]></title>
      <url>/2017/05/articles/2017-6-05-605-1/</url>
      <content type="html"><![CDATA[<h1 id="文件的分类"><a href="#文件的分类" class="headerlink" title="文件的分类"></a>文件的分类</h1><a id="more"></a>
<h2 id="按数据性质分类"><a href="#按数据性质分类" class="headerlink" title="按数据性质分类"></a>按数据性质分类</h2><p>程序文件、数据文件</p>
<h2 id="按数据的编码方式"><a href="#按数据的编码方式" class="headerlink" title="按数据的编码方式"></a>按数据的编码方式</h2><p>ASCII 文件、二进制文件</p>
<h1 id="文件指针与文件内部指针"><a href="#文件指针与文件内部指针" class="headerlink" title="文件指针与文件内部指针"></a>文件指针与文件内部指针</h1><p>文件指针 FILE 应该是一个结构体类型，包含文件的各种信息，通过 fopen()赋值。<br>对文件操作时，文件内部也有一个指针，开始时指向最前面，每次读写该指针都会向后移动。</p>
<h1 id="对文件的操作"><a href="#对文件的操作" class="headerlink" title="对文件的操作"></a>对文件的操作</h1><ul>
<li>打开</li>
<li>读写</li>
<li>关闭</li>
</ul>
<h1 id="文件的打开与关闭"><a href="#文件的打开与关闭" class="headerlink" title="文件的打开与关闭"></a>文件的打开与关闭</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FILE * fp;</span><br><span class="line"><span class="keyword">if</span>((fp = fopen(<span class="string">"d:\\a.txt"</span>,wb))==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cannot open file strike any key exit"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 fopen()函数打开文件，指针文件位置和打开方式。<br>打开方式包括：</p>
<ul>
<li>rt 只读 ASCII 码文件</li>
<li>wt 只写 ASCII 码文件</li>
<li>at 追加 ASCII 码文件</li>
<li>rb 只读二进制文件</li>
<li>wb 只写二进制文件</li>
<li>ab 追加二进制文件</li>
<li>rt+ 以读的方式打开 ASCII 码文件，允许写入</li>
<li>wt+ 以写的方式打开 ASCII 码文件，允许读取</li>
<li>at+ 以追加的方式打开 ASCII 码文件，允许读写</li>
<li>rb+ 以读的方式打开二进制文件，允许写入</li>
<li>wb+ 以写的方式打开二进制文件，允许读取</li>
<li>ab+ 以追加的方式打开二进制文件，允许读写</li>
</ul>
<p>文件的关闭<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure></p>
<h1 id="文件顺序读写"><a href="#文件顺序读写" class="headerlink" title="文件顺序读写"></a>文件顺序读写</h1><p>文件读写函数</p>
<ul>
<li>对 ASCII 码文件的读写</li>
<li><p>fgetc( ) 从文件中读取一个字符</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ch = fgetc(fp);</span><br><span class="line"><span class="keyword">while</span>(ch!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">    ch = fgetc(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用 fgetc() 读取一个字符，只要读取到的不是 EOF 就继续读取。（EOF 是文件结束标志）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>fputc( ) 向文件中写入一个字符</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ch = getchar(); <span class="comment">//从已经输入的字符串中读取一个字符</span></span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">'\n'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    fputc(ch, fp);</span><br><span class="line">    ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只要读取到的字符不是 '\n' 就往下读取</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>fgets( ) 从指定文件读取一个字符串放到字符数组</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fgets(str, <span class="number">5</span>, fp);</span><br><span class="line"><span class="comment">//分别对应字符数组，要读取的字数个数，要读取的文件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>fputs( )</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> st[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, st);    <span class="comment">//从键盘输入字符串</span></span><br><span class="line"><span class="built_in">fputs</span>(st, fp);  <span class="comment">//将字符串写入文件中</span></span><br><span class="line"><span class="comment">//fputc 是每次写入一个字符，而 fgets 是写入一个字符串</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对二进制文件的读写</p>
</li>
<li><p>fwrite( ) 写数据块</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fwrite(pp, <span class="keyword">sizeof</span>(struct stu), <span class="number">2</span>, fp);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    pp 是结构体数组的首地址，这个位置放的是指针，表示存放输入数据的首地址。</span></span><br><span class="line"><span class="comment">    sizeof(struct stu) 是数据块的字节数</span></span><br><span class="line"><span class="comment">    2 表示要写入的数据块数量，这里的结构体数组有两个元素，所以是 2</span></span><br><span class="line"><span class="comment">    fp 是文件指针</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>fread( ) 读数据块</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fread(qq, <span class="keyword">sizeof</span>(struct stu), <span class="number">2</span>, fp);</span><br><span class="line"><span class="comment">//含义与上面相似，qq 也是结构体类型数组。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>从文件中读写数据</p>
</li>
</ul>
<p><strong>注意：fscanf 是从文件往内存中发送数据，fprintf 是将内存数据写入文件中，这里是与直觉相反的</strong></p>
<ul>
<li><p>fprintf( ) </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="built_in">fprintf</span>(文件指针, 格式字符串, 输出表列);</span><br><span class="line">例子：</span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s%d%d%s"</span>, pp-&gt;name, pp-&gt;num, pp-&gt;age, pp-&gt;addr);</span><br><span class="line"><span class="comment">//pp 是一个结构体指针，pp-&gt;name 等指向了内存中的数据，这条语句是将这些数据写入到文件中。</span></span><br><span class="line"><span class="comment">//注意格式字符串是有双引号的</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>fscanf( )</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="built_in">fscanf</span>(文件指针, 格式字符串, 输入表列);</span><br><span class="line">例子：</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%s%d%d%s"</span>, qq-&gt;name, &amp;qq-&gt;name, &amp;qq-&gt;age, qq-&gt;addr);</span><br><span class="line"><span class="comment">//qq 是结构体指针，qq-&gt;name 等是内存中存在的变量。需要注意的是，fscanf 会给内存中变量赋值，所以需要取变量地址</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="其他部分函数"><a href="#其他部分函数" class="headerlink" title="其他部分函数"></a>其他部分函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">feof(fp);</span><br><span class="line"><span class="comment">//判断文件是否结束，结束返回 1，否则返回 0；</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rewind(fp);</span><br><span class="line"><span class="comment">//将内部指针指向开头，在对文件进行操作之后，想要读取数据就要重置内部指针</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次观念的改变]]></title>
      <url>/2017/05/articles/2017-5-05-505-1/</url>
      <content type="html"><![CDATA[<h2 id="写作背景"><a href="#写作背景" class="headerlink" title="写作背景"></a>写作背景</h2><p>这两天对于如何<strong>学习编程</strong>的认识有了很大的改变，对于<strong>人生规划</strong>也发生了变化。<br><a id="more"></a></p>
<h2 id="如何学习编程"><a href="#如何学习编程" class="headerlink" title="如何学习编程"></a>如何学习编程</h2><p>编程能力可分为两种</p>
<ul>
<li><h3 id="内功包括"><a href="#内功包括" class="headerlink" title="内功包括"></a>内功包括</h3><blockquote>
<h4 id="编程通用性的知识："><a href="#编程通用性的知识：" class="headerlink" title="编程通用性的知识："></a>编程通用性的知识：</h4><p>算法<br>编译原理<br>数据结构<br>设计模式<br>重构<br>性能优化<br>面向对象编程<br>数据库<br>抽象化</p>
<h4 id="语言内部的共性："><a href="#语言内部的共性：" class="headerlink" title="语言内部的共性："></a>语言内部的共性：</h4><p>字符串处理<br>正则表达式<br>变量与常量<br>控制语句if-else<br>循环<br>函数/方法<br>类/对象/接口<br>递归<br>哈希表<br>数组</p>
<h4 id="还有工具类的内功："><a href="#还有工具类的内功：" class="headerlink" title="还有工具类的内功："></a>还有工具类的内功：</h4><p>构建工具 （通用知识）<br>单元测试 （通用知识）<br>依赖包管理 （通用知识）<br>MVC 框架 （通用知识）<br>代码质量检测 （通用知识）<br>JSON 和 XML 设计 （通用知识）<br>代码控制 （通用知识）</p>
<h4 id="IT外的相关知识："><a href="#IT外的相关知识：" class="headerlink" title="IT外的相关知识："></a>IT外的相关知识：</h4><p>数学（离散数学，几何学）<br>物理<br>图形处理<br>图形/UI设计</p>
</blockquote>
</li>
<li><h3 id="外功包括"><a href="#外功包括" class="headerlink" title="外功包括"></a>外功包括</h3><blockquote>
<p>各种编程语言包括C++，javascript，java，php，C#，perl，python等<br>各种编程环境，.NET, WAMP/LAMP，node.js 等<br>各种IDE和编辑器，notepad++，vim，Visual Studio，Sublime等<br>各种快捷键，<br>各种包依赖管理器，npm，composer,Nuget<br>各种版本管理器：git，svn，cvs<br>各种单元测试工具<br>各种构建工具<br>各种MVC框架</p>
</blockquote>
</li>
</ul>
<p>来源：<a href="https://www.zhihu.com/question/22471978/answer/21468471" target="_blank" rel="noopener">知乎</a></p>
<h3 id="以前的想法"><a href="#以前的想法" class="headerlink" title="以前的想法"></a>以前的想法</h3><p>以为学编程就是学一门编程语言，根本不知道原来需要掌握那么多的知识。</p>
<h3 id="走过的弯路"><a href="#走过的弯路" class="headerlink" title="走过的弯路"></a>走过的弯路</h3><p>从C语言到JAVA，我都非常的浮躁，因为错误的观念，导致我总急着做出一些作品来。而没有好好打基础，万幸的是，后来觉得数据结构重要，不得不去好好学C语言。</p>
<h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>C语言学了大半，剩下的等老师讲。数据结构学到堆栈部分，但仍然对如何学习数据结构一头雾水，不知道怎么才能达到要求。</p>
<h4 id="暂时的想法"><a href="#暂时的想法" class="headerlink" title="暂时的想法"></a>暂时的想法</h4><p>先把数据结构学完，再把《计算机科学导论》看一遍（<strong>要做笔记</strong>），然后再去看其他该看的书，对具体编程语言的学习可能会很慢。</p>
<h2 id="人生规划"><a href="#人生规划" class="headerlink" title="人生规划"></a>人生规划</h2><p><a href="https://mp.weixin.qq.com/s/GX1wsb1w5Bo1vokHdY8UfQ" target="_blank" rel="noopener">技术人的未来在哪里</a><br>这是stormzhang的一篇文章，对我的思维的确有所启发。</p>
<h3 id="不能一辈子光靠coding谋生"><a href="#不能一辈子光靠coding谋生" class="headerlink" title="不能一辈子光靠coding谋生"></a>不能一辈子光靠coding谋生</h3><p>技术发展迅速，一门语言流行时间不确定，一旦技术过时，技术人很可能面临失业，尽管他曾经工作待遇优厚。</p>
<h3 id="不要拒绝新技术"><a href="#不要拒绝新技术" class="headerlink" title="不要拒绝新技术"></a>不要拒绝新技术</h3><p>这个行业不需要过时的技术。</p>
<h4 id="培养多维度的能力"><a href="#培养多维度的能力" class="headerlink" title="培养多维度的能力"></a>培养多维度的能力</h4><p>极少有光靠编程成功的人，那些出名的技术人大多有其他与技术无关方面的优势，比如推广自己的产品等等，所以说非常有必要培养多维度的能力。</p>
<h3 id="培养可持续的技能"><a href="#培养可持续的技能" class="headerlink" title="培养可持续的技能"></a>培养可持续的技能</h3><p>一门语言过时，那么对这门语言的经验也就基本没用了。为了不至于有一天优势全无，培养自己可持续的技能是个不错的选择。可持续指的是越做越好的事情，比如写作，以及其他不会过时的技能。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今时不同往日，整个行业的水平提升了，混口饭吃也不再那么容易了。大公司不缺有技术的人，幻想有技术就有工作不太现实了。为了毕业能找到份工作，剩下的大学时光，我得修炼好内功，同时培养自己其他的能力，争取大学不留遗憾。</p>
]]></content>
      
        <categories>
            
            <category> 人生感悟 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
